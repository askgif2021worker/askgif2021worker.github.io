[{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":637},{"id":1589,"title":"Search in a Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_862ff4cf-5f64-4e7f-92ee-63a4017cae63.jpg","dateCreated":"2020-10-09T04:19:45.942Z","dateModified":"2020-10-09T04:19:56.582Z","contributedBy":"sumitc91","content":"Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node's value equals the given value. Return the subtree rooted with that node. If such node doesn't exist, you should return NULL.\nFor example,&nbsp;\nGiven the tree:<br />&nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/862ff4cf-5f64-4e7f-92ee-63a4017cae63.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"search-in-a-binary-search-tree-tree-easy-leetcode","total":637},{"id":1588,"title":"Longest Univalue Path - Tree - Easy - LeetCode","imageUrl":"icon_767bd537-2951-47b6-8d05-b9ca6b615826.jpg","dateCreated":"2020-10-08T12:25:34.461Z","dateModified":"2020-10-08T12:25:45.238Z","contributedBy":"sumitc91","content":"Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.\nThe length of path between two nodes is represented by the number of edges between them.\n&nbsp;\nExample 1:\nInput:</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/767bd537-2951-47b6-8d05-b9ca6b615826.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"longest-univalue-path-tree-easy-leetcode","total":637},{"id":1587,"title":"Second Minimum Node In a Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_6562b9e9-1f6e-4026-adfb-418518d45b25.jpg","dateCreated":"2020-10-08T05:47:45.661Z","dateModified":"2020-10-08T05:48:05.054Z","contributedBy":"sumitc91","content":"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6562b9e9-1f6e-4026-adfb-418518d45b25.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"second-minimum-node-in-a-binary-tree-tree-easy-leetcode","total":637},{"id":1586,"title":"Trim a Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_efea3822-6700-4fc8-81a6-b51e7ac249f1.jpg","dateCreated":"2020-10-08T05:18:37.773Z","dateModified":"2020-10-08T05:18:52.205Z","contributedBy":"sumitc91","content":"Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should rem","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/efea3822-6700-4fc8-81a6-b51e7ac249f1.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"trim-a-binary-search-tree-tree-easy-leetcode","total":637},{"id":1585,"title":"Two Sum IV - Input is a BST - Tree - Easy - LeetCode","imageUrl":"icon_d4fc6da1-e8bd-4173-9588-4c3ec727e3f2.jpg","dateCreated":"2020-10-08T04:36:12.089Z","dateModified":"2020-10-08T04:36:21.987Z","contributedBy":"sumitc91","content":"Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.\n&nbsp;\nExample 1:\n<br />Input: root = [5,3,6,2,4,null,7], k = 9<br />Output: true<br />Example 2:\n<br />In","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d4fc6da1-e8bd-4173-9588-4c3ec727e3f2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"two-sum-iv-input-is-a-bst-tree-easy-leetcode","total":637},{"id":1584,"title":"Average of Levels in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_00a270d3-3254-4f73-a90d-6153174f3a15.jpg","dateCreated":"2020-10-08T04:10:04.182Z","dateModified":"2020-10-08T04:10:29.201Z","contributedBy":"sumitc91","content":"Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.<br />Example 1:<br />Input:<br />&nbsp; &nbsp; 3<br />&nbsp; &nbsp;/ \\<br />&nbsp; 9 &nbsp;20<br />&nbsp; &nbsp; / &nbsp;\\<br />&nbsp; &nbsp;15 &nbsp; 7<br />Output: [3, 14.5, 11]<br />Expl","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/00a270d3-3254-4f73-a90d-6153174f3a15.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"average-of-levels-in-binary-tree-tree-easy-leetcode","total":637},{"id":1583,"title":"Merge Two Binary Trees - Tree - Easy - LeetCode","imageUrl":"icon_20c35011-6cff-4cac-b2eb-2fe805fd696e.jpg","dateCreated":"2020-10-08T03:35:36.258Z","dateModified":"2020-10-08T03:35:54.193Z","contributedBy":"sumitc91","content":"Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20c35011-6cff-4cac-b2eb-2fe805fd696e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"merge-two-binary-trees-tree-easy-leetcode","total":637},{"id":1582,"title":"Construct String from Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_e8b61cbd-801c-4ac5-8279-5792c4fd649e.jpg","dateCreated":"2020-10-07T09:12:25.025Z","dateModified":"2020-10-07T09:12:41.839Z","contributedBy":"sumitc91","content":"You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.\nThe null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relat","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e8b61cbd-801c-4ac5-8279-5792c4fd649e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"construct-string-from-binary-tree-tree-easy-leetcode","total":637},{"id":1581,"title":"N-ary Tree Postorder Traversal - Tree - Easy - LeetCode","imageUrl":"icon_bd59d4ec-34fa-437f-9580-55b338e839a1.jpg","dateCreated":"2020-10-07T08:55:54.36Z","dateModified":"2020-10-07T08:56:06.945Z","contributedBy":"sumitc91","content":"Given an n-ary tree, return the postorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n&nbsp;\nFollow up:\nRecursive solution is trivial,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bd59d4ec-34fa-437f-9580-55b338e839a1.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"n-ary-tree-postorder-traversal-tree-easy-leetcode","total":637},{"id":1580,"title":"N-ary Tree Preorder Traversal - Tree - Easy - LeetCode","imageUrl":"icon_552f3a01-1d02-4d03-9aba-f24879032a40.jpg","dateCreated":"2020-10-07T08:50:03.683Z","dateModified":"2020-10-07T08:50:12.614Z","contributedBy":"sumitc91","content":"Given an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n&nbsp;\nFollow up:\nRecursive solution is trivial, ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/552f3a01-1d02-4d03-9aba-f24879032a40.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"n-ary-tree-preorder-traversal-tree-easy-leetcode","total":637},{"id":1579,"title":"Subtree of Another Tree - Tree - Easy - LeetCode","imageUrl":"icon_048066ef-d215-419f-b675-7fe12d76f496.jpg","dateCreated":"2020-10-07T08:44:06.774Z","dateModified":"2020-10-07T08:44:20.819Z","contributedBy":"sumitc91","content":"Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.\nExample 1:<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/048066ef-d215-419f-b675-7fe12d76f496.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"subtree-of-another-tree-tree-easy-leetcode","total":637}]