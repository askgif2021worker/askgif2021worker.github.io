{"id":103,"title":"How to implement PreOrder Traversal in Binary Tree?","imageUrl":"67ec7449-0264-479c-9093-17e4045d3a45_preorder-traversal.png","dateCreated":"2018-08-09T14:09:46.468Z","dateModified":"2018-08-09T14:28:57.791Z","contributedBy":"AskGif","content":"<p>In pre-order traversal, each node is processed before (pre) either of it's sub-trees. This is the simplest traversal to understand. However, even though each node is processed before the subtrees, it still requires that some information must be maintained while moving down the tree.</p>\r\n<p>Preorder traversal is defined as follows:</p>\r\n<p>- Visit the root.</p>\r\n<p>- Traverse the left subtree in Preorder.</p>\r\n<p>- Traverse the right subtree in Preorder.</p>\r\n<p>Java code for above implement is as below:</p>\r\n<pre class=\"language-java\"><code>package askgif.tree;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n \r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree\r\n{\r\n    Node root;\r\n \r\n    BinaryTree()\r\n    {\r\n        root = null;\r\n    }\r\n    \r\n}\r\n\r\npublic class TreeQuestions {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tBinaryTree binaryTree = new BinaryTree();\r\n\t\tNode root = new Node(1);\r\n\t\tbinaryTree.root = root;\r\n\t\tbinaryTree.root.left = new Node(2);\r\n\t\tbinaryTree.root.right = new Node(3);\r\n\t\tbinaryTree.root.left.left = new Node(4);\r\n\t\tbinaryTree.root.left.right = new Node(5);\r\n        \r\n        PrintPreOrderTraversal(root);\r\n\r\n\t}\r\n\r\n\tprivate static void PrintPreOrderTraversal(Node treeNode) {\r\n\t\tif(treeNode == null)\r\n\t\t\treturn;\r\n\t\tSystem.out.println(treeNode.data);\r\n\t\tPrintPreOrderTraversal(treeNode.left);\r\n\t\tPrintPreOrderTraversal(treeNode.right);\r\n\t\t\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n1\r\n2\r\n4\r\n5\r\n3</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67ec7449-0264-479c-9093-17e4045d3a45_preorder-traversal.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-implement-preorder-traversal-in-binary-tree","tags":[{"name":"प्रशन","slug":"questions"},{"name":"tree","slug":"tree"},{"name":"preorder","slug":"preorder"},{"name":"traversal","slug":"traversal"},{"name":"java","slug":"java"},{"name":"recursion","slug":"recursion"},{"name":"interview","slug":"interview"}],"recommendations":[{"id":412,"title":"Start your web tests with Selenium2, Maven, Testng","imageUrl":"c65bd914-66cf-4345-bcdb-736cf283ec69_selenium-maven.jpg","dateCreated":"2019-06-26T07:00:11.515Z","dateModified":"2019-06-26T07:02:44.098Z","contributedBy":"AskGif","content":"Every time you are playing around with web tests you think: why have I waited so long. Doesn&rsquo;t matter, you have done it and that&rsquo;s it what matters.\r\n&nbsp;\r\nThe last time I used Selenium 1 which is very often used for web tests. Selenium 1 is great but has a few limitati","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c65bd914-66cf-4345-bcdb-736cf283ec69_selenium-maven.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"java","slug":"java"},{"name":"परिक्षण","slug":"testing"},{"name":"maven","slug":"maven"},{"name":"test_hi","slug":"test"},{"name":"selenium","slug":"selenium"}],"slug":"start-your-web-tests-with-selenium2-maven-testng","total":0},{"id":210,"title":"What is a Priority Queue?","imageUrl":"09a0405d-4490-4161-bb38-f3f69f75356d_Priority-Queue.jpg","dateCreated":"2019-01-03T15:28:09.812Z","dateModified":"2019-01-03T15:28:18.476Z","contributedBy":"AskGif","content":"In computer science, a priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a \"priority\" associated with it. In a priority queue, an element with high priority is served before an element with low priority. In some ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/09a0405d-4490-4161-bb38-f3f69f75356d_Priority-Queue.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"queue","slug":"queue"},{"name":"Priority-Queue","slug":"priority-queue"},{"name":"algorithm","slug":"algorithm"}],"slug":"what-is-a-priority-queue","total":0},{"id":100,"title":"What is a Queue?","imageUrl":"f653b2fa-6790-4d95-b5cf-1eafcce38bda_Data_Queue.png","dateCreated":"2018-08-08T11:20:40.978Z","dateModified":"2018-08-08T11:20:49.04Z","contributedBy":"AskGif","content":"A queue is a data structure used for storing data (similar to Linked Lists and Stacks). In a queue, the order in which data arrives is important. In general, a queue is a line of people or things waiting to be served in sequential order starting at the beginning of the line or sequence.\r\nA","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f653b2fa-6790-4d95-b5cf-1eafcce38bda_Data_Queue.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"queue","slug":"queue"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-a-queue","total":0},{"id":37,"title":"Find Longest Sub-string without any Repeating characters.","imageUrl":"28ea9b8b-1280-4d6a-8f2f-48f61377a5e2_maxresdefault.jpg","dateCreated":"2018-07-20T06:23:31.49Z","dateModified":"2018-07-20T06:23:41.247Z","contributedBy":"AskGif","content":"A substring is a contiguous sequence of characters within a string. For instance, \"the best of\" is a substring of \"It was the best of times\". This is not to be confused with subsequence, which is a generalization of a substring. For example, \"Itwastimes\" is a subsequence of \"It was the best of ti","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/28ea9b8b-1280-4d6a-8f2f-48f61377a5e2_maxresdefault.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"}],"slug":"find-longest-sub-string-without-any-repeating-characters","total":0}]}