{"id":108,"title":"How to implement Level Order Traversal in Binary Tree?","imageUrl":"7833549b-eb6c-47f7-a6b0-1364f1434f70_binary_tree_breadth-first_traversal.png","dateCreated":"2018-08-14T14:06:33.296Z","dateModified":"2018-08-14T14:06:56.625Z","contributedBy":"AskGif","content":"<p>Trees can also be traversed in level-order, where we visit every node on a level before going to a lower level. This search is referred to as a breadth-first search (BFS), as the search tree is broadened as much as possible on each depth before going to the next depth.</p>\r\n<p>Java implementation of level order traversal is as below:</p>\r\n<pre class=\"language-java\"><code>package askgif.tree;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n \r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree\r\n{\r\n    Node root;\r\n \r\n    BinaryTree()\r\n    {\r\n        root = null;\r\n    }\r\n    \r\n}\r\n\r\npublic class TreeQuestions {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tBinaryTree binaryTree = new BinaryTree();\r\n\t\tNode root = new Node(1);\r\n\t\tbinaryTree.root = root;\r\n\t\tbinaryTree.root.left = new Node(2);\r\n\t\tbinaryTree.root.right = new Node(3);\r\n\t\tbinaryTree.root.left.left = new Node(4);\r\n\t\tbinaryTree.root.left.right = new Node(5);\r\n        \r\n        PrintLevelOrderTraversal(root);\r\n\r\n\t}\r\n\r\n\tprivate static void PrintLevelOrderTraversal(Node treeNode) {\r\n\t\tif(treeNode == null)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tQueue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();\r\n\t\tqueue.add(treeNode);\r\n\t\twhile(!queue.isEmpty()) {\r\n\t\t\tNode temp = queue.remove();\r\n\t\t\tSystem.out.println(temp.data);\r\n\t\t\tif(temp.left != null)\r\n\t\t\t\tqueue.add(temp.left);\r\n\t\t\tif(temp.right != null)\r\n\t\t\t\tqueue.add(temp.right);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n</code></pre>\r\n<p>Time Complexity: O(n). as we are processing each node of the tree at once.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7833549b-eb6c-47f7-a6b0-1364f1434f70_binary_tree_breadth-first_traversal.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-implement-level-order-traversal-in-binary-tree","tags":[{"name":"java","slug":"java"},{"name":"tree","slug":"tree"},{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"},{"name":"level-order","slug":"level-order"},{"name":"traversal","slug":"traversal"}],"recommendations":[{"id":1697,"title":"What is Reverse proxy (web server)","imageUrl":"icon_c9b9941f-ccf0-43b6-8c8d-af837fe0b02d.jpg","dateCreated":"2020-11-20T07:38:40.516Z","dateModified":"2020-11-20T07:38:45.525Z","contributedBy":"sumitc91","content":"A reverse proxy is a web server that centralizes internal services and provides unified interfaces to the public. Requests from clients are forwarded to a server that can fulfill it before the reverse proxy returns the server's response to the client.\nAdditional benefits include:\nIn","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c9b9941f-ccf0-43b6-8c8d-af837fe0b02d.jpg","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"what-is-reverse-proxy-web-server","total":0},{"id":210,"title":"What is a Priority Queue?","imageUrl":"09a0405d-4490-4161-bb38-f3f69f75356d_Priority-Queue.jpg","dateCreated":"2019-01-03T15:28:09.812Z","dateModified":"2019-01-03T15:28:18.476Z","contributedBy":"AskGif","content":"In computer science, a priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a \"priority\" associated with it. In a priority queue, an element with high priority is served before an element with low priority. In some ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/09a0405d-4490-4161-bb38-f3f69f75356d_Priority-Queue.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"queue","slug":"queue"},{"name":"priority-queue","slug":"priority-queue"},{"name":"algorithm","slug":"algorithm"}],"slug":"what-is-a-priority-queue","total":0},{"id":37,"title":"Find Longest Sub-string without any Repeating characters.","imageUrl":"28ea9b8b-1280-4d6a-8f2f-48f61377a5e2_maxresdefault.jpg","dateCreated":"2018-07-20T06:23:31.49Z","dateModified":"2018-07-20T06:23:41.247Z","contributedBy":"AskGif","content":"A substring is a contiguous sequence of characters within a string. For instance, \"the best of\" is a substring of \"It was the best of times\". This is not to be confused with subsequence, which is a generalization of a substring. For example, \"Itwastimes\" is a subsequence of \"It was the best of ti","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/28ea9b8b-1280-4d6a-8f2f-48f61377a5e2_maxresdefault.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"}],"slug":"find-longest-sub-string-without-any-repeating-characters","total":0},{"id":36,"title":"Implement Quick Sort Using C-Sharp.","imageUrl":"ac952349-b324-4976-91ac-a217eabcde0f_Sorting_quicksort_anim.gif","dateCreated":"2018-07-19T07:01:11.967Z","dateModified":"2018-07-19T07:01:25.109Z","contributedBy":"AskGif","content":"Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm, serving as a systematic method for placing the elements of an array in order. Developed by Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ac952349-b324-4976-91ac-a217eabcde0f_Sorting_quicksort_anim.gif","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"},{"name":"sorting","slug":"sorting"}],"slug":"implement-quick-sort-using-c-sharp","total":0}]}