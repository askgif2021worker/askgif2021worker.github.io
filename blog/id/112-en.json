{"id":112,"title":"Search an element in binary tree without recursion.","imageUrl":"b3ea6acf-6279-4e29-b3cd-bb09edbc2784_binary-tree.jpg","dateCreated":"2018-08-16T09:08:38.069Z","dateModified":"2018-08-16T09:09:08.341Z","contributedBy":"AskGif","content":"<p>We can use level order traversal for solving this problem. The only change required in level order traversal is, instead of printing the date we just need to check whether the root data is equal to the element we want to search.</p>\r\n<p>source:&nbsp;Data Structures and Algorithms Made Easy in Java ( By Narasimha Karumanchi )</p>\r\n<p>Java implementation is as below:</p>\r\n<pre class=\"language-java\"><code>package askgif.tree;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n \r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree\r\n{\r\n    Node root;\r\n \r\n    BinaryTree()\r\n    {\r\n        root = null;\r\n    }\r\n    \r\n}\r\n\r\npublic class TreeQuestions {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tBinaryTree binaryTree = new BinaryTree();\r\n\t\tNode root = new Node(1);\r\n\t\tbinaryTree.root = root;\r\n\t\tbinaryTree.root.left = new Node(2);\r\n\t\tbinaryTree.root.right = new Node(3);\r\n\t\t\r\n\t\tbinaryTree.root.left.left = new Node(4);\r\n\t\tbinaryTree.root.left.right = new Node(5);\r\n        \r\n\t\tint data = 4;\r\n        System.out.println(SearchUsingLevelOrder(root, data));\r\n\r\n\t}\r\n\r\n\tprivate static Boolean SearchUsingLevelOrder(Node treeNode, int data) {\r\n\t\tif(treeNode == null)\r\n\t\t\treturn false;\r\n\t\t\r\n\t\tQueue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();\r\n\t\tqueue.add(treeNode);\r\n\t\t\r\n\t\twhile(!queue.isEmpty()) {\r\n\t\t\tNode temp = queue.remove();\r\n\t\t\tif(temp.data == data)\r\n\t\t\t\treturn true;\r\n\t\t\tif(temp.left != null)\r\n\t\t\t\tqueue.add(temp.left);\r\n\t\t\tif(temp.right != null)\r\n\t\t\t\tqueue.add(temp.right);\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\ntrue</code></pre>\r\n<p>Time Complexity: O(n) for traversing each node</p>\r\n<p>Space Complexity: O(n) for storing elements in a&nbsp;queue.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b3ea6acf-6279-4e29-b3cd-bb09edbc2784_binary-tree.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"search-an-element-in-binary-tree-without-recursion","tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"},{"name":"traversal","slug":"traversal"},{"name":"tree","slug":"tree"},{"name":"questions","slug":"questions"},{"name":"binary-tree","slug":"binary-tree"},{"name":"level-order","slug":"level-order"}],"recommendations":[{"id":1694,"title":"What is Domain name system (DNS)?","imageUrl":"icon_5d73c05a-94c0-45e6-b648-a89025ffe4e8.png","dateCreated":"2020-11-20T07:33:27.184Z","dateModified":"2020-11-20T07:33:33.359Z","contributedBy":"sumitc91","content":"A Domain Name System (DNS) translates a domain name such as www.example.com to an IP address.\nDNS is hierarchical, with a few authoritative servers at the top level. Your router or ISP provides information about which DNS server(s) to contact when doing a lookup. Lower level DNS servers ca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5d73c05a-94c0-45e6-b648-a89025ffe4e8.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"what-is-domain-name-system-dns","total":0},{"id":1693,"title":"Availability vs consistency","imageUrl":"icon_a22695c8-b2d8-4ca6-8546-265c07e566d7.png","dateCreated":"2020-11-20T07:30:12.189Z","dateModified":"2020-11-20T07:30:26.472Z","contributedBy":"sumitc91","content":"CAP theorem\nIn a distributed computer system, you can only support two of the following guarantees:\nConsistency - Every read receives the most recent write or an error<br />Availability - Every request receives a response, without guarantee that it contains the most recent version o","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a22695c8-b2d8-4ca6-8546-265c07e566d7.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"availability-vs-consistency","total":0},{"id":40,"title":"Maximize House Robbery Amount that can be made.","imageUrl":"2c7d01cc-e4f1-489a-b1c8-572f0ae4224f_robbery.jpg","dateCreated":"2018-07-20T09:39:03.571Z","dateModified":"2018-07-20T09:39:12.736Z","contributedBy":"AskGif","content":"Given that you are a professional robber who is planning to rob houses along a street. Constraint given is that each house has a certain amount of money stashed, and adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c7d01cc-e4f1-489a-b1c8-572f0ae4224f_robbery.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"java","slug":"java"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"maximize-house-robbery-amount-that-can-be-made","total":0},{"id":37,"title":"Find Longest Sub-string without any Repeating characters.","imageUrl":"28ea9b8b-1280-4d6a-8f2f-48f61377a5e2_maxresdefault.jpg","dateCreated":"2018-07-20T06:23:31.49Z","dateModified":"2018-07-20T06:23:41.247Z","contributedBy":"AskGif","content":"A substring is a contiguous sequence of characters within a string. For instance, \"the best of\" is a substring of \"It was the best of times\". This is not to be confused with subsequence, which is a generalization of a substring. For example, \"Itwastimes\" is a subsequence of \"It was the best of ti","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/28ea9b8b-1280-4d6a-8f2f-48f61377a5e2_maxresdefault.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"}],"slug":"find-longest-sub-string-without-any-repeating-characters","total":0}]}