{"id":1228,"title":"Add Two Numbers in Linked List In Given Order","imageUrl":"51938e7d-6f95-4dc4-8132-76775192b64b_addnum.jpg","dateCreated":"2020-04-18T09:14:35.476Z","dateModified":"2020-04-18T09:17:45.802Z","contributedBy":"AskGif","content":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in order and each of their nodes contains a single digit. Add the two numbers and return them as a linked list.</p>\r\n<p>&nbsp;</p>\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n<p>&nbsp;</p>\r\n<p>Example:</p>\r\n<pre class=\"language-csharp\"><code>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\nOutput: 8 -&gt; 0 -&gt; 7\r\nExplanation: 342 + 465 = 807.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.Medium\r\n{\r\n    \r\n    //Definition for singly-linked list.\r\n    public class ListNode {\r\n        public int val;\r\n        public ListNode next;\r\n        public ListNode(int x) { val = x; }\r\n    }\r\n    \r\n    class AddTwoNumbersSolution\r\n    {\r\n        public void execute()\r\n        {\r\n            var l1 = new ListNode(2);            \r\n            l1.next = new ListNode(4);\r\n            l1.next.next = new ListNode(3);\r\n\r\n            var l2 = new ListNode(5);\r\n            l2.next = new ListNode(6);\r\n            l2.next.next = new ListNode(4);\r\n\r\n            AddTwoNumbers(l1, l2);\r\n        }\r\n        public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\r\n        {\r\n            var res = new ListNode(0);\r\n            int len1 = FindLength(l1);\r\n            int len2 = FindLength(l2);\r\n            int diff1 = 0;\r\n            int diff2 = 0;\r\n            if (len1 &gt; len2)\r\n            {\r\n                diff1 = len1 - len2;\r\n                while(diff1 != 0)\r\n                {\r\n                    var temp = new ListNode(0);\r\n                    temp.next = l2;\r\n                    l2 = temp;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                diff2 = len2 - len1;\r\n                while (diff2 != 0)\r\n                {\r\n                    var temp = new ListNode(0);\r\n                    temp.next = l1;\r\n                    l1 = temp;\r\n                }\r\n            }\r\n\r\n            res = Calculate(l1,l2);\r\n            return res;\r\n        }\r\n\r\n        private ListNode Calculate(ListNode l1, ListNode l2)\r\n        {\r\n            int carry=0;\r\n            var node = CalculateRecursively(l1, l2, ref carry);\r\n            if(carry == 1)\r\n            {\r\n                var temp = new ListNode(carry);\r\n                temp.next = node;\r\n                node = temp;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        private ListNode CalculateRecursively(ListNode l1, ListNode l2, ref int carry)\r\n        {\r\n            if (l1 == null)\r\n            {\r\n                carry = 0;\r\n                return null;\r\n            }\r\n\r\n            var node = CalculateRecursively(l1.next, l2.next, ref carry);\r\n            int sum = l1.val + l2.val +carry;\r\n            carry = sum / 10;\r\n            var currentNode = new ListNode(sum % 10);\r\n            currentNode.next = node;\r\n            return currentNode;\r\n        }\r\n\r\n        private int FindLength(ListNode l1)\r\n        {\r\n            int len = 0;\r\n            //ListNode temp = l1;\r\n            while(l1 != null)\r\n            {\r\n                len++;\r\n                l1 = l1.next;\r\n            }\r\n            return len;\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>Time Complexity: O(n) - as it is going through all nodes.</p>\r\n<p>Space Complexity: O(n) - as the recursive call is creating a stack.</p>\r\n<p>Details:&nbsp;<a title=\"https://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersSolution.cs\" href=\"https://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersSolution.cs\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersSolution.cs</a>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/51938e7d-6f95-4dc4-8132-76775192b64b_addnum.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"add-two-numbers-in-linked-list-in-given-order","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"मध्यम","slug":"medium"},{"name":"leetcode","slug":"leetcode"},{"name":"डेटा-संरचना","slug":"data-structure"}],"recommendations":[{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1633,"title":"3Sum - Array - Medium - LeetCode","imageUrl":"icon_b05855a6-ac78-4434-a041-4682444c76bc.jpg","dateCreated":"2020-10-19T04:39:11.508Z","dateModified":"2020-10-19T04:39:21.598Z","contributedBy":"sumitc91","content":"Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNotice that the solution set must not contain duplicate triplets.\n&nbsp;\nExample 1:\nInput: nums = [-1,0,1,2","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b05855a6-ac78-4434-a041-4682444c76bc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"3sum-array-medium-leetcode","total":0},{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"A binary tree is univalued if every node in the tree has the same value.\nReturn true if and only if the given tree is univalued.\n&nbsp;\nExample 1:\n<br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:\n<br />Input: [2,2,2,5,2]<br />Output: false<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"univalued-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}