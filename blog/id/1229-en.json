{"id":1229,"title":"Add Two Numbers in Linked List (In reverse Order)","imageUrl":"e6fd5b9e-5453-4ffb-b9bd-36c3038c7569_addnum2.jpg","dateCreated":"2020-04-18T09:48:38.96Z","dateModified":"2020-04-18T09:49:27.525Z","contributedBy":"AskGif","content":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contains a single digit. Add the two numbers and return them as a linked list.</p>\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n<p>Example:</p>\r\n<pre class=\"language-csharp\"><code>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\nOutput: 7 -&gt; 0 -&gt; 8\r\nExplanation: 342 + 465 = 807.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.Medium\r\n{    \r\n    class AddTwoNumbersReverseOrderSolution\r\n    {\r\n        public void execute()\r\n        {\r\n            var l1 = new ListNode(2);            \r\n            l1.next = new ListNode(4);\r\n            l1.next.next = new ListNode(3);\r\n\r\n            var l2 = new ListNode(5);\r\n            l2.next = new ListNode(6);\r\n            l2.next.next = new ListNode(4);\r\n\r\n            AddTwoNumbers(l1, l2);\r\n        }\r\n        public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\r\n        {            \r\n            var res = Calculate(l1,l2);\r\n            return res;\r\n        }\r\n\r\n        private ListNode Calculate(ListNode l1, ListNode l2)\r\n        {\r\n            int carry=0;\r\n            int sum = l1.val + l2.val + carry;\r\n            carry = sum / 10;\r\n            var rootNode = new ListNode(sum % 10);            \r\n            rootNode.next = CalculateRecursively(l1.next, l2.next, carry);            \r\n            return rootNode;\r\n        }\r\n\r\n        private ListNode CalculateRecursively(ListNode l1, ListNode l2, int carry)\r\n        {\r\n            if (l1 == null &amp;&amp; l2 == null)\r\n            {       \r\n                if(carry != 0)\r\n                {\r\n                    return new ListNode(carry);\r\n                }\r\n                return null;\r\n            }\r\n\r\n            int sum = 0;\r\n            var currentNode = new ListNode(0);\r\n            if(l1 == null)\r\n            {\r\n                sum = 0 + l2.val + carry;\r\n                carry = sum / 10;\r\n                currentNode = new ListNode(sum % 10);\r\n                currentNode.next = CalculateRecursively(l1, l2.next, carry);\r\n            }\r\n            else if(l2 == null)\r\n            {\r\n                sum = l1.val + 0 + carry;\r\n                carry = sum / 10;\r\n                currentNode = new ListNode(sum % 10);\r\n                currentNode.next = CalculateRecursively(l1.next, l2, carry);\r\n            }\r\n            else\r\n            {\r\n                sum = l1.val + l2.val + carry;\r\n                carry = sum / 10;\r\n                currentNode = new ListNode(sum % 10);\r\n                currentNode.next = CalculateRecursively(l1.next, l2.next, carry);\r\n            }\r\n            \r\n            return currentNode;\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p><a title=\"https://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersReverseOrderSolution.cs\" href=\"https://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersReverseOrderSolution.cs\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersReverseOrderSolution.cshttps://raw.githubusercontent.com/sumitc91/coding/master/Coding/LeetCode/Medium/AddTwoNumbersReverseOrderSolution.cs</a></p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e6fd5b9e-5453-4ffb-b9bd-36c3038c7569_addnum2.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"add-two-numbers-in-linked-list-in-reverse-order","tags":[{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1657,"title":"Word Search - Array - Medium - LeetCode","imageUrl":"icon_20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","dateCreated":"2020-11-01T06:18:06.031Z","dateModified":"2020-11-01T06:18:12.117Z","contributedBy":"sumitc91","content":"Given a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"word-search-array-medium-leetcode","total":0},{"id":1656,"title":"Subsets - Array - Medium - LeetCode","imageUrl":"icon_a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","dateCreated":"2020-10-31T16:06:14.288Z","dateModified":"2020-10-31T16:06:19.933Z","contributedBy":"sumitc91","content":"Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]<br />Output:<br />[<br />&nbsp; [3],<br />&nbsp; [1],<br />&nbsp; [2],<br />&nbsp; [1,2,3],<br />&nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subsets-array-medium-leetcode","total":0},{"id":1617,"title":"Relative Ranks - Array - Easy - LeetCode","imageUrl":"icon_999e367f-6673-49be-9d6a-411dd5e1e1e2.jpg","dateCreated":"2020-10-17T05:30:58.485Z","dateModified":"2020-10-17T05:31:07.765Z","contributedBy":"sumitc91","content":"Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\nExample 1:<br />Input: [5, 4, 3, 2, 1]<br />Output: [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/999e367f-6673-49be-9d6a-411dd5e1e1e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"relative-ranks-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}