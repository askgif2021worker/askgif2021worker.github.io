{"id":1230,"title":"Longest Substring Without Repeating Characters","imageUrl":"575db6be-e88d-4c66-a1a0-9e5b66b9cc5d_substr.jpg","dateCreated":"2020-04-18T12:17:29.301Z","dateModified":"2020-04-18T13:49:27.05Z","contributedBy":"AskGif","content":"<p>Given a string, find the length of the longest substring without repeating characters.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>&nbsp;</p>\r\n<p>Input: \"abcabcbb\"</p>\r\n<p>Output: 3&nbsp;</p>\r\n<p>Explanation: The answer is \"abc\", with the length of 3.&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>&nbsp;</p>\r\n<p>Input: \"bbbbb\"</p>\r\n<p>Output: 1</p>\r\n<p>Explanation: The answer is \"b\", with the length of 1.</p>\r\n<p>Example 3:</p>\r\n<p>&nbsp;</p>\r\n<p>Input: \"pwwkew\"</p>\r\n<p>Output: 3</p>\r\n<p>Explanation: The answer is \"wke\", with the length of 3.&nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.</p>\r\n<p>&nbsp;</p>\r\n<p>solution:</p>\r\n<p>&nbsp;</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.Medium\r\n{\r\n    class LengthOfLongestSubstringSolution\r\n    {\r\n        public void execute()\r\n        {\r\n            int res = LengthOfLongestSubstring(\"abcabcbb\");\r\n        }\r\n        public int LengthOfLongestSubstring(string s)\r\n        {\r\n            if (s==\"\")\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            int max = 0;\r\n            for (int i = 0; i &lt; s.Length; i++)\r\n            {\r\n                int len = 1;\r\n                var dict = new Dictionary&lt;char, int&gt;();\r\n                dict.Add(s[i], 1);\r\n                for (int j = i+1; j &lt; s.Length; j++)\r\n                {\r\n                    if (dict.ContainsKey(s[j]))\r\n                    {\r\n                        break;\r\n                    }\r\n                    else\r\n                    {\r\n                        len++;\r\n                        dict.Add(s[j], 1);\r\n                    }\r\n                }\r\n                if (max &lt; len)\r\n                {\r\n                    max = len;\r\n                }\r\n            }\r\n            \r\n            return max;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n^2)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Using Sliding Window :</p>\r\n<pre class=\"language-csharp\"><code>public int LengthOfLongestSubstringBySlidingWindow(string s)\r\n        {\r\n            int max = 0;            \r\n            int start = 0;\r\n            int end;\r\n            var hashSet = new HashSet&lt;char&gt;();\r\n            for (int i = 0; i &lt; s.Length; i++)\r\n            {\r\n                if (hashSet.Contains(s[i]))\r\n                {                    \r\n                    while (s[start] != s[i])\r\n                    {\r\n                        hashSet.Remove(s[start]);\r\n                        start++;\r\n                    }\r\n                    start++;\r\n                }\r\n                else\r\n                {                    \r\n                    hashSet.Add(s[i]);\r\n                    if (max &lt; hashSet.Count)\r\n                    {\r\n                        max = hashSet.Count;\r\n                    }\r\n                }\r\n            }\r\n            return max;\r\n        }</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time complexity: O(n)</p>\r\n<p>Space complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/575db6be-e88d-4c66-a1a0-9e5b66b9cc5d_substr.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"longest-substring-without-repeating-characters","tags":[{"name":"data-structure","slug":"data-structure"},{"name":"algorithm","slug":"algorithm"},{"name":"sliding-window","slug":"sliding-window"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1720,"title":"Number Of Rectangles That Can Form The Largest Square - Array - Easy - LeetCode","imageUrl":"icon_a3758d97-0c9c-4e59-860a-b2f31b1f95ab.jpg","dateCreated":"2021-01-18T12:11:37.997Z","dateModified":"2021-01-18T12:11:43.515Z","contributedBy":"sumitc91","content":"You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.\nYou can cut the ith rectangle to form a square with a side length of k if both k &lt;= li and k &lt;= wi. For example, if you have a rectangle [4,6], you can cut it to g","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a3758d97-0c9c-4e59-860a-b2f31b1f95ab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"number-of-rectangles-that-can-form-the-largest-square-array-easy-leetcode","total":0},{"id":1717,"title":"Task Scheduler - Array - Medium - LeetCode","imageUrl":"icon_ce3e557e-274e-4956-a16f-a62c66777be4.jpg","dateCreated":"2021-01-09T09:25:26.524Z","dateModified":"2021-01-09T09:25:33.09Z","contributedBy":"sumitc91","content":"Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\nHowever, there is","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ce3e557e-274e-4956-a16f-a62c66777be4.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"task-scheduler-array-medium-leetcode","total":0},{"id":1627,"title":"Number of Days Between Two Dates - Maths - Easy - LeetCode","imageUrl":"icon_c8c70ab5-92c2-4bfd-ad83-d0a6afbe3ded.jpg","dateCreated":"2020-10-18T06:18:04.266Z","dateModified":"2020-10-18T06:18:17.665Z","contributedBy":"sumitc91","content":"Write a program to count the number of days between two dates.\nThe two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.\n&nbsp;\nExample 1:\nInput: date1 = \"2019-06-29\", date2 = \"2019-06-30\"<br />Output: 1<br />Example 2:\nInput: date","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c8c70ab5-92c2-4bfd-ad83-d0a6afbe3ded.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"}],"slug":"number-of-days-between-two-dates-maths-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}