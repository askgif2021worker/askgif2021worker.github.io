{"id":1271,"title":"Maximum Score After Splitting a String","imageUrl":"31e59be3-aaaf-46de-8221-c1ac14014061-q3.jpg","dateCreated":"2020-05-02T17:20:39.145Z","dateModified":"2020-05-03T03:46:00.728Z","contributedBy":"AskGif","content":"<p>Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).</p>\r\n<p>The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-csharp\"><code>Input: s = \"011101\"\r\n\r\nOutput: 5 \r\n\r\nExplanation: \r\n\r\nAll possible ways of splitting s into two non-empty substrings are:\r\n\r\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \r\n\r\nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \r\n\r\nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \r\n\r\nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \r\n\r\nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3\r\n\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: s = \"00111\"\r\n\r\nOutput: 5\r\n\r\nExplanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<pre class=\"language-markup\"><code>Input: s = \"1111\"\r\n\r\nOutput: 3</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>2 &lt;= s.length &lt;= 500\r\n\r\nThe string s consists of characters '0' and '1' only.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<p>Count all the ones in s, and scan s. At each char, we use it in the left substring, when we see a zero, increment zero counter because it counts in the left substring. When we see a one, decrement the total ones, because the right substring now has less one.</p>\r\n<p>Note that we exclude the last character in s, because the right substring can't be empty, so it at least uses the last char.</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy\r\n{\r\n    class SplitString\r\n    {\r\n        public void execute()\r\n        {\r\n            string s = \"011101\";\r\n\r\n            MaxScore(s);\r\n        }\r\n\r\n        public int MaxScore(string s)\r\n        {\r\n            int zero = 0;\r\n            int ones = 0;\r\n            int max = 0;\r\n            for (int i = 0; i &lt; s.Length; i++)\r\n            {\r\n                if (s[i] == '1')\r\n                    ones++;\r\n            }\r\n\r\n            for (int i = 0; i &lt; s.Length - 1; i++)\r\n            {\r\n                if (s[i] == '0')\r\n                    zero++;\r\n                else\r\n                    ones--;\r\n                max = Math.Max(max, zero + ones);\r\n            }\r\n\r\n            return max;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/31e59be3-aaaf-46de-8221-c1ac14014061-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"maximum-score-after-splitting-a-string","tags":[{"name":"leetcode","slug":"leetcode"},{"name":"आसान","slug":"easy"},{"name":"string","slug":"string"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1703,"title":"Array Nesting - Array - Medium - LeetCode","imageUrl":"icon_5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","dateCreated":"2020-11-21T07:20:04.928Z","dateModified":"2020-11-21T07:20:11.837Z","contributedBy":"sumitc91","content":"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"array-nesting-array-medium-leetcode","total":0},{"id":1663,"title":"Defuse the Bomb - Array - Easy - LeetCode","imageUrl":"icon_e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","dateCreated":"2020-11-15T15:48:36.584Z","dateModified":"2020-11-15T15:48:43.094Z","contributedBy":"sumitc91","content":"You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\nIf k &gt; 0, replace the ith number with th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"defuse-the-bomb-array-easy-leetcode","total":0},{"id":1636,"title":"Two Strings - HashMap - Easy - HackerRank","imageUrl":"icon_b574251c-e9c0-4be6-9bc1-7c86f8da1806.jpg","dateCreated":"2020-10-24T07:22:16.972Z","dateModified":"2020-10-24T07:22:22.952Z","contributedBy":"sumitc91","content":"Given two strings, determine if they share a common substring. A substring may be as small as one character.\nFor example, the words \"a\", \"and\", \"art\" share the common substring . The words \"be\" and \"cat\" do not share a substring.\nFunction Description\nComplete the function two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b574251c-e9c0-4be6-9bc1-7c86f8da1806.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"hackerrank","slug":"hackerrank"},{"name":"hash-table","slug":"hash-table"}],"slug":"two-strings-hashmap-easy-hackerrank","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}