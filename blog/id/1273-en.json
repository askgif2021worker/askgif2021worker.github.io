{"id":1273,"title":"String Matching in an Array","imageUrl":"d8c0288e-e6d1-42a5-98a5-7107b0c4bfeb-q3.jpg","dateCreated":"2020-05-03T06:11:49.451Z","dateModified":"2020-05-03T07:59:42.1Z","contributedBy":"AskGif","content":"<p>Given an array of string words. Return all strings in words which is a substring of another word in any order.&nbsp;</p>\r\n<p>String words[i] is a substring of words[j], it can be obtained removing some characters to the left and/or right side of words[j].</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"]\r\n\r\nOutput: [\"as\",\"hero\"]\r\n\r\nExplanation: \"as\" is a substring of \"mass\" and \"hero\" is a substring of \"superhero\".\r\n\r\n[\"hero\",\"as\"] is also a valid answer.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: words = [\"leetcode\",\"et\",\"code\"]\r\n\r\nOutput: [\"et\",\"code\"]\r\n\r\nExplanation: \"et\", \"code\" are substring of \"leetcode\".</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<pre class=\"language-markup\"><code>Input: words = [\"blue\",\"green\",\"bu\"]\r\n\r\nOutput: []</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>1 &lt;= words.length &lt;= 100\r\n\r\n1 &lt;= words[i].length &lt;= 30\r\n\r\nwords[i] contains only lowercase English letters.\r\n\r\nIt's guaranteed that words[i] will be unique.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    class StringMatchingArray\r\n    {\r\n        public void execute()\r\n        {\r\n            string[] words = new string[] { \"mass\", \"as\", \"hero\", \"superhero\" };\r\n\r\n            var res = StringMatching(words);\r\n        }\r\n\r\n        public IList&lt;string&gt; StringMatching(string[] words)\r\n        {\r\n            //to Store unique solution.\r\n            var ListStr = new HashSet&lt;string&gt;();\r\n            for (int i = 0; i &lt; words.Length-1; i++)\r\n            {\r\n                for(int j = i+1; j &lt; words.Length; j++)\r\n                {\r\n                    string subStr;\r\n                    if (words[i].Length&gt;words[j].Length)\r\n                        subStr = ReturnSubstring(words[i], words[j]);\r\n                    else\r\n                        subStr = ReturnSubstring(words[j], words[i]);\r\n                    if (subStr != null)\r\n                        ListStr.Add(subStr);\r\n                }\r\n            }\r\n\r\n            var result = new List&lt;string&gt;();\r\n            foreach (var item in ListStr)\r\n            {\r\n                result.Add(item);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        private string ReturnSubstring(string word1, string word2)\r\n        {\r\n            for (int i = 0; i &lt; word1.Length-word2.Length+1; i++)\r\n            {\r\n                for (int j = 0; j &lt; word2.Length; j++)\r\n                {\r\n                    if (word1[i + j] != word2[j])\r\n                        break;\r\n                    if (j == word2.Length - 1)\r\n                    {\r\n                        return word2;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n^2) for comparing character by character</p>\r\n<p>Space Complexity: O(n) for storing in Linked list and returning in result</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d8c0288e-e6d1-42a5-98a5-7107b0c4bfeb-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"string-matching-in-an-array","tags":[{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"},{"name":"algorithm","slug":"algorithm"},{"name":"easy","slug":"easy"}],"recommendations":[{"id":1725,"title":"Sum of Unique Elements - Array - Easy - LeetCode","imageUrl":"icon_9e341651-0933-4893-84a8-1d3f65898dda.jpg","dateCreated":"2021-02-13T13:13:53.857Z","dateModified":"2021-02-13T13:13:59.576Z","contributedBy":"sumitc91","content":"You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.\n&nbsp;\nExample 1:\nInput: nums = [1,2,3,2]<br />Output: 4<br />Explanation: The unique element","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e341651-0933-4893-84a8-1d3f65898dda.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"sum-of-unique-elements-array-easy-leetcode","total":0},{"id":1705,"title":"Valid Triangle Number - Array - Medium - LeetCode","imageUrl":"icon_1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","dateCreated":"2020-11-21T14:33:10.794Z","dateModified":"2020-11-21T14:33:17.755Z","contributedBy":"sumitc91","content":"Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.<br />Example 1:<br />Input: [2,2,3,4]<br />Output: 3<br />Explanation:<br />Valid combinations are:&nbsp;<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"valid-triangle-number-array-medium-leetcode","total":0},{"id":1595,"title":"Cousins in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","dateCreated":"2020-10-09T09:24:10.362Z","dateModified":"2020-10-09T09:24:23.315Z","contributedBy":"sumitc91","content":"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\nWe are given the root of a binary tree with unique values, and the values x and y of two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"cousins-in-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}