{"id":1274,"title":"Find the Destination City","imageUrl":"116cf588-027d-42c1-9fae-ab2faaca887f-q3.jpg","dateCreated":"2020-05-03T07:34:52.294Z","dateModified":"2020-05-03T07:35:38.375Z","contributedBy":"AskGif","content":"<p>You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.</p>\r\n<p>It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\r\n\r\nOutput: \"Sao Paulo\" \r\n\r\nExplanation: Starting at the \"London\" city you will reach the \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -&gt; \"New York\" -&gt; \"Lima\" -&gt; \"Sao Paulo\".</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\r\n\r\nOutput: \"A\"\r\n\r\nExplanation: All possible trips are: \r\n\r\n\"D\" -&gt; \"B\" -&gt; \"C\" -&gt; \"A\". \r\n\r\n\"B\" -&gt; \"C\" -&gt; \"A\". \r\n\r\n\"C\" -&gt; \"A\". \r\n\r\n\"A\". \r\n\r\nClearly the destination city is \"A\".</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<pre class=\"language-markup\"><code>Input: paths = [[\"A\",\"Z\"]]\r\n\r\nOutput: \"Z\"</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>1 &lt;= paths.length &lt;= 100\r\n\r\npaths[i].length == 2\r\n\r\n1 &lt;= cityAi.length, cityBi.length &lt;= 10\r\n\r\ncityAi != cityBi\r\n\r\nAll strings consist of lowercase and uppercase English letters and the space character.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    class DestCitySoln\r\n    {\r\n        public void execute()\r\n        {\r\n            IList&lt;IList&lt;string&gt;&gt; paths = new List&lt;IList&lt;string&gt;&gt;();\r\n            var path = new List&lt;string&gt;();\r\n            path.Add(\"B\");\r\n            path.Add(\"C\");\r\n            paths.Add(path);\r\n\r\n            path = new List&lt;string&gt;();\r\n            path.Add(\"D\");\r\n            path.Add(\"B\");\r\n            paths.Add(path);\r\n\r\n            path = new List&lt;string&gt;();\r\n            path.Add(\"C\");\r\n            path.Add(\"A\");\r\n            paths.Add(path);\r\n\r\n            var res = DestCity(paths);\r\n        }\r\n\r\n        public string DestCity(IList&lt;IList&lt;string&gt;&gt; paths)\r\n        {\r\n            var dict = new Dictionary&lt;string, string&gt;();\r\n            for (int i = 0; i &lt; paths.Count; i++)\r\n            {\r\n                dict.Add(paths[i][0], paths[i][1]);\r\n            }\r\n\r\n            string finalDest=null;\r\n            string destination = paths[0][1];\r\n            while(destination != null)\r\n            {\r\n                if (dict.ContainsKey(destination))\r\n                {\r\n                    destination = dict[destination];\r\n                }\r\n                else\r\n                {\r\n                    finalDest = destination;\r\n                    destination = null;\r\n                }\r\n            }\r\n\r\n            return finalDest;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n) - for one iteration.</p>\r\n<p>Space Complexity: O(n) - for storing in hashmap</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/116cf588-027d-42c1-9fae-ab2faaca887f-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"find-the-destination-city","tags":[{"name":"आसान","slug":"easy"},{"name":"string","slug":"string"},{"name":"algorithm","slug":"algorithm"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1722,"title":"Latest Time by Replacing Hidden Digits - String - Easy - LeetCode","imageUrl":"icon_370ef122-a2da-4596-8095-2a518775a5cb.jpg","dateCreated":"2021-01-26T09:27:11.691Z","dateModified":"2021-01-26T09:27:17.976Z","contributedBy":"sumitc91","content":"You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\n&nbsp;","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/370ef122-a2da-4596-8095-2a518775a5cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"latest-time-by-replacing-hidden-digits-string-easy-leetcode","total":0},{"id":1619,"title":"Classes More Than 5 Students - Sql - Easy - LeetCode","imageUrl":"icon_e71c8d7a-4f1f-4f65-8676-b2f2b13032cb.jpg","dateCreated":"2020-10-17T06:01:27.477Z","dateModified":"2020-10-17T06:01:38.886Z","contributedBy":"sumitc91","content":"There is a table courses with columns: student and class\nPlease list out all classes which have more than or equal to 5 students.\nFor example, the table:\n+---------+------------+<br />| student | class &nbsp; &nbsp; &nbsp;|<br />+---------+------------+<br />| A &nbsp; &nbsp;","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e71c8d7a-4f1f-4f65-8676-b2f2b13032cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"sql","slug":"sql"}],"slug":"classes-more-than-5-students-sql-easy-leetcode","total":0},{"id":1599,"title":"Flower Planting With No Adjacent - Graph - Easy - LeetCode","imageUrl":"icon_db7a0ad4-994c-4a3a-a3c6-63035a00d2da.jpg","dateCreated":"2020-10-15T05:15:37.382Z","dateModified":"2020-10-15T05:15:47.948Z","contributedBy":"sumitc91","content":"You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes the existence of a bidirectional path from garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nThere is no garden that has more than three paths coming into or l","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/db7a0ad4-994c-4a3a-a3c6-63035a00d2da.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"}],"slug":"flower-planting-with-no-adjacent-graph-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}