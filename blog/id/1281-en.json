{"id":1281,"title":"Compare Strings by Frequency of the Smallest Character","imageUrl":"02e01194-1fde-4b2b-9b09-ee52b824518f-q3.jpg","dateCreated":"2020-05-04T13:30:51.372Z","dateModified":"2020-05-04T13:31:26.974Z","contributedBy":"AskGif","content":"<p>Let's define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = \"dcce\" then f(s) = 2 because the smallest character is \"c\" and its frequency is 2.</p>\r\n<p>Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) &lt; f(W), where W is a word in words.</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: queries = [\"cbd\"], words = [\"zaaaz\"]\r\n\r\nOutput: [1]\r\n\r\nExplanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") &lt; f(\"zaaaz\").</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\r\n\r\nOutput: [1,2]\r\n\r\nExplanation: On the first query only f(\"bbb\") &lt; f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both &gt; f(\"cc\").</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>1 &lt;= queries.length &lt;= 2000\r\n\r\n1 &lt;= words.length &lt;= 2000\r\n\r\n1 &lt;= queries[i].length, words[i].length &lt;= 10\r\n\r\nqueries[i][j], words[i][j] are English lowercase letters.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    class NumSmallerByFrequencySol\r\n    {\r\n        public void execute()\r\n        {\r\n            var queries = new string[] { \"bbb\", \"cc\" };\r\n            var words = new string[]{\"a\", \"aa\", \"aaa\", \"aaaa\"};\r\n            var res = NumSmallerByFrequency(queries, words);\r\n        }\r\n\r\n        public int[] NumSmallerByFrequency(string[] queries, string[] words)\r\n        {\r\n            int[] queries_count = new int[queries.Length];\r\n            int[] words_count = new int[words.Length];\r\n            int[] ans = new int[queries.Length];\r\n\r\n            for (int i = 0; i &lt; queries.Length; i++)\r\n            {\r\n                queries_count[i] = -1;\r\n                ans[i] = 0;\r\n            }\r\n\r\n            for (int i = 0; i &lt; words.Length; i++)\r\n            {\r\n                words_count[i] = -1;\r\n            }\r\n\r\n            for(int i = 0; i &lt; queries.Length; i++)\r\n            {\r\n                if (queries_count[i] == -1)\r\n                {\r\n                    queries_count[i] = CalculateCount(queries[i]);\r\n                }\r\n\r\n                for (int j = 0; j &lt; words.Length; j++)\r\n                {\r\n                    \r\n                    if(words_count[j] == -1)\r\n                    {\r\n                        words_count[j] = CalculateCount(words[j]);\r\n                    }\r\n\r\n                    if (queries_count[i] &lt; words_count[j])\r\n                    { \r\n                        ans[i]++; \r\n                    }\r\n                }\r\n            }\r\n\r\n            return ans;\r\n        }\r\n\r\n        private int CalculateCount(string v)\r\n        {\r\n            if (v == \"\") return 0;\r\n\r\n            char minChar = v[0];\r\n            int count = 1;\r\n            for(int i= 1; i &lt; v.Length; i++)\r\n            {\r\n                if (v[i] &lt; minChar)\r\n                {\r\n                    minChar = v[i];\r\n                    count = 1;\r\n                }\r\n                else if(v[i] == minChar)\r\n                {\r\n                    count++;\r\n                }\r\n            }\r\n            return count;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>Time Complexity: Approx. O(n^2) Considering the size of given words are finite.</p>\r\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/02e01194-1fde-4b2b-9b09-ee52b824518f-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"compare-strings-by-frequency-of-the-smallest-character","tags":[{"name":"string","slug":"string"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"},{"name":"easy","slug":"easy"}],"recommendations":[{"id":1716,"title":"Maximum Units on a Truck - Array - Easy - LeetCode","imageUrl":"icon_3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","dateCreated":"2021-01-08T09:45:52.965Z","dateModified":"2021-01-08T09:46:00.078Z","contributedBy":"sumitc91","content":"You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nnumberOfBoxesi is the number of boxes of type i.<br />numberOfUnitsPerBoxi is the number of units in each box of the type i.<br />You ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"maximum-units-on-a-truck-array-easy-leetcode","total":0},{"id":1706,"title":"Check If Two String Arrays are Equivalent - String - Easy - LeetCode","imageUrl":"icon_38460c51-4f08-46d0-82ef-1f2263c60127.jpg","dateCreated":"2020-11-24T13:04:46.01Z","dateModified":"2020-11-24T13:04:50.906Z","contributedBy":"sumitc91","content":"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n&nbsp;\nExample 1:\nInput: word1 = [\"ab\", \"c\"], word2 ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38460c51-4f08-46d0-82ef-1f2263c60127.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"check-if-two-string-arrays-are-equivalent-string-easy-leetcode","total":0},{"id":1635,"title":"New Year Chaos - Array - Medium - HackerRank","imageUrl":"icon_53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","dateCreated":"2020-10-24T07:14:47.121Z","dateModified":"2020-10-24T07:15:13.568Z","contributedBy":"sumitc91","content":"It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. Initial positions increment by &nbsp;from &nbsp;at the front of the line to &nbsp;at the back.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"hackerrank","slug":"hackerrank"},{"name":"medium","slug":"medium"}],"slug":"new-year-chaos-array-medium-hackerrank","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}