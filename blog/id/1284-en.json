{"id":1284,"title":"Reorder Data in Log Files","imageUrl":"a9af7a2a-2c29-4d22-9cfd-233d2cd4c0e4-q3.jpg","dateCreated":"2020-05-05T13:05:56.47Z","dateModified":"2020-05-05T13:06:14.748Z","contributedBy":"AskGif","content":"<p>You have an array of logs.&nbsp; Each log is a space-delimited string of words.</p>\r\n<p>For each log, the first word in each log is an alphanumeric identifier.&nbsp; Then, either:</p>\r\n<p>Each word after the identifier will consist only of lowercase letters, or;</p>\r\n<p>Each word after the identifier will consist only of digits.</p>\r\n<p>We will call these two varieties of logs letter-logs and digit-logs.&nbsp; It is guaranteed that each log has at least one word after its identifier.</p>\r\n<p>Reorder the logs so that all of the letter-logs come before any digit-log.&nbsp; The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.&nbsp; The digit-logs should be put in their original order.</p>\r\n<p>Return the final order of the logs.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\r\n\r\nOutput: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>0 &lt;= logs.length &lt;= 100\r\n\r\n3 &lt;= logs[i].length &lt;= 100\r\n\r\nlogs[i] is guaranteed to have an identifier, and a word after the identifier.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    class ReorderLogFilesSln\r\n    {\r\n        public void execute()\r\n        {\r\n            var logs = new string[]{\r\n                \"o 0331394079964851 4\", \r\n                \"hkkk 600490 9 00 2 0\", \r\n                \"7m3va 77480381100875\", \r\n                \"f9z3j tydfpvhks m a\", \r\n                \"k6 3592 10166 82395\", \r\n                \"z7o1 tpipcx b uykyn\", \r\n                \"k boowjmrfqlggprhk i\", \r\n                \"qoi lzygdsafhglymi n\", \r\n                \"h 3338586230095825 1\", \r\n                \"77gv7 8886961 21 32\", \r\n                \"er 739336634 62 048\", \r\n                \"vga vhz wckifxuep kv\", \r\n                \"03d 81356369 030 6 1\", \r\n                \"fms51 51433485791776\", \r\n                \"ldf4 lnm e iuiuoi k\", \r\n                \"2 570761582013 84 26\", \r\n                \"o5ccb 783786786782 6\", \r\n                \"33fj7 86283961878 10\", \r\n                \"t lsoqwcwgzlk obxhkd\", \r\n                \"x6w55 96799905961 3\"};\r\n            var res = ReorderLogFiles(logs);\r\n        }\r\n\r\n        public string[] ReorderLogFiles(string[] logs)\r\n        {\r\n            var letter_logs_map = new List&lt;KeyValuePair&lt;string,string&gt;&gt;();\r\n            var digit_logs_map = new List&lt;KeyValuePair&lt;string, string&gt;&gt;();\r\n            for(int i = 0; i &lt; logs.Length; i++)\r\n            {\r\n                var identifier = logs[i].Split(\" \")[0];\r\n                var splitStr = logs[i].Split(\" \");\r\n                var value = string.Join(\" \", splitStr.Skip(1)) + \"--\" + identifier;\r\n                if (CheckIfDigitLogs(logs[i]))\r\n                {\r\n                    digit_logs_map.Add(new KeyValuePair&lt;string, string&gt;(identifier, value));                    \r\n                }\r\n                else\r\n                {\r\n                    letter_logs_map.Add(new KeyValuePair&lt;string, string&gt;(identifier, value));\r\n                }\r\n            }\r\n\r\n            letter_logs_map.Sort(\r\n                delegate (KeyValuePair&lt;string, string&gt; firstPair,\r\n                KeyValuePair&lt;string, string&gt; nextPair)\r\n                {\r\n                    return firstPair.Value.CompareTo(nextPair.Value);\r\n                }\r\n            );\r\n\r\n            var result = new string[logs.Length];\r\n            int j = 0;\r\n            foreach (var item in letter_logs_map)\r\n            {\r\n                result[j] = item.Key + \" \" + item.Value.Split(\"--\")[0];\r\n                j++;\r\n            }\r\n\r\n            foreach (var item in digit_logs_map)\r\n            {\r\n                result[j] = item.Key + \" \" + item.Value.Split(\"--\")[0];\r\n                j++;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        private bool CheckIfDigitLogs(string v)\r\n        {\r\n            var split = v.Split(\" \");\r\n            return split[1][0] &gt;= 48 &amp;&amp; split[1][0] &lt;= 57;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(long)</p>\r\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a9af7a2a-2c29-4d22-9cfd-233d2cd4c0e4-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"reorder-data-in-log-files","tags":[{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"data-structure","slug":"data-structure"}],"recommendations":[{"id":1668,"title":"Triangle - Array - Medium - LeetCode","imageUrl":"icon_40571e99-73c8-48d0-aa94-4a53cb2adbce.jpg","dateCreated":"2020-11-17T12:18:25.997Z","dateModified":"2020-11-17T12:18:30.576Z","contributedBy":"sumitc91","content":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n[<br />&nbsp; &nbsp; &nbsp;[2],<br />&nbsp; &nbsp; [3,4],<br />&nbsp; &nbsp;[6,5,7],<br />&nbsp; [4,1,8,3]<br />]<br","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/40571e99-73c8-48d0-aa94-4a53cb2adbce.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"triangle-array-medium-leetcode","total":0},{"id":1667,"title":"Construct Binary Tree from Inorder and Postorder Traversal - Array - Medium - LeetCode","imageUrl":"icon_eeacf71f-bde9-47d7-bf9d-4f6212eb787e.jpg","dateCreated":"2020-11-17T10:15:10.097Z","dateModified":"2020-11-17T10:15:16.628Z","contributedBy":"sumitc91","content":"Given inorder and postorder traversal of a tree, construct the binary tree.\nNote:<br />You may assume that duplicates do not exist in the tree.\nFor example, given\ninorder = [9,3,15,20,7]<br />postorder = [9,15,7,20,3]<br />Return the following binary tree:\n&nbsp; &nbsp","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/eeacf71f-bde9-47d7-bf9d-4f6212eb787e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"construct-binary-tree-from-inorder-and-postorder-traversal-array-medium-leetcode","total":0},{"id":1612,"title":"Delete Duplicate Emails - SQL - Easy - LeetCode","imageUrl":"icon_a8c368b1-ddbd-45ca-96b4-7558b7166a74.jpg","dateCreated":"2020-10-16T11:31:27.16Z","dateModified":"2020-10-16T11:31:37.404Z","contributedBy":"sumitc91","content":"Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.\n+----+------------------+<br />| Id | Email &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />+----+------------------+<br />| 1 &nbsp;| john@example.com |<br","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a8c368b1-ddbd-45ca-96b4-7558b7166a74.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"delete-duplicate-emails-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}