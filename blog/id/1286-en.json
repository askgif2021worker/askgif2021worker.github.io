{"id":1286,"title":"Long Pressed Name","imageUrl":"feba7598-46b4-4577-92fe-beeaeb67ce93-q3.jpg","dateCreated":"2020-05-06T10:53:22.429Z","dateModified":"2020-05-06T10:53:35.319Z","contributedBy":"AskGif","content":"<p>Your friend is typing his name into a keyboard.&nbsp; Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.</p>\r\n<p>You examine the typed characters of the keyboard.&nbsp; Return True if it is possible that it was your friend's name, with some characters (possibly none) being long pressed.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: name = \"alex\", typed = \"aaleex\"\r\n\r\nOutput: true\r\n\r\nExplanation: 'a' and 'e' in 'alex' were long pressed.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: name = \"saeed\", typed = \"ssaaedd\"\r\n\r\nOutput: false\r\n\r\nExplanation: 'e' must have been pressed twice, but it wasn't in the typed output.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<pre class=\"language-markup\"><code>Input: name = \"leelee\", typed = \"lleeelee\"\r\n\r\nOutput: true</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<pre class=\"language-markup\"><code>Input: name = \"laiden\", typed = \"laiden\"\r\n\r\nOutput: true\r\n\r\nExplanation: It's not necessary to long press any character.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>1 &lt;= name.length &lt;= 1000\r\n\r\n1 &lt;= typed.length &lt;= 1000\r\n\r\nThe characters of name and typed are lowercase letters.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    class IsLongPressedNameSoln\r\n    {\r\n        public void execute()\r\n        {\r\n            var name = \"alex\";\r\n            var typed = \"aaleelx\";\r\n\r\n            var res = IsLongPressedName(name, typed);\r\n        }\r\n\r\n        public bool IsLongPressedName(string name, string typed)\r\n        {\r\n            if (name[0] != typed[0]) return false;\r\n            for (int i = 0, j=0; i &lt; name.Length;)\r\n            {\r\n                if (name[i] == typed[j])\r\n                {\r\n                    j++;\r\n                    i++;                    \r\n                }\r\n                else\r\n                {\r\n                    if (typed[j] == typed[j - 1])\r\n                        j++;\r\n                    else\r\n                        return false;\r\n                }\r\n                if (j == typed.Length &amp;&amp; i == name.Length) \r\n                    return true;\r\n                if (j &gt;= typed.Length)\r\n                    return false;\r\n                if (i == name.Length)\r\n                    i--;\r\n\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/feba7598-46b4-4577-92fe-beeaeb67ce93-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"long-pressed-name","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"string","slug":"string"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1657,"title":"Word Search - Array - Medium - LeetCode","imageUrl":"icon_20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","dateCreated":"2020-11-01T06:18:06.031Z","dateModified":"2020-11-01T06:18:12.117Z","contributedBy":"sumitc91","content":"Given a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"word-search-array-medium-leetcode","total":0},{"id":1651,"title":"Unique Paths II - Array - Medium - LeetCode","imageUrl":"icon_ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","dateCreated":"2020-10-31T08:51:34.949Z","dateModified":"2020-10-31T08:51:41.7Z","contributedBy":"sumitc91","content":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"unique-paths-ii-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}