{"id":1288,"title":"Buddy Strings","imageUrl":"610c07e1-c521-4716-9df7-3aad321456cc-ques.jpg","dateCreated":"2020-05-07T10:16:57.497Z","dateModified":"2020-05-07T10:17:52.2Z","contributedBy":"AskGif","content":"<p>Given two strings A and B of lowercase letters, return true if and only if we can swap two letters in A so that the result equals B.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: A = \"ab\", B = \"ba\"\r\n\r\nOutput: true</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: A = \"ab\", B = \"ab\"\r\n\r\nOutput: false</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<pre class=\"language-markup\"><code>Input: A = \"aa\", B = \"aa\"\r\n\r\nOutput: true</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<pre class=\"language-markup\"><code>Input: A = \"aaaaaaabc\", B = \"aaaaaaacb\"\r\n\r\nOutput: true</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 5:</p>\r\n<pre class=\"language-markup\"><code>Input: A = \"\", B = \"aa\"\r\n\r\nOutput: false\r\n\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Note:</p>\r\n<pre class=\"language-markup\"><code>0 &lt;= A.length &lt;= 20000\r\n\r\n0 &lt;= B.length &lt;= 20000\r\n\r\nA and B consist only of lowercase letters.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace NetCoreCoding.LeetCode.String.Easy\r\n{\r\n    public class BuddyStringsSoln\r\n    {\r\n        public BuddyStringsSoln()\r\n        {\r\n        }\r\n\r\n        public void execute()\r\n        {\r\n            var A = \"abab\";\r\n            var B = \"abab\";\r\n            var res = BuddyStrings(A,B);\r\n        }\r\n\r\n        public bool BuddyStrings(string A, string B)\r\n        {\r\n            if (A.Length != B.Length)\r\n                return false;\r\n\r\n            int diff = 0;\r\n            char[] diffChar = new char[2];\r\n            var set = new HashSet&lt;char&gt;();\r\n            for (int i = 0; i &lt; A.Length; i++)\r\n            {\r\n                if (A[i] != B[i])\r\n                {\r\n                    diff++;\r\n                    if(diff==1)\r\n                    {\r\n                        diffChar[0] = A[i];\r\n                        diffChar[1] = B[i];\r\n                    }\r\n                    else\r\n                    {\r\n                        if (diffChar[0] != B[i] || diffChar[1] != A[i])\r\n                            return false;\r\n                    }\r\n                }\r\n                \r\n                set.Add(A[i]);\r\n            }\r\n\r\n            if (A == B)\r\n                return set.Count &lt; A.Length;\r\n\r\n            //case where all characters are same in \r\n            if (diff == 0 &amp;&amp; set.Count == 1)\r\n                return true;\r\n\r\n            return diff == 2;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/610c07e1-c521-4716-9df7-3aad321456cc-ques.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"buddy-strings","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"}],"recommendations":[{"id":1703,"title":"Array Nesting - Array - Medium - LeetCode","imageUrl":"icon_5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","dateCreated":"2020-11-21T07:20:04.928Z","dateModified":"2020-11-21T07:20:11.837Z","contributedBy":"sumitc91","content":"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"array-nesting-array-medium-leetcode","total":0},{"id":1656,"title":"Subsets - Array - Medium - LeetCode","imageUrl":"icon_a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","dateCreated":"2020-10-31T16:06:14.288Z","dateModified":"2020-10-31T16:06:19.933Z","contributedBy":"sumitc91","content":"Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]<br />Output:<br />[<br />&nbsp; [3],<br />&nbsp; [1],<br />&nbsp; [2],<br />&nbsp; [1,2,3],<br />&nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subsets-array-medium-leetcode","total":0},{"id":1592,"title":"Increasing Order Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","dateCreated":"2020-10-09T07:45:00.338Z","dateModified":"2020-10-09T07:45:33.127Z","contributedBy":"sumitc91","content":"Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.\nExample 1:<br />Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]\n&nbsp; &nbsp; &nbsp; &nbsp;5<br />&nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"increasing-order-search-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}