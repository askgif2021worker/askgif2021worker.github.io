{"id":1290,"title":"Most Common Word","imageUrl":"dc014b00-761b-4145-9657-6b8d5f3c8bf0-ques2.jpg","dateCreated":"2020-05-07T13:18:34.728Z","dateModified":"2020-05-07T13:18:55.371Z","contributedBy":"AskGif","content":"<p>Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words.&nbsp; It is guaranteed there is at least one word that isn't banned, and that the answer is unique.</p>\r\n<p>Words in the list of banned words are given in lowercase, and free of punctuation.&nbsp; Words in the paragraph are not case sensitive.&nbsp; The answer is in lowercase.</p>\r\n<p>&nbsp;</p>\r\n<p>Example:</p>\r\n<p>Input:&nbsp;</p>\r\n<pre class=\"language-markup\"><code>paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\"\r\n\r\nbanned = [\"hit\"]\r\n\r\nOutput: \"ball\"\r\n\r\nExplanation: \r\n\r\n\"hit\" occurs 3 times, but it is a banned word.\r\n\r\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \r\n\r\nNote that words in the paragraph are not case sensitive,\r\n\r\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \r\n\r\nand that \"hit\" isn't the answer even though it occurs more because it is banned.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Note:</p>\r\n<pre class=\"language-markup\"><code>1 &lt;= paragraph.length &lt;= 1000.\r\n\r\n0 &lt;= banned.length &lt;= 100.\r\n\r\n1 &lt;= banned[i].length &lt;= 10.\r\n\r\nThe answer is unique, and written in lowercase (even if its occurrences in paragraph may have uppercase symbols, and even if it is a proper noun.)\r\n\r\nparagraph only consists of letters, spaces, or the punctuation symbols !?',;.\r\n\r\nThere are no hyphens or hyphenated words.\r\n\r\nWords only consist of letters, never apostrophes or other punctuation symbols.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\n\r\nnamespace NetCoreCoding.LeetCode.String.Easy\r\n{\r\n    public class MostCommonWordSoln\r\n    {\r\n        public MostCommonWordSoln()\r\n        {\r\n        }\r\n\r\n        public void execute()\r\n        {\r\n            var paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\";\r\n            var banned = new string[] { \"hit\" };\r\n            var output = \"ball\";\r\n            var res = \"\";\r\n            //res = MostCommonWord(paragraph, banned);\r\n            //Assert(res, output);\r\n\r\n            paragraph = \"a, a, a, a, b,b,b,c, c\";\r\n            banned = new string[] { \"a\" };\r\n            output = \"b\";\r\n            res = MostCommonWord(paragraph, banned);\r\n            Assert(res, output);\r\n        }\r\n\r\n        private void Assert(string response, string expected)\r\n        {\r\n            if (response != expected)\r\n                throw new Exception(\"Incorrect Answer.\");\r\n        }\r\n\r\n        public string MostCommonWord(string paragraph, string[] banned)\r\n        {\r\n            var dict = new SortedDictionary&lt;string, int&gt;();\r\n            var punctuation = new string[] { \"!\", \"?\", \"\\'\", \",\", \";\", \".\" };\r\n\r\n            foreach (var item in punctuation)\r\n            {\r\n                paragraph = paragraph.Replace(item,\" \");\r\n            }\r\n            \r\n            var words = paragraph.Split(\" \");\r\n            for(int i=0;i&lt;words.Length;i++)\r\n            {\r\n                words[i] = words[i].ToLower().Trim();\r\n                if (words[i] == \"\") continue;\r\n                if (dict.ContainsKey(words[i]))\r\n                {\r\n                    dict[words[i]]++;\r\n                }\r\n                else\r\n                {\r\n                    dict[words[i]] = 1;\r\n                }\r\n            }\r\n\r\n            var myList = dict.ToList();\r\n\r\n            myList.Sort((pair1, pair2) =&gt; pair1.Value.CompareTo(pair2.Value));\r\n            myList.Reverse();\r\n\r\n            foreach (var item in myList)\r\n            {\r\n                if (!CheckIfWordIsBanned(item.Key, banned))\r\n                {\r\n                    return item.Key;\r\n                }\r\n            }\r\n\r\n            return \"\"; \r\n        }\r\n\r\n        private bool CheckIfWordIsBanned(string word, string[] banned)\r\n        {\r\n            foreach (var item in banned)\r\n            {\r\n                if (word == item) return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n^2)</p>\r\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/dc014b00-761b-4145-9657-6b8d5f3c8bf0-ques2.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"most-common-word","tags":[{"name":"आसान","slug":"easy"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1723,"title":"Beautiful Arrangement II - Maths - Medium - LeetCode","imageUrl":"icon_b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","dateCreated":"2021-01-26T13:09:40.384Z","dateModified":"2021-01-26T13:09:46.827Z","contributedBy":"sumitc91","content":"Given two integers n and k, you need to construct a list that contains n different positive integers ranging from 1 to n and obeys the following requirement:<br />Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"},{"name":"मध्यम","slug":"medium"}],"slug":"beautiful-arrangement-ii-maths-medium-leetcode","total":0},{"id":1709,"title":"Goal Parser Interpretation - String - Easy - LeetCode","imageUrl":"icon_1a301e38-c33f-42ee-b91b-84f1471554f8.jpg","dateCreated":"2020-12-07T04:02:11.892Z","dateModified":"2020-12-07T04:02:17.242Z","contributedBy":"sumitc91","content":"You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1a301e38-c33f-42ee-b91b-84f1471554f8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"goal-parser-interpretation-string-easy-leetcode","total":0},{"id":1654,"title":"Search a 2D Matrix - Array - Medium - LeetCode","imageUrl":"icon_4ecd9aac-a00a-4a8f-ad7b-e7e4a75307ac.jpg","dateCreated":"2020-10-31T10:10:06.758Z","dateModified":"2020-10-31T10:10:15.329Z","contributedBy":"sumitc91","content":"Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right.<br />The first integer of each row is greater than the last integer of the previous row.<br />&nbsp;\nExample 1:</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4ecd9aac-a00a-4a8f-ad7b-e7e4a75307ac.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"search-a-2d-matrix-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}