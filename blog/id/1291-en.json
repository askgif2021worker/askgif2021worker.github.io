{"id":1291,"title":"Unique Morse Code Words","imageUrl":"6e467a21-de88-4cc8-bdfc-c009a090bec8-ques3.jpg","dateCreated":"2020-05-08T04:58:06.619Z","dateModified":"2020-05-08T04:58:46.728Z","contributedBy":"AskGif","content":"<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.</p>\r\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\r\n<pre class=\"language-markup\"><code>[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.</p>\r\n<p>&nbsp;</p>\r\n<p>Return the number of different transformations among all words we have.</p>\r\n<p>&nbsp;</p>\r\n<p>Example:</p>\r\n<pre class=\"language-markup\"><code>Input: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\r\n\r\nOutput: 2\r\n\r\nExplanation: \r\n\r\nThe transformation of each word is:\r\n\r\n\"gin\" -&gt; \"--...-.\"\r\n\r\n\"zen\" -&gt; \"--...-.\"\r\n\r\n\"gig\" -&gt; \"--...--.\"\r\n\r\n\"msg\" -&gt; \"--...--.\"</code></pre>\r\n<p>&nbsp;</p>\r\n<p>There are 2 different transformations, \"--...-.\" and \"--...--.\".</p>\r\n<p>Note:</p>\r\n<pre class=\"language-markup\"><code>The length of words will be at most 100.\r\n\r\nEach words[i] will have length in range [1, 12].\r\n\r\nwords[i] will only consist of lowercase letters.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace NetCoreCoding.LeetCode.String.Easy\r\n{\r\n    public class UniqueMorseRepresentationsSoln\r\n    {\r\n        public UniqueMorseRepresentationsSoln()\r\n        {\r\n        }\r\n\r\n        public void execute()\r\n        {\r\n            var words = new string[] { \"gin\", \"zen\", \"gig\", \"msg\" };\r\n            var res = UniqueMorseRepresentations(words);\r\n            Assert(res, 2);\r\n        }\r\n\r\n        private void Assert(int response, int expected)\r\n        {\r\n            if (response != expected)\r\n                throw new Exception(\"Incorrect Answer.\");\r\n        }\r\n\r\n        public int UniqueMorseRepresentations(string[] words)\r\n        {\r\n            var morse = new string[] { \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\" };\r\n            var set = new HashSet&lt;string&gt;();\r\n            foreach (var word in words)\r\n            {\r\n                var str = new StringBuilder();\r\n                for (int i = 0; i &lt; word.Length; i++)\r\n                {\r\n                    str.Append(morse[word[i]-'a']);\r\n                }\r\n                set.Add(str.ToString().Trim());\r\n            }\r\n\r\n            return set.Count;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n^2)</p>\r\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6e467a21-de88-4cc8-bdfc-c009a090bec8-ques3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"unique-morse-code-words","tags":[{"name":"easy","slug":"easy"},{"name":"data-structure","slug":"data-structure"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1645,"title":"Jump Game - Array - Medium - LeetCode","imageUrl":"icon_a22e7bed-85b5-4837-89ef-0da32c81085c.jpg","dateCreated":"2020-10-28T06:44:43.217Z","dateModified":"2020-10-28T06:44:52.67Z","contributedBy":"sumitc91","content":"Given an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\n&nbsp;\nExample 1:\nInput: num","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a22e7bed-85b5-4837-89ef-0da32c81085c.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"jump-game-array-medium-leetcode","total":0},{"id":1623,"title":"Number of Lines To Write String - String - Easy - LeetCode","imageUrl":"icon_1c27d36c-1576-4ab8-bf0a-6787e2a1a3a0.jpg","dateCreated":"2020-10-17T11:18:12.621Z","dateModified":"2020-10-17T11:18:22.116Z","contributedBy":"sumitc91","content":"We are to write the letters of a given string S, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array widths, an array where widths[0] is the width","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1c27d36c-1576-4ab8-bf0a-6787e2a1a3a0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"number-of-lines-to-write-string-string-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}