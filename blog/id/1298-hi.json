{"id":1298,"title":"Construct String from Binary Tree","imageUrl":"2f9f448c-8e37-4321-a8f4-7d3d12990da2-q3.jpg","dateCreated":"2020-05-11T10:52:03.732Z","dateModified":"2020-05-11T10:52:17.475Z","contributedBy":"AskGif","content":"<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\r\n<p>The null node needs to be represented by an empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: Binary tree: [1,2,3,4]\r\n\r\n       1\r\n\r\n     /   \\\r\n\r\n    2     3\r\n\r\n   /    \r\n\r\n  4     \r\n\r\n\r\n\r\nOutput: \"1(2(4))(3)\"\r\n\r\nExplanation: Originally it needs to be \"1(2(4)())(3()())\", \r\n\r\nbut you need to omit all the unnecessary empty parenthesis pairs. \r\n\r\nAnd it will be \"1(2(4))(3)\".</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: Binary tree: [1,2,3,null,4]\r\n\r\n       1\r\n\r\n     /   \\\r\n\r\n    2     3\r\n\r\n     \\  \r\n\r\n      4 \r\n\r\n\r\n\r\nOutput: \"1(2()(4))(3)\"\r\n\r\n</code></pre>\r\n<p>Explanation: Almost the same as the first example,&nbsp;</p>\r\n<pre class=\"language-markup\"><code>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{  \r\n     public class TreeNode {\r\n         public int val;\r\n         public TreeNode left;\r\n         public TreeNode right;\r\n         public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\r\n             this.val = val;\r\n             this.left = left;\r\n             this.right = right;\r\n         }\r\n     }\r\n \r\n    public class Tree2strSoln\r\n    {\r\n        public string Tree2str(TreeNode t)\r\n        {\r\n            if (t == null) return \"\";\r\n            var str = new StringBuilder();\r\n            str.Append(t.val);\r\n            if (t.left != null)\r\n            {\r\n                str.Append(\"(\");\r\n                str.Append(Tree2str(t.left));\r\n                str.Append(\")\");\r\n            }\r\n            if(t.right != null)\r\n            {\r\n                if(t.left == null)\r\n                {\r\n                    str.Append(\"()\");                    \r\n                }\r\n\r\n                str.Append(\"(\");\r\n                str.Append(Tree2str(t.right));\r\n                str.Append(\")\");\r\n            }\r\n            return str.ToString();\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f9f448c-8e37-4321-a8f4-7d3d12990da2-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"construct-string-from-binary-tree","tags":[{"name":"binary-tree","slug":"binary-tree"},{"name":"algorithm","slug":"algorithm"},{"name":"आसान","slug":"easy"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"recommendations":[{"id":1716,"title":"Maximum Units on a Truck - Array - Easy - LeetCode","imageUrl":"icon_3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","dateCreated":"2021-01-08T09:45:52.965Z","dateModified":"2021-01-08T09:46:00.078Z","contributedBy":"sumitc91","content":"You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nnumberOfBoxesi is the number of boxes of type i.<br />numberOfUnitsPerBoxi is the number of units in each box of the type i.<br />You ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"maximum-units-on-a-truck-array-easy-leetcode","total":0},{"id":1645,"title":"Jump Game - Array - Medium - LeetCode","imageUrl":"icon_a22e7bed-85b5-4837-89ef-0da32c81085c.jpg","dateCreated":"2020-10-28T06:44:43.217Z","dateModified":"2020-10-28T06:44:52.67Z","contributedBy":"sumitc91","content":"Given an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\n&nbsp;\nExample 1:\nInput: num","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a22e7bed-85b5-4837-89ef-0da32c81085c.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"jump-game-array-medium-leetcode","total":0},{"id":1621,"title":"Swap Salary - Sql - Easy - LeetCode","imageUrl":"icon_d5dae622-be43-4a7d-a90e-4173c15f3195.jpg","dateCreated":"2020-10-17T06:35:01.639Z","dateModified":"2020-10-17T06:36:00.564Z","contributedBy":"sumitc91","content":"Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.\nNote that you must write a single update statement, DO NOT write any sele","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d5dae622-be43-4a7d-a90e-4173c15f3195.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"sql","slug":"sql"}],"slug":"swap-salary-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}