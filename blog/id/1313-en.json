{"id":1313,"title":"Check If a Word Occurs As a Prefix of Any Word in a Sentence","imageUrl":"b6871884-472c-4458-95e5-a6e0e355f387-q3.jpg","dateCreated":"2020-05-30T10:57:12.425Z","dateModified":"2020-05-30T10:57:25.079Z","contributedBy":"AskGif","content":"<p>Given a sentence that consists of some words separated by a single space, and a searchWord.</p>\r\n<p>You have to check if searchWord is a prefix of any word in sentence.</p>\r\n<p>Return the index of the word in sentence where searchWord is a prefix of this word (1-indexed).</p>\r\n<p>If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.</p>\r\n<p>A prefix of a string S is any leading contiguous substring of S.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<pre class=\"language-markup\"><code>Input: sentence = \"i love eating burger\", searchWord = \"burg\"\r\n\r\nOutput: 4\r\n\r\nExplanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<pre class=\"language-markup\"><code>Input: sentence = \"this problem is an easy problem\", searchWord = \"pro\"\r\n\r\nOutput: 2\r\n\r\nExplanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<pre class=\"language-markup\"><code>Input: sentence = \"i am tired\", searchWord = \"you\"\r\n\r\nOutput: -1\r\n\r\nExplanation: \"you\" is not a prefix of any word in the sentence.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<pre class=\"language-markup\"><code>Input: sentence = \"i use triple pillow\", searchWord = \"pill\"\r\n\r\nOutput: 4</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Example 5:</p>\r\n<pre class=\"language-markup\"><code>Input: sentence = \"hello from the other side\", searchWord = \"they\"\r\n\r\nOutput: -1</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<pre class=\"language-markup\"><code>1 &lt;= sentence.length &lt;= 100\r\n\r\n1 &lt;= searchWord.length &lt;= 10\r\n\r\nsentence consists of lowercase English letters and spaces.\r\n\r\nsearchWord consists of lowercase English letters.</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    public class IsPrefixOfWordSoln\r\n    {\r\n        public int IsPrefixOfWord(string sentence, string searchWord)\r\n        {\r\n            var word = 1;\r\n            bool isBeginingOfWord = true;\r\n            for(int i = 0; i &lt; sentence.Length; i++)\r\n            {\r\n                if (isBeginingOfWord)\r\n                {\r\n                    isBeginingOfWord = false;\r\n                    if (IsWordAPrefix(sentence, searchWord, i))\r\n                    {\r\n                        return word;\r\n                    }\r\n                    word++;\r\n                }\r\n                if(sentence[i] == ' ')\r\n                {\r\n                    isBeginingOfWord = true;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        private bool IsWordAPrefix(string sentence, string searchWord, int i)\r\n        {\r\n            for(int j = 0; j &lt; searchWord.Length; j++)\r\n            {\r\n                if(sentence[i+j] != searchWord[j])\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.String;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.String\r\n{\r\n    [TestClass]\r\n    public class IsPrefixOfWordSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void IsPrefixOfWordSoln_First()\r\n        {\r\n            var sentence = \"i love eating burger\";\r\n            var searchWord = \"burg\";\r\n            var output = 4;\r\n            var res = new IsPrefixOfWordSoln().IsPrefixOfWord(sentence, searchWord);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsPrefixOfWordSoln_Second()\r\n        {\r\n            var sentence = \"this problem is an easy problem\";\r\n            var searchWord = \"pro\";\r\n            var output = 2;\r\n            var res = new IsPrefixOfWordSoln().IsPrefixOfWord(sentence, searchWord);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsPrefixOfWordSoln_Fourth()\r\n        {\r\n            var sentence = \"i use triple pillow\";\r\n            var searchWord = \"pill\";\r\n            var output = 4;\r\n            var res = new IsPrefixOfWordSoln().IsPrefixOfWord(sentence, searchWord);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsPrefixOfWordSoln_Third()\r\n        {\r\n            var sentence = \"i am tired\";\r\n            var searchWord = \"you\";\r\n            var output = -1;\r\n            var res = new IsPrefixOfWordSoln().IsPrefixOfWord(sentence, searchWord);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsPrefixOfWordSoln_Fifth()\r\n        {\r\n            var sentence = \"hello from the other side\";\r\n            var searchWord = \"they\";\r\n            var output = -1;\r\n            var res = new IsPrefixOfWordSoln().IsPrefixOfWord(sentence, searchWord);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b6871884-472c-4458-95e5-a6e0e355f387-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence","tags":[{"name":"data-structure","slug":"data-structure"},{"name":"string","slug":"string"},{"name":"algorithm","slug":"algorithm"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1681,"title":"Circular Array Loop - Array - Medium - LeetCode","imageUrl":"icon_32298a91-8bd5-4e63-872d-105103726a20.jpg","dateCreated":"2020-11-19T09:05:08.281Z","dateModified":"2020-11-19T09:05:14.582Z","contributedBy":"sumitc91","content":"You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32298a91-8bd5-4e63-872d-105103726a20.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"circular-array-loop-array-medium-leetcode","total":0},{"id":1670,"title":"Find Minimum in Rotated Sorted Array - Array - Medium - LeetCode","imageUrl":"icon_d1be15f3-8f69-4050-83a2-f9c67ac5827b.jpg","dateCreated":"2020-11-18T02:56:56.195Z","dateModified":"2020-11-18T02:57:02.762Z","contributedBy":"sumitc91","content":"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n[4,5,6,7,0,1,2] if it was rotated 4 times.<br />[0,1,2,4,5,6,7] if it was rotated 7 times.<br />Notice that rotating an array [a[0], a[1], a[","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d1be15f3-8f69-4050-83a2-f9c67ac5827b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"athletics","slug":"athletics"},{"name":"data-structure","slug":"data-structure"},{"name":"medium","slug":"medium"}],"slug":"find-minimum-in-rotated-sorted-array-array-medium-leetcode","total":0},{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"A binary tree is univalued if every node in the tree has the same value.\nReturn true if and only if the given tree is univalued.\n&nbsp;\nExample 1:\n<br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:\n<br />Input: [2,2,2,5,2]<br />Output: false<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"univalued-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}