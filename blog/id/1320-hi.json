{"id":1320,"title":"Add Binary - String - Easy - LeetCode","imageUrl":"ca3d6500-ebef-4c58-973b-407407443511-q3.jpg","dateCreated":"2020-06-04T07:48:26.171Z","dateModified":"2020-06-04T07:48:39.329Z","contributedBy":"AskGif","content":"<p>Given two binary strings, return their sum (also a binary string).</p>\r\n<p>The input strings are both non-empty and contain only characters 1 or 0.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: a = \"11\", b = \"1\"</p>\r\n<p>Output: \"100\"</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: a = \"1010\", b = \"1011\"</p>\r\n<p>Output: \"10101\"</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>Each string consists only of '0' or '1' characters.</p>\r\n<p>1 &lt;= a.length, b.length &lt;= 10^4</p>\r\n<p>Each string is either \"0\" or doesn't contain any leading zero.</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    public class AddBinarySoln\r\n    {\r\n        public string AddBinary(string a, string b)\r\n        {\r\n            int len1 = a.Length;\r\n            int len2 = b.Length;\r\n            char carry = '0';\r\n            var diffStr = new StringBuilder();\r\n            int diff;\r\n            if (len1 &gt; len2)\r\n            {\r\n                diff = len1 - len2;\r\n                while (diff-- &gt; 0)\r\n                {\r\n                    diffStr.Append(\"0\");\r\n                }\r\n                b = diffStr.ToString() + b;\r\n            }\r\n            else\r\n            {\r\n                diff = len2 - len1;\r\n                while (diff-- &gt; 0)\r\n                {\r\n                    diffStr.Append(\"0\");\r\n                }\r\n                a = diffStr.ToString() + a;\r\n            }\r\n\r\n            var res = new StringBuilder();\r\n            for (int i = a.Length-1; i &gt;= 0 ; i--)\r\n            {\r\n                string sum = Addition(a[i], b[i], carry);                \r\n                if(sum.Length == 2)\r\n                {\r\n                    res.Append(sum[1]);\r\n                    carry = sum[0];\r\n                }\r\n                else\r\n                {\r\n                    res.Append(sum[0]);\r\n                    carry = '0';\r\n                }\r\n            }\r\n\r\n            if(carry == '1')\r\n            {\r\n                res.Append(carry);\r\n            }\r\n\r\n            return new string (res.ToString().Reverse().ToArray());\r\n        }\r\n\r\n        private string Addition(char v1, char v2, char carry)\r\n        {\r\n            if(carry == '0')\r\n            {\r\n                if (v1 == '1' &amp;&amp; v2 == '1')\r\n                {\r\n                    return \"10\";\r\n                }\r\n                else if (v1 == '0' &amp;&amp; v2 == '0')\r\n                {\r\n                    return \"0\";\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (v1 == '1' &amp;&amp; v2 == '1')\r\n                {\r\n                    return \"11\";\r\n                }\r\n                else if (v1 == '0' &amp;&amp; v2 == '0')\r\n                {\r\n                    return \"1\";\r\n                }\r\n                else\r\n                {\r\n                    return \"10\";\r\n                }\r\n            }            \r\n            return \"1\";            \r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.String;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.String\r\n{\r\n    [TestClass]\r\n    public class AddBinarySolnTests\r\n    {\r\n        [TestMethod]\r\n        public void AddBinarySoln_First()\r\n        {\r\n            var a = \"11\";\r\n            var b = \"1\";\r\n            var output = \"100\";\r\n            var res = new AddBinarySoln().AddBinary(a, b);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void AddBinarySoln_Second()\r\n        {\r\n            var a = \"1010\";\r\n            var b = \"1011\";\r\n            var output = \"10101\";\r\n            var res = new AddBinarySoln().AddBinary(a, b);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ca3d6500-ebef-4c58-973b-407407443511-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"add-binary-string-easy-leetcode","tags":[{"name":"आसान","slug":"easy"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1715,"title":"Determine if String Halves Are Alike - String - Easy - LeetCode","imageUrl":"icon_8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","dateCreated":"2021-01-08T09:24:14.63Z","dateModified":"2021-01-08T09:24:20.084Z","contributedBy":"sumitc91","content":"You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains upperca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"determine-if-string-halves-are-alike-string-easy-leetcode","total":0},{"id":1653,"title":"Set Matrix Zeroes - Array - Medium - LeetCode","imageUrl":"icon_42006195-6b88-4b4d-a2d3-c695139d16b7.jpg","dateCreated":"2020-10-31T09:17:26.973Z","dateModified":"2020-10-31T09:17:33.085Z","contributedBy":"sumitc91","content":"Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.\nFollow up:\nA straight forward solution using O(mn) space is probably a bad idea.<br />A simple improvement uses O(m + n) space, but still not the best solution.<br />Could you devise a con","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/42006195-6b88-4b4d-a2d3-c695139d16b7.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"set-matrix-zeroes-array-medium-leetcode","total":0},{"id":1647,"title":"Slowest Key - Array - Easy - LeetCode","imageUrl":"icon_836f29a5-8a43-4160-b64a-fbf8416788bd.jpg","dateCreated":"2020-10-31T03:14:43.566Z","dateModified":"2020-10-31T03:14:48.648Z","contributedBy":"sumitc91","content":"A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.\nYou are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith k","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/836f29a5-8a43-4160-b64a-fbf8416788bd.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"slowest-key-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}