{"id":1323,"title":"Count and Say - String - Easy - LeetCode","imageUrl":"d6045af8-06de-409d-816f-5c3c7692668f-q3.jpg","dateCreated":"2020-06-04T11:13:21.151Z","dateModified":"2020-06-04T11:13:34.298Z","contributedBy":"AskGif","content":"<p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>\r\n<p>1.&nbsp; &nbsp; &nbsp;1</p>\r\n<p>2.&nbsp; &nbsp; &nbsp;11</p>\r\n<p>3.&nbsp; &nbsp; &nbsp;21</p>\r\n<p>4.&nbsp; &nbsp; &nbsp;1211</p>\r\n<p>5.&nbsp; &nbsp; &nbsp;111221</p>\r\n<p>1 is read off as \"one 1\" or 11.</p>\r\n<p>11 is read off as \"two 1s\" or 21.</p>\r\n<p>21 is read off as \"one 2, then one 1\" or 1211.</p>\r\n<p>&nbsp;</p>\r\n<p>Given an integer n where 1 &le; n &le; 30, generate the nth term of the count-and-say sequence. You can do so recursively, in other words from the previous member read off the digits, counting the number of digits in groups of the same digit.</p>\r\n<p>Note: Each term of the sequence of integers will be represented as a string.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: 1</p>\r\n<p>Output: \"1\"</p>\r\n<p>Explanation: This is the base case.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: 4</p>\r\n<p>Output: \"1211\"</p>\r\n<p>Explanation: For n = 3 the term was \"21\" in which we have two groups \"2\" and \"1\", \"2\" can be read as \"12\" which means frequency = 1 and value = 2, the same way \"1\" is read as \"11\", so the answer is the concatenation of \"12\" and \"11\" which is \"1211\".</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    public class CountAndSaySoln\r\n    {\r\n        public string CountAndSay(int n)\r\n        {\r\n            var strPrev = \"1\";\r\n                     \r\n            for (int i = 1; i &lt; n; i++)\r\n            {\r\n                var current = new StringBuilder();\r\n                if (strPrev.Length == 1)\r\n                {\r\n                    current.Append(\"1\");\r\n                    current.Append(strPrev);\r\n                    strPrev = current.ToString();\r\n                    continue;\r\n                }\r\n\r\n                int count = 1;\r\n                for (int j = 1; j &lt;= strPrev.Length; j++)\r\n                {\r\n                    if (j &lt; strPrev.Length &amp;&amp; strPrev[j - 1] == strPrev[j])\r\n                    {\r\n                        count++;\r\n                    }\r\n                    else\r\n                    {\r\n                        current.Append(count.ToString());\r\n                        current.Append(strPrev[j - 1]);\r\n                        count = 1;\r\n                    }\r\n                }\r\n                strPrev = current.ToString();\r\n            }\r\n\r\n            return strPrev;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>Time Complexity: O(n*m) where n is the number while m is the length of the generated string.</p>\r\n<p>Space Complexity: O(n) For StringBuilder</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.String;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.String\r\n{\r\n    [TestClass]\r\n    public class CountAndSaySolnTests\r\n    {\r\n        [TestMethod]\r\n        public void CountAndSaySoln_First()\r\n        {\r\n            var n = 1;\r\n            var output = \"1\";\r\n            var res = new CountAndSaySoln().CountAndSay(n);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CountAndSaySoln_Second()\r\n        {\r\n            var n = 4;\r\n            var output = \"1211\";\r\n            var res = new CountAndSaySoln().CountAndSay(n);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CountAndSaySoln_Third()\r\n        {\r\n            var n = 5;\r\n            var output = \"111221\";\r\n            var res = new CountAndSaySoln().CountAndSay(n);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CountAndSaySoln_fourth()\r\n        {\r\n            var n = 6;\r\n            var output = \"312211\";\r\n            var res = new CountAndSaySoln().CountAndSay(n);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d6045af8-06de-409d-816f-5c3c7692668f-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"count-and-say-string-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1648,"title":"Insert Interval - Array - Medium - LeetCode","imageUrl":"icon_5a35d970-95af-493c-9aca-0b4bed037719.jpg","dateCreated":"2020-10-31T06:40:08.43Z","dateModified":"2020-10-31T06:40:18.214Z","contributedBy":"sumitc91","content":"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\nYou may assume that the intervals were initially sorted according to their start times.\n&nbsp;\nExample 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]<br /","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5a35d970-95af-493c-9aca-0b4bed037719.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"insert-interval-array-medium-leetcode","total":0},{"id":1646,"title":"Merge Intervals - Array - Medium - LeetCode","imageUrl":"icon_a1913eb6-6b8f-4cbb-9c4e-096c9e76c6cd.jpg","dateCreated":"2020-10-30T13:34:51.72Z","dateModified":"2020-10-30T13:34:58.66Z","contributedBy":"sumitc91","content":"Given a collection of intervals, merge all overlapping intervals.\nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]<br />Output: [[1,6],[8,10],[15,18]]<br />Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].<br />Example 2:\nInput: intervals","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a1913eb6-6b8f-4cbb-9c4e-096c9e76c6cd.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"merge-intervals-array-medium-leetcode","total":0},{"id":1604,"title":"Second Highest Salary - Sql - Easy - LeetCode","imageUrl":"icon_cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","dateCreated":"2020-10-16T06:01:26.855Z","dateModified":"2020-10-16T06:01:35.503Z","contributedBy":"sumitc91","content":"Write a SQL query to get the second highest salary from the Employee table.\n+----+--------+<br />| Id | Salary |<br />+----+--------+<br />| 1 &nbsp;| 100 &nbsp; &nbsp;|<br />| 2 &nbsp;| 200 &nbsp; &nbsp;|<br />| 3 &nbsp;| 300 &nbsp; &nbsp;|<br />+----+--------+<br />For example, given the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"second-highest-salary-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}