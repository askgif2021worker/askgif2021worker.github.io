{"id":1324,"title":"Implement strStr() - String - Easy - LeetCode","imageUrl":"e6c62b93-8a0d-49f3-9adf-69e301534a4a-q3.jpg","dateCreated":"2020-06-04T13:14:30.82Z","dateModified":"2020-06-04T13:14:49.062Z","contributedBy":"AskGif","content":"<p>Implement strStr().</p>\r\n<p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: haystack = \"hello\", needle = \"ll\"</p>\r\n<p>Output: 2</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: haystack = \"aaaaa\", needle = \"bba\"</p>\r\n<p>Output: -1</p>\r\n<p>&nbsp;</p>\r\n<p>Clarification:</p>\r\n<p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p>\r\n<p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    public class StrStrSoln\r\n    {\r\n        public int StrStr(string haystack, string needle)\r\n        {\r\n            if(haystack == needle)\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(haystack))\r\n            {\r\n                return -1;\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(needle))\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            if(needle.Length &gt; haystack.Length)\r\n            {\r\n                return -1;\r\n            }\r\n\r\n            for(int i = 0; i &lt; haystack.Length - needle.Length + 1; i++)\r\n            {\r\n                bool found = true;\r\n                if (haystack[i] == needle[0])\r\n                {\r\n                    for (int j = 1; j &lt; needle.Length; j++)\r\n                    {\r\n                        if(haystack[i+j] != needle[j])\r\n                        {\r\n                            found = false;\r\n                        }\r\n                    }\r\n\r\n                    if (found)\r\n                    {\r\n                        return i;\r\n                    }\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n*m) where n is the length of haystack and m is the length of the needle.</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.String;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.String\r\n{\r\n    [TestClass]\r\n    public class StrStrSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void StrStrSoln_First()\r\n        {\r\n            var haystack = \"hello\";\r\n            var needle = \"ll\";\r\n            var output = 2;\r\n            var res = new StrStrSoln().StrStr(haystack, needle);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void StrStrSoln_Second()\r\n        {\r\n            var haystack = \"aaaaa\";\r\n            var needle = \"bba\";\r\n            var output = -1;\r\n            var res = new StrStrSoln().StrStr(haystack, needle);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void StrStrSoln_Third()\r\n        {    \r\n            var haystack = \"mississippi\";\r\n            var needle = \"pi\";\r\n            var output = 9;\r\n            var res = new StrStrSoln().StrStr(haystack, needle);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e6c62b93-8a0d-49f3-9adf-69e301534a4a-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"implement-strstr-string-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1706,"title":"Check If Two String Arrays are Equivalent - String - Easy - LeetCode","imageUrl":"icon_38460c51-4f08-46d0-82ef-1f2263c60127.jpg","dateCreated":"2020-11-24T13:04:46.01Z","dateModified":"2020-11-24T13:04:50.906Z","contributedBy":"sumitc91","content":"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n&nbsp;\nExample 1:\nInput: word1 = [\"ab\", \"c\"], word2 ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38460c51-4f08-46d0-82ef-1f2263c60127.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"check-if-two-string-arrays-are-equivalent-string-easy-leetcode","total":0},{"id":1657,"title":"Word Search - Array - Medium - LeetCode","imageUrl":"icon_20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","dateCreated":"2020-11-01T06:18:06.031Z","dateModified":"2020-11-01T06:18:12.117Z","contributedBy":"sumitc91","content":"Given a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"word-search-array-medium-leetcode","total":0},{"id":1595,"title":"Cousins in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","dateCreated":"2020-10-09T09:24:10.362Z","dateModified":"2020-10-09T09:24:23.315Z","contributedBy":"sumitc91","content":"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\nWe are given the root of a binary tree with unique values, and the values x and y of two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"cousins-in-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}