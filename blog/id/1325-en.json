{"id":1325,"title":"Valid Parentheses - String - Easy - LeetCode","imageUrl":"0e7e76a3-03d1-47fb-b6ec-5bcc5a2a25a4-q3.jpg","dateCreated":"2020-06-04T13:38:09.626Z","dateModified":"2020-06-04T13:38:53.249Z","contributedBy":"AskGif","content":"<p>Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p>\r\n<p>An input string is valid if:</p>\r\n<p>Open brackets must be closed by the same type of brackets.</p>\r\n<p>Open brackets must be closed in the correct order.</p>\r\n<p>Note that an empty string is also considered valid.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: \"()\"</p>\r\n<p>Output: true</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: \"()[]{}\"</p>\r\n<p>Output: true</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: \"(]\"</p>\r\n<p>Output: false</p>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<p>Input: \"([)]\"</p>\r\n<p>Output: false</p>\r\n<p>&nbsp;</p>\r\n<p>Example 5:</p>\r\n<p>Input: \"{[]}\"</p>\r\n<p>Output: true</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    public class IsValidSoln\r\n    {\r\n        public bool IsValid(string s)\r\n        {\r\n            var stack = new Stack&lt;char&gt;();\r\n            var map = new Dictionary&lt;char, char&gt;();\r\n            map.Add('(', ')');\r\n            map.Add('{', '}');\r\n            map.Add('[', ']');\r\n\r\n            for (int i = 0; i &lt; s.Length; i++)\r\n            {\r\n                if (map.ContainsKey(s[i]))\r\n                {\r\n                    stack.Push(s[i]);\r\n                }\r\n                else\r\n                {\r\n                    if(stack.Count == 0)\r\n                    {\r\n                        return false;\r\n                    }\r\n\r\n                    var ch = stack.Pop();\r\n                    if(map[ch] != s[i])\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(stack.Count &gt; 0)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.String;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.String\r\n{\r\n    [TestClass]\r\n    public class IsValidSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void IsValidSoln_First()\r\n        {\r\n            var input = \"()\";\r\n            var output = true;\r\n            var res = new IsValidSoln().IsValid(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsValidSoln_Second()\r\n        {\r\n            var input = \"()[]{}\";\r\n            var output = true;\r\n            var res = new IsValidSoln().IsValid(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsValidSoln_Third()\r\n        {\r\n            var input = \"(]\";\r\n            var output = false;\r\n            var res = new IsValidSoln().IsValid(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsValidSoln_Fourth()\r\n        {\r\n            var input = \"([)]\";\r\n            var output = false;\r\n            var res = new IsValidSoln().IsValid(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IsValidSoln_Fifth()\r\n        {\r\n            var input = \"{[]}\";\r\n            var output = true;\r\n            var res = new IsValidSoln().IsValid(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0e7e76a3-03d1-47fb-b6ec-5bcc5a2a25a4-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"valid-parentheses-string-easy-leetcode","tags":[{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"}],"recommendations":[{"id":1720,"title":"Number Of Rectangles That Can Form The Largest Square - Array - Easy - LeetCode","imageUrl":"icon_a3758d97-0c9c-4e59-860a-b2f31b1f95ab.jpg","dateCreated":"2021-01-18T12:11:37.997Z","dateModified":"2021-01-18T12:11:43.515Z","contributedBy":"sumitc91","content":"You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.\nYou can cut the ith rectangle to form a square with a side length of k if both k &lt;= li and k &lt;= wi. For example, if you have a rectangle [4,6], you can cut it to g","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a3758d97-0c9c-4e59-860a-b2f31b1f95ab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"number-of-rectangles-that-can-form-the-largest-square-array-easy-leetcode","total":0},{"id":1679,"title":"Insert Delete GetRandom O(1) - Array - Medium - LeetCode","imageUrl":"icon_8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","dateCreated":"2020-11-19T06:35:11.658Z","dateModified":"2020-11-19T06:35:19.394Z","contributedBy":"sumitc91","content":"Implement the RandomizedSet class:\nbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.<br />bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"insert-delete-getrandom-o1-array-medium-leetcode","total":0},{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}