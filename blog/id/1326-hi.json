{"id":1326,"title":"Longest Common Prefix - String - Easy - LeetCode","imageUrl":"6f4c5669-a9f1-4bbb-8f5e-ecb1dddcb00b-q3.jpg","dateCreated":"2020-06-05T07:23:55.909Z","dateModified":"2020-06-05T07:24:42.622Z","contributedBy":"AskGif","content":"<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\r\n<p>If there is no common prefix, return an empty string \"\".</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: [\"flower\",\"flow\",\"flight\"]</p>\r\n<p>Output: \"fl\"</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: [\"dog\",\"racecar\",\"car\"]</p>\r\n<p>Output: \"\"</p>\r\n<p>Explanation: There is no common prefix among the input strings.</p>\r\n<p>&nbsp;</p>\r\n<p>Note:</p>\r\n<p>All given inputs are in lowercase letters a-z.</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.String\r\n{\r\n    public class LongestCommonPrefixSoln\r\n    {\r\n        public string LongestCommonPrefix(string[] strs)\r\n        {\r\n            if(strs.Length == 0)\r\n            {\r\n                return \"\";\r\n            }\r\n\r\n            if(strs.Length == 1)\r\n            {\r\n                return strs[0];\r\n            }\r\n\r\n            int minLength = Int16.MaxValue;\r\n            for (int i = 0; i &lt; strs.Length; i++)\r\n            {\r\n                if(strs[i].Length &lt; minLength)\r\n                {\r\n                    minLength = strs[i].Length;\r\n                }\r\n            }\r\n\r\n            if(minLength == Int16.MaxValue)\r\n            {\r\n                minLength = 0;\r\n            }\r\n\r\n            for(int i = 0; i &lt; minLength; i++)\r\n            {\r\n                char ch = strs[0][i];\r\n                for(int j = 1; j &lt; strs.Length; j++)\r\n                {\r\n                    if(ch != strs[j][i])\r\n                    {\r\n                        return strs[0].Substring(0, i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return strs[0].Substring(0,minLength);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n*m) where n is the number of strings and m is the shortest string length.</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.String;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.String\r\n{\r\n    [TestClass]\r\n    public class LongestCommonPrefixSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void LongestCommonPrefixSoln_First()\r\n        {\r\n            var input = new string[] { \"flower\", \"flow\", \"flight\" };\r\n            var output = \"fl\";\r\n            var res = new LongestCommonPrefixSoln().LongestCommonPrefix(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void LongestCommonPrefixSoln_Second()\r\n        {\r\n            var input = new string[]{\"dog\", \"racecar\", \"car\"};\r\n            var output = \"\";\r\n            var res = new LongestCommonPrefixSoln().LongestCommonPrefix(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void LongestCommonPrefixSoln_Third()\r\n        {\r\n            var input = new string[] { \"c\", \"c\" };\r\n            var output = \"c\";\r\n            var res = new LongestCommonPrefixSoln().LongestCommonPrefix(input);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6f4c5669-a9f1-4bbb-8f5e-ecb1dddcb00b-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"longest-common-prefix-string-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1703,"title":"Array Nesting - Array - Medium - LeetCode","imageUrl":"icon_5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","dateCreated":"2020-11-21T07:20:04.928Z","dateModified":"2020-11-21T07:20:11.837Z","contributedBy":"sumitc91","content":"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"array-nesting-array-medium-leetcode","total":0},{"id":1661,"title":"Get Maximum in Generated Array - Array - Easy - LeetCode","imageUrl":"icon_6268cd06-1d1b-409d-9665-cbe40d65c81d.jpg","dateCreated":"2020-11-08T08:10:40.511Z","dateModified":"2020-11-08T08:10:45.589Z","contributedBy":"sumitc91","content":"You are given an integer n. An array nums of length n + 1 is generated in the following way:\nnums[0] = 0<br />nums[1] = 1<br />nums[2 * i] = nums[i] when 2 &lt;= 2 * i &lt;= n<br />nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 &lt;= 2 * i + 1 &lt;= n<br />Return the maximum integer in the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6268cd06-1d1b-409d-9665-cbe40d65c81d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"get-maximum-in-generated-array-array-easy-leetcode","total":0},{"id":1596,"title":"Sum of Root To Leaf Binary Numbers - Tree - Easy - LeetCode","imageUrl":"icon_41e87329-1dad-4856-9c47-60b67b520656.jpg","dateCreated":"2020-10-09T09:37:18.648Z","dateModified":"2020-10-09T09:37:29.591Z","contributedBy":"sumitc91","content":"You are given the root of a binary tree where each node has a value 0 or 1. &nbsp;Each root-to-leaf path represents a binary number starting with the most significant bit. &nbsp;For example, if the path is 0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1, then this could represent 01101 in binary, which is 13.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/41e87329-1dad-4856-9c47-60b67b520656.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"sum-of-root-to-leaf-binary-numbers-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}