{"id":1330,"title":"Make Two Arrays Equal by Reversing Sub-arrays - Easy - LeetCode","imageUrl":"61c850af-beef-4204-987b-821bcd5c1187-q3.jpg","dateCreated":"2020-06-05T14:21:26.018Z","dateModified":"2020-06-05T14:21:45.175Z","contributedBy":"AskGif","content":"<p>Given two integer arrays of equal length target and arr.</p>\r\n<p>In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.</p>\r\n<p>Return True if you can make arr equal to target, or False otherwise.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: target = [1,2,3,4], arr = [2,4,1,3]</p>\r\n<p>Output: true</p>\r\n<p>Explanation: You can follow the next steps to convert arr to target:</p>\r\n<p>1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]</p>\r\n<p>2- Reverse sub-array [4,2], arr becomes [1,2,4,3]</p>\r\n<p>3- Reverse sub-array [4,3], arr becomes [1,2,3,4]</p>\r\n<p>There are multiple ways to convert arr to target, this is not the only way to do so.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: target = [7], arr = [7]</p>\r\n<p>Output: true</p>\r\n<p>Explanation: arr is equal to target without any reverses.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: target = [1,12], arr = [12,1]</p>\r\n<p>Output: true</p>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<p>Input: target = [3,7,9], arr = [3,7,11]</p>\r\n<p>Output: false</p>\r\n<p>Explanation: arr doesn't have value 9 and it can never be converted to target.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 5:</p>\r\n<p>Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]</p>\r\n<p>Output: true&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>target.length == arr.length</p>\r\n<p>1 &lt;= target.length &lt;= 1000</p>\r\n<p>1 &lt;= target[i] &lt;= 1000</p>\r\n<p>1 &lt;= arr[i] &lt;= 1000</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class CanBeEqualSoln\r\n    {\r\n        public bool CanBeEqual(int[] target, int[] arr)\r\n        {\r\n            var map = new Dictionary&lt;int, int&gt;();\r\n            for (int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                if (map.ContainsKey(arr[i]))\r\n                {\r\n                    map[arr[i]]++;\r\n                }\r\n                else\r\n                {\r\n                    map.Add(arr[i], 1);\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i &lt; target.Length; i++)\r\n            {\r\n                if (!map.ContainsKey(target[i]))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                if (map[target[i]] == 1)\r\n                {\r\n                    map.Remove(target[i]);\r\n                }\r\n                else\r\n                {\r\n                    map[target[i]]--;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class CanBeEqualSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void CanBeEqualSoln_First()\r\n        {\r\n            var target = new int[] { 1, 2, 3, 4 };\r\n            var arr = new int[] { 2, 4, 1, 3 };\r\n            var output = true;\r\n            var res = new CanBeEqualSoln().CanBeEqual(target, arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanBeEqualSoln_Second()\r\n        {\r\n            var target = new int[] { 3, 7, 9 };\r\n            var arr = new int[] { 3, 7, 11 };\r\n            var output = false;\r\n            var res = new CanBeEqualSoln().CanBeEqual(target, arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanBeEqualSoln_Third()\r\n        {\r\n            var target = new int[] { 7 };\r\n            var arr = new int[] { 7 };\r\n            var output = true;\r\n            var res = new CanBeEqualSoln().CanBeEqual(target, arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanBeEqualSoln_Fourth()\r\n        {\r\n            var target = new int[] { 1, 12 };\r\n            var arr = new int[] { 12, 1 };\r\n            var output = true;\r\n            var res = new CanBeEqualSoln().CanBeEqual(target, arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanBeEqualSoln_Fifth()\r\n        {\r\n            var target = new int[] { 1, 1, 1, 1, 1 };\r\n            var arr = new int[] { 1, 1, 1, 1, 1 };\r\n            var output = true;\r\n            var res = new CanBeEqualSoln().CanBeEqual(target, arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/61c850af-beef-4204-987b-821bcd5c1187-q3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"make-two-arrays-equal-by-reversing-sub-arrays-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"array","slug":"array"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"easy","slug":"easy"}],"recommendations":[{"id":1724,"title":"Maximum Number of Balls in a Box - Maths - Easy - LeetCode","imageUrl":"icon_2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","dateCreated":"2021-02-13T12:35:08.09Z","dateModified":"2021-02-13T12:35:13.637Z","contributedBy":"sumitc91","content":"You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the s","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"}],"slug":"maximum-number-of-balls-in-a-box-maths-easy-leetcode","total":0},{"id":1655,"title":"Sort Colors - Array - Medium - LeetCode","imageUrl":"icon_d14c2a98-a56d-44ac-9a21-2ed77349737c.jpg","dateCreated":"2020-10-31T11:30:17.677Z","dateModified":"2020-10-31T11:30:24.576Z","contributedBy":"sumitc91","content":"Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d14c2a98-a56d-44ac-9a21-2ed77349737c.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"sort-colors-array-medium-leetcode","total":0},{"id":1651,"title":"Unique Paths II - Array - Medium - LeetCode","imageUrl":"icon_ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","dateCreated":"2020-10-31T08:51:34.949Z","dateModified":"2020-10-31T08:51:41.7Z","contributedBy":"sumitc91","content":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"unique-paths-ii-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}