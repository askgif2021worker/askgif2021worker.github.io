{"id":1336,"title":"Create Target Array in the Given Order - Array - Easy - LeetCode","imageUrl":"326883c8-e933-4afe-82e0-7147202a5a60-array.png","dateCreated":"2020-06-06T15:00:23.901Z","dateModified":"2020-06-06T15:00:45.559Z","contributedBy":"AskGif","content":"<p>Given two arrays of integers nums and index. Your task is to create target array under the following rules:</p>\r\n<p>Initially, target array is empty.</p>\r\n<p>From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.</p>\r\n<p>Repeat the previous step until there are no elements to read in nums and index.</p>\r\n<p>Return the target array.</p>\r\n<p>It is guaranteed that the insertion operations will be valid.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>&nbsp;</p>\r\n<p>Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]</p>\r\n<p>Output: [0,4,1,3,2]</p>\r\n<p>Explanation:</p>\r\n<p>nums&nbsp; &nbsp; &nbsp; &nbsp;index&nbsp; &nbsp; &nbsp;target</p>\r\n<p>0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; [0]</p>\r\n<p>1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; [0,1]</p>\r\n<p>2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; [0,1,2]</p>\r\n<p>3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; [0,1,3,2]</p>\r\n<p>4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; [0,4,1,3,2]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]</p>\r\n<p>Output: [0,1,2,3,4]</p>\r\n<p>Explanation:</p>\r\n<p>nums&nbsp; &nbsp; &nbsp; &nbsp;index&nbsp; &nbsp; &nbsp;target</p>\r\n<p>1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; [1]</p>\r\n<p>2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; [1,2]</p>\r\n<p>3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; [1,2,3]</p>\r\n<p>4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp; [1,2,3,4]</p>\r\n<p>0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; [0,1,2,3,4]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: nums = [1], index = [0]</p>\r\n<p>Output: [1]</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>1 &lt;= nums.length, index.length &lt;= 100</p>\r\n<p>nums.length == index.length</p>\r\n<p>0 &lt;= nums[i] &lt;= 100</p>\r\n<p>0 &lt;= index[i] &lt;= i</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class CreateTargetArraySoln\r\n    {\r\n        public int[] CreateTargetArray(int[] nums, int[] index)\r\n        {\r\n            var target = new int[nums.Length];\r\n            var set = new HashSet&lt;int&gt;();\r\n            for(int i = 0; i &lt; nums.Length; i++)\r\n            {\r\n                if (set.Contains(index[i]))\r\n                {\r\n                    for (int j = nums.Length-1; j &gt; index[i]; j--)\r\n                    {\r\n                        target[j] = target[j - 1];\r\n                        set.Add(j);\r\n                    }\r\n                }  \r\n                \r\n                target[index[i]] = nums[i];\r\n                set.Add(index[i]);                \r\n            }\r\n\r\n            return target;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n^2)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class CreateTargetArraySolnTests\r\n    {\r\n        [TestMethod]\r\n        public void CreateTargetArraySoln_First()\r\n        {\r\n            var nums = new int[] { 0, 1, 2, 3, 4 };\r\n            var index = new int[] { 0, 1, 2, 2, 1 };\r\n            var output = new int[] { 0, 4, 1, 3, 2 };\r\n            var res = new CreateTargetArraySoln().CreateTargetArray(nums, index);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n        \r\n        [TestMethod]\r\n        public void CreateTargetArraySoln_Second()\r\n        {\r\n            var nums = new int[] { 1, 2, 3, 4, 0 };\r\n            var index = new int[] { 0, 1, 2, 3, 0 };\r\n            var output = new int[] { 0, 1, 2, 3, 4 };\r\n            var res = new CreateTargetArraySoln().CreateTargetArray(nums, index);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CreateTargetArraySoln_Third()\r\n        {\r\n            var nums = new int[] { 1 };\r\n            var index = new int[] { 0 };\r\n            var output = new int[] { 1 };\r\n            var res = new CreateTargetArraySoln().CreateTargetArray(nums, index);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CreateTargetArraySoln_Fourth()\r\n        {\r\n\r\n            var nums = new int[] { 4, 2, 4, 3, 2 };\r\n            var index = new int[] { 0, 0, 1, 3, 1 };\r\n            var output = new int[] { 2, 2, 4, 4, 3 };\r\n            var res = new CreateTargetArraySoln().CreateTargetArray(nums, index);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n\r\n        private void AreEqual(int[] res, int[] output)\r\n        {\r\n            Assert.AreEqual(res.Length, output.Length);\r\n\r\n            for (int i = 0; i &lt; res.Length; i++)\r\n            {\r\n                Assert.AreEqual(res[i], output[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/326883c8-e933-4afe-82e0-7147202a5a60-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"create-target-array-in-the-given-order-array-easy-leetcode","tags":[{"name":"array","slug":"array"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"easy","slug":"easy"},{"name":"data-structure","slug":"data-structure"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1702,"title":"Subarray Sum Equals K - Array - Medium - LeetCode","imageUrl":"icon_5dec0e7e-af11-40c9-b0bb-98503e290084.jpg","dateCreated":"2020-11-21T04:33:22.934Z","dateModified":"2020-11-21T04:33:27.536Z","contributedBy":"sumitc91","content":"Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.\n&nbsp;\nExample 1:\nInput: nums = [1,1,1], k = 2<br />Output: 2<br />Example 2:\nInput: nums = [1,2,3], k = 3<br />Output: 2<br />&nbsp;\nConstra","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5dec0e7e-af11-40c9-b0bb-98503e290084.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subarray-sum-equals-k-array-medium-leetcode","total":0},{"id":1651,"title":"Unique Paths II - Array - Medium - LeetCode","imageUrl":"icon_ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","dateCreated":"2020-10-31T08:51:34.949Z","dateModified":"2020-10-31T08:51:41.7Z","contributedBy":"sumitc91","content":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"unique-paths-ii-array-medium-leetcode","total":0},{"id":1639,"title":"Search in Rotated Sorted Array - Array - Medium - LeetCode","imageUrl":"icon_92804ec8-8b64-41e0-a4f4-89ed11e1a5e2.jpg","dateCreated":"2020-10-24T14:15:15.013Z","dateModified":"2020-10-24T14:15:23.602Z","contributedBy":"sumitc91","content":"You are given an integer array nums sorted in ascending order, and an integer target.\nSuppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nIf target is found in the array return its index, otherwise, return -1.</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/92804ec8-8b64-41e0-a4f4-89ed11e1a5e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"search-in-rotated-sorted-array-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}