{"id":1342,"title":"Check If N and Its Double Exist - Array - Easy - LeetCode","imageUrl":"27b2167a-12c0-494e-8406-ceac778ad817-array.png","dateCreated":"2020-06-07T14:10:04.931Z","dateModified":"2020-06-07T14:10:26.072Z","contributedBy":"AskGif","content":"<p>Given an array arr of integers, check if there exist two integers N and M such that N is the double of M ( i.e. N = 2 * M).</p>\r\n<p>More formally check if there exists two indices i and j such that :</p>\r\n<p>i != j</p>\r\n<p>0 &lt;= i, j &lt; arr.length</p>\r\n<p>arr[i] == 2 * arr[j]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: arr = [10,2,5,3]</p>\r\n<p>Output: true</p>\r\n<p>Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: arr = [7,1,14,11]</p>\r\n<p>Output: true</p>\r\n<p>Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: arr = [3,1,7,11]</p>\r\n<p>Output: false</p>\r\n<p>Explanation: In this case does not exist N and M, such that N = 2 * M.</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>2 &lt;= arr.length &lt;= 500</p>\r\n<p>-10^3 &lt;= arr[i] &lt;= 10^3</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class CheckIfExistSoln\r\n    {\r\n        public bool CheckIfExist(int[] arr)\r\n        {\r\n            var map = new Dictionary&lt;int, int&gt;();\r\n            for (int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                if (map.ContainsKey(arr[i]))\r\n                {\r\n                    map[arr[i]]++;\r\n                }\r\n                else\r\n                {\r\n                    map.Add(arr[i], 1);\r\n                }\r\n            }\r\n\r\n            if (map.ContainsKey(0) &amp;&amp; map[0] == 2)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            map.Remove(0);\r\n\r\n            for (int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                if(map.ContainsKey(arr[i] * 2))\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class CheckIfExistSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void CheckIfExistSoln_First()\r\n        {\r\n            var arr = new int[] { 10, 2, 5, 3 };\r\n            var output = true;\r\n            var res = new CheckIfExistSoln().CheckIfExist(arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CheckIfExistSoln_Second()\r\n        {\r\n            var arr = new int[] { 7, 1, 14, 11 };\r\n            var output = true;\r\n            var res = new CheckIfExistSoln().CheckIfExist(arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CheckIfExistSoln_Third()\r\n        {\r\n            var arr = new int[] { 3, 1, 7, 11 };\r\n            var output = false;\r\n            var res = new CheckIfExistSoln().CheckIfExist(arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CheckIfExistSoln_Fourth()\r\n        {\r\n            var arr = new int[] { -2, 0, 10, -19, 4, 6, -8 };\r\n            var output = false;\r\n            var res = new CheckIfExistSoln().CheckIfExist(arr);\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/27b2167a-12c0-494e-8406-ceac778ad817-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"check-if-n-and-its-double-exist-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"array","slug":"array"},{"name":"easy","slug":"easy"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1677,"title":"Find the Duplicate Number - Array - Medium - LeetCode","imageUrl":"icon_85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","dateCreated":"2020-11-18T13:09:40.526Z","dateModified":"2020-11-18T13:09:46.723Z","contributedBy":"sumitc91","content":"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one duplicate number in nums, return this duplicate number.\nFollow-ups:\nHow can we prove that at least one duplicate number must exist in nums?&nbsp;<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"find-the-duplicate-number-array-medium-leetcode","total":0},{"id":1622,"title":"Rotate String - String - Easy - LeetCode","imageUrl":"icon_cfadbae1-5a57-4a8d-8e75-47f7f8493641.jpg","dateCreated":"2020-10-17T06:43:07.643Z","dateModified":"2020-10-17T06:43:14.01Z","contributedBy":"sumitc91","content":"We are given two strings, A and B.\nA shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/021208ce-72e5-4026-a526-0c8b482a8d72.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"rotate-string-string-easy-leetcode","total":0},{"id":1598,"title":"Find the Town Judge - Tree - Easy - LeetCode","imageUrl":"icon_2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","dateCreated":"2020-10-14T09:05:56.984Z","dateModified":"2020-10-14T09:06:09.069Z","contributedBy":"sumitc91","content":"In a town, there are N people labelled from 1 to N. &nbsp;There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody.<br />Everybody (except for the town judge) trusts the town judge.<br />There is exactly one p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-town-judge-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}