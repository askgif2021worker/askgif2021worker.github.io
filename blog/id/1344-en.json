{"id":1344,"title":"Rank Transform of an Array - Easy - LeetCode","imageUrl":"fed855c3-5c43-4e79-a073-69e56bd0a9cb-array.png","dateCreated":"2020-06-08T10:32:38.385Z","dateModified":"2020-06-08T14:14:00.38Z","contributedBy":"AskGif","content":"<p>Given an array of integers arr, replace each element with its rank.</p>\r\n<p>The rank represents how large the element is. The rank has the following rules:</p>\r\n<p>Rank is an integer starting from 1.</p>\r\n<p>The larger the element, the larger the rank. If two elements are equal, their rank must be the same.</p>\r\n<p>Rank should be as small as possible.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: arr = [40,10,20,30]</p>\r\n<p>Output: [4,1,2,3]</p>\r\n<p>Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: arr = [100,100,100]</p>\r\n<p>Output: [1,1,1]</p>\r\n<p>Explanation: Same elements share the same rank.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: arr = [37,12,28,9,100,56,80,5,12]</p>\r\n<p>Output: [5,3,4,2,8,6,7,1,3]</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>0 &lt;= arr.length &lt;= 105</p>\r\n<p>-109 &lt;= arr[i] &lt;= 109</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class ArrayRankTransformSoln\r\n    {\r\n        public int[] ArrayRankTransform(int[] arr)\r\n        {\r\n            var map = new Dictionary&lt;int, int&gt;();\r\n            var mapRank = new Dictionary&lt;int, int&gt;();\r\n            for (int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                if (map.ContainsKey(arr[i]))\r\n                {\r\n                    map[arr[i]]++;\r\n                }\r\n                else\r\n                {\r\n                    map.Add(arr[i], 1);\r\n                }\r\n            }\r\n\r\n            var sorted = map.OrderBy(x =&gt; x.Key);\r\n            var rank = 1;\r\n            foreach (var item in sorted)\r\n            {\r\n                mapRank.Add(item.Key, rank);\r\n                rank++;\r\n            }\r\n\r\n            var res = new int[arr.Length];\r\n            for (int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                res[i] = mapRank[arr[i]];\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class ArrayRankTransformSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void ArrayRankTransformSoln_First()\r\n        {\r\n            var arr = new int[] { 40, 10, 20, 30 };\r\n            var output = new int[]{ 4, 1, 2, 3 };\r\n            var res = new ArrayRankTransformSoln().ArrayRankTransform(arr);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ArrayRankTransformSoln_Second()\r\n        {\r\n            var arr = new int[] { 100, 100, 100 };\r\n            var output = new int[] { 1, 1, 1 };\r\n            var res = new ArrayRankTransformSoln().ArrayRankTransform(arr);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ArrayRankTransformSoln_Third()\r\n        {\r\n            var arr = new int[] { 37, 12, 28, 9, 100, 56, 80, 5, 12 };\r\n            var output = new int[] { 5, 3, 4, 2, 8, 6, 7, 1, 3 };\r\n            var res = new ArrayRankTransformSoln().ArrayRankTransform(arr);\r\n\r\n            AreEqual(res, output);\r\n        }\r\n\r\n        private void AreEqual(int[] res, int[] output)\r\n        {\r\n            Assert.AreEqual(res.Length, output.Length);\r\n            for (int i = 0; i &lt; res.Length; i++)\r\n            {\r\n                Assert.AreEqual(res[i], output[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fed855c3-5c43-4e79-a073-69e56bd0a9cb-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"rank-transform-of-an-array-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1715,"title":"Determine if String Halves Are Alike - String - Easy - LeetCode","imageUrl":"icon_8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","dateCreated":"2021-01-08T09:24:14.63Z","dateModified":"2021-01-08T09:24:20.084Z","contributedBy":"sumitc91","content":"You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains upperca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"determine-if-string-halves-are-alike-string-easy-leetcode","total":0},{"id":1663,"title":"Defuse the Bomb - Array - Easy - LeetCode","imageUrl":"icon_e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","dateCreated":"2020-11-15T15:48:36.584Z","dateModified":"2020-11-15T15:48:43.094Z","contributedBy":"sumitc91","content":"You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\nIf k &gt; 0, replace the ith number with th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"defuse-the-bomb-array-easy-leetcode","total":0},{"id":1591,"title":"Leaf-Similar Trees - Tree - Easy - LeetCode","imageUrl":"icon_db0b4415-6ae2-4e32-b111-ad26e1d99874.jpg","dateCreated":"2020-10-09T05:05:38.157Z","dateModified":"2020-10-09T05:05:50.02Z","contributedBy":"sumitc91","content":"Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar if their leaf value sequence is t","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/db0b4415-6ae2-4e32-b111-ad26e1d99874.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"leaf-similar-trees-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}