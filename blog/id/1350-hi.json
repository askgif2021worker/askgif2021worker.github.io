{"id":1350,"title":"Find Winner on a Tic Tac Toe Game - Array - Easy - LeetCode","imageUrl":"4bc52609-200a-43b9-80bf-709900ecc433-array.png","dateCreated":"2020-06-10T08:12:34.456Z","dateModified":"2020-06-10T08:12:46.86Z","contributedBy":"AskGif","content":"<p>Tic-tac-toe is played by two players A and B on a 3 x 3 grid.</p>\r\n<p>Here are the rules of Tic-Tac-Toe:</p>\r\n<p>Players take turns placing characters into empty squares (\" \").</p>\r\n<p>The first player A always places \"X\" characters, while the second player B always places \"O\" characters.</p>\r\n<p>\"X\" and \"O\" characters are always placed into empty squares, never on filled ones.</p>\r\n<p>The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.</p>\r\n<p>The game also ends if all squares are non-empty.</p>\r\n<p>No more moves can be played if the game is over.</p>\r\n<p>Given an array moves where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.</p>\r\n<p>Return the winner of the game if it exists (A or B), in case the game ends in a draw return \"Draw\", if there are still movements to play return \"Pending\".</p>\r\n<p>You can assume that moves is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]</p>\r\n<p>Output: \"A\"</p>\r\n<p>Explanation: \"A\" wins, he always plays first.</p>\r\n<p>\"X&nbsp; \"&nbsp; &nbsp; \"X&nbsp; \"&nbsp; &nbsp; \"X&nbsp; \"&nbsp; &nbsp; \"X&nbsp; \"&nbsp; &nbsp; \"X&nbsp; \"</p>\r\n<p>\"&nbsp; &nbsp;\" -&gt; \"&nbsp; &nbsp;\" -&gt; \" X \" -&gt; \" X \" -&gt; \" X \"</p>\r\n<p>\"&nbsp; &nbsp;\"&nbsp; &nbsp; \"O&nbsp; \"&nbsp; &nbsp; \"O&nbsp; \"&nbsp; &nbsp; \"OO \"&nbsp; &nbsp; \"OOX\"</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]</p>\r\n<p>Output: \"B\"</p>\r\n<p>Explanation: \"B\" wins.</p>\r\n<p>\"X&nbsp; \"&nbsp; &nbsp; \"X&nbsp; \"&nbsp; &nbsp; \"XX \"&nbsp; &nbsp; \"XXO\"&nbsp; &nbsp; \"XXO\"&nbsp; &nbsp; \"XXO\"</p>\r\n<p>\"&nbsp; &nbsp;\" -&gt; \" O \" -&gt; \" O \" -&gt; \" O \" -&gt; \"XO \" -&gt; \"XO \"&nbsp;</p>\r\n<p>\"&nbsp; &nbsp;\"&nbsp; &nbsp; \"&nbsp; &nbsp;\"&nbsp; &nbsp; \"&nbsp; &nbsp;\"&nbsp; &nbsp; \"&nbsp; &nbsp;\"&nbsp; &nbsp; \"&nbsp; &nbsp;\"&nbsp; &nbsp; \"O&nbsp; \"</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]</p>\r\n<p>Output: \"Draw\"</p>\r\n<p>Explanation: The game ends in a draw since there are no moves to make.</p>\r\n<p>\"XXO\"</p>\r\n<p>\"OOX\"</p>\r\n<p>\"XOX\"</p>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<p>Input: moves = [[0,0],[1,1]]</p>\r\n<p>Output: \"Pending\"</p>\r\n<p>Explanation: The game has not finished yet.</p>\r\n<p>\"X&nbsp; \"</p>\r\n<p>\" O \"</p>\r\n<p>\"&nbsp; &nbsp;\"</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>1 &lt;= moves.length &lt;= 9</p>\r\n<p>moves[i].length == 2</p>\r\n<p>0 &lt;= moves[i][j] &lt;= 2</p>\r\n<p>There are no repeated elements on moves.</p>\r\n<p>moves follow the rules of tic tac toe.</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class TictactoeSoln\r\n    {\r\n        public string Tictactoe(int[][] moves)\r\n        {\r\n            var matrix = new char[3, 3];\r\n\r\n            var playerA = true;\r\n            var input = 'X';\r\n            for (int i = 0; i &lt; moves.Length; i++)\r\n            {\r\n                if (!playerA)\r\n                {\r\n                    input = 'O';                    \r\n                }\r\n                else\r\n                {\r\n                    input = 'X';\r\n                }\r\n                playerA = !playerA;\r\n\r\n                //considering inputs are valid\r\n                matrix[moves[i][0], moves[i][1]] = input;\r\n                var check = ValidateMatrix(matrix);\r\n                switch (check)\r\n                {\r\n                    case \"O\":\r\n                        return \"B\";                        \r\n                    case \"X\":\r\n                        return \"A\";\r\n                    case \"Draw\":\r\n                        return \"Draw\";\r\n                    case \"Pending\":\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return \"Pending\";\r\n        }\r\n\r\n        private string ValidateMatrix(char[,] matrix)\r\n        {\r\n            char defaultValue = '\\0';\r\n            //First row\r\n            if(matrix[0, 0] != defaultValue &amp;&amp; matrix[0, 0] == matrix[0, 1] &amp;&amp; matrix[0, 0] == matrix[0, 2])\r\n            {\r\n                return matrix[0, 0].ToString();\r\n            }\r\n\r\n            //Second row\r\n            if (matrix[1, 0] != defaultValue &amp;&amp;  matrix[1, 0] == matrix[1, 1] &amp;&amp; matrix[1, 0] == matrix[1, 2])\r\n            {\r\n                return matrix[1, 0].ToString();\r\n            }\r\n\r\n            //Third row\r\n            if (matrix[2, 0] != defaultValue &amp;&amp; matrix[2, 0] == matrix[2, 1] &amp;&amp; matrix[2, 0] == matrix[2, 2])\r\n            {\r\n                return matrix[2, 0].ToString();\r\n            }\r\n\r\n            //First Column\r\n            if (matrix[0, 0] != defaultValue &amp;&amp; matrix[0, 0] == matrix[1, 0] &amp;&amp; matrix[0, 0] == matrix[2, 0])\r\n            {\r\n                return matrix[0, 0].ToString();\r\n            }\r\n\r\n            //Second Column\r\n            if (matrix[0, 1] != defaultValue &amp;&amp; matrix[0, 1] == matrix[1, 1] &amp;&amp; matrix[0, 1] == matrix[2, 1])\r\n            {\r\n                return matrix[0, 1].ToString();\r\n            }\r\n\r\n            //Third Column\r\n            if (matrix[0, 2] != defaultValue &amp;&amp; matrix[0, 2] == matrix[1, 2] &amp;&amp; matrix[0, 2] == matrix[2, 2])\r\n            {\r\n                return matrix[0, 2].ToString();\r\n            }\r\n\r\n            //Diagonal\r\n            if (matrix[0, 0] != defaultValue &amp;&amp; matrix[0, 0] == matrix[1, 1] &amp;&amp; matrix[0, 0] == matrix[2, 2])\r\n            {\r\n                return matrix[0, 0].ToString();\r\n            }\r\n\r\n            //Diagonal\r\n            if (matrix[0, 2] != defaultValue &amp;&amp; matrix[0, 2] == matrix[1, 1] &amp;&amp; matrix[0, 2] == matrix[2, 0])\r\n            {\r\n                return matrix[0, 2].ToString();\r\n            }\r\n\r\n            //Check if any block is available to play\r\n            for (int i = 0; i &lt; 3; i++)\r\n            {\r\n                for (int j = 0; j &lt; 3; j++)\r\n                {\r\n                    if(matrix[i,j] == defaultValue)\r\n                    {\r\n                        return \"Pending\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"Draw\";\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n) To Create Matrix</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class TictactoeSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void TictactoeSoln_First()\r\n        {\r\n            var moves = new int[,] {\r\n                { 0, 0 },\r\n                { 2, 0 },\r\n                { 1, 1 },\r\n                { 2, 1 },\r\n                { 2, 2 }\r\n            };\r\n\r\n            var output = \"A\";\r\n            var res = new TictactoeSoln().Tictactoe(ArrayMapper(moves));\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void TictactoeSoln_Second()\r\n        {\r\n            var moves = new int[,] {\r\n                { 0, 0 },\r\n                { 1, 1 },\r\n                { 0, 1 },\r\n                { 0, 2 },\r\n                { 1, 0 },\r\n                { 2, 0 }\r\n            };\r\n\r\n            var output = \"B\";\r\n            var res = new TictactoeSoln().Tictactoe(ArrayMapper(moves));\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void TictactoeSoln_Third()\r\n        {\r\n            var moves = new int[,] {\r\n                { 0, 0 },\r\n                { 1, 1 },\r\n                { 2, 0 },\r\n                { 1, 0 },\r\n                { 1, 2 },\r\n                { 2, 1 },\r\n                { 0, 1 },\r\n                { 0, 2 },\r\n                { 2, 2 }\r\n            };\r\n\r\n            var output = \"Draw\";\r\n            var res = new TictactoeSoln().Tictactoe(ArrayMapper(moves));\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void TictactoeSoln_Fourth()\r\n        {\r\n            var moves = new int[,] {\r\n                { 0, 0 },\r\n                { 1, 1 }\r\n            };\r\n\r\n            var output = \"Pending\";\r\n            var res = new TictactoeSoln().Tictactoe(ArrayMapper(moves));\r\n\r\n            Assert.AreEqual(res, output);\r\n        }\r\n\r\n        private int[][] ArrayMapper(int[,] matrix)\r\n        {\r\n            var arr = new int[matrix.GetLength(0)][];\r\n            for (int i = 0; i &lt; matrix.GetLength(0); i++)\r\n            {\r\n                arr[i] = new int[matrix.GetLength(1)];\r\n                for (int j = 0; j &lt; matrix.GetLength(1); j++)\r\n                {\r\n                    arr[i][j] = matrix[i, j];\r\n                }\r\n            }\r\n\r\n            return arr;\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4bc52609-200a-43b9-80bf-709900ecc433-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"find-winner-on-a-tic-tac-toe-game-array-easy-leetcode","tags":[{"name":"array","slug":"array"},{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"},{"name":"आसान","slug":"easy"}],"recommendations":[{"id":1722,"title":"Latest Time by Replacing Hidden Digits - String - Easy - LeetCode","imageUrl":"icon_370ef122-a2da-4596-8095-2a518775a5cb.jpg","dateCreated":"2021-01-26T09:27:11.691Z","dateModified":"2021-01-26T09:27:17.976Z","contributedBy":"sumitc91","content":"You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\n&nbsp;","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/370ef122-a2da-4596-8095-2a518775a5cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"latest-time-by-replacing-hidden-digits-string-easy-leetcode","total":0},{"id":1617,"title":"Relative Ranks - Array - Easy - LeetCode","imageUrl":"icon_999e367f-6673-49be-9d6a-411dd5e1e1e2.jpg","dateCreated":"2020-10-17T05:30:58.485Z","dateModified":"2020-10-17T05:31:07.765Z","contributedBy":"sumitc91","content":"Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\nExample 1:<br />Input: [5, 4, 3, 2, 1]<br />Output: [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/999e367f-6673-49be-9d6a-411dd5e1e1e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"relative-ranks-array-easy-leetcode","total":0},{"id":1616,"title":"Construct the Rectangle - Maths - Easy - LeetCode","imageUrl":"icon_b45219ed-7740-49ab-9ef5-a30a75eda886.jpg","dateCreated":"2020-10-17T04:16:55.036Z","dateModified":"2020-10-17T04:17:06.352Z","contributedBy":"sumitc91","content":"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page&rsquo;s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\nThe area of the rectangular web page you designed must ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b45219ed-7740-49ab-9ef5-a30a75eda886.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"slug":"construct-the-rectangle-maths-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}