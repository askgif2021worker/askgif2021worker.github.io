{"id":1352,"title":"Shift 2D Grid - Array - Easy - LeetCode","imageUrl":"396f6cfc-2966-4853-8c2c-4c293c9d49cf-array.png","dateCreated":"2020-06-11T07:25:28.679Z","dateModified":"2020-06-11T07:25:42.604Z","contributedBy":"AskGif","content":"<p>Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.</p>\r\n<p>In one shift operation:</p>\r\n<p>Element at grid[i][j] moves to grid[i][j + 1].</p>\r\n<p>Element at grid[i][n - 1] moves to grid[i + 1][0].</p>\r\n<p>Element at grid[m - 1][n - 1] moves to grid[0][0].</p>\r\n<p>Return the 2D grid after applying shift operation k times.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1</p>\r\n<p>Output: [[9,1,2],[3,4,5],[6,7,8]]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4</p>\r\n<p>Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9</p>\r\n<p>Output: [[1,2,3],[4,5,6],[7,8,9]]</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>m == grid.length</p>\r\n<p>n == grid[i].length</p>\r\n<p>1 &lt;= m &lt;= 50</p>\r\n<p>1 &lt;= n &lt;= 50</p>\r\n<p>-1000 &lt;= grid[i][j] &lt;= 1000</p>\r\n<p>0 &lt;= k &lt;= 100</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class ShiftGridSoln\r\n    {\r\n        public IList&lt;IList&lt;int&gt;&gt; ShiftGrid(int[][] grid, int k)\r\n        {\r\n            var res = new List&lt;IList&lt;int&gt;&gt;();\r\n\r\n            //initialize list with dummy values\r\n            for (int i = 0; i &lt; grid.Length; i++)\r\n            {\r\n                var row = new List&lt;int&gt;();\r\n                for (int j = 0; j &lt; grid[0].Length; j++)\r\n                {\r\n                    row.Add(0);\r\n                }\r\n                res.Add(row);\r\n            }\r\n\r\n            for (int i = 0; i &lt; grid.Length; i++)\r\n            {\r\n                for (int j = 0; j &lt; grid[0].Length; j++)\r\n                {\r\n                    int[] pos = GenerateNewPosition(grid.Length, grid[0].Length, i, j, k);\r\n                    res[pos[0]][pos[1]] = grid[i][j];\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        private int[] GenerateNewPosition(int row, int column, int i, int j, int k)\r\n        {\r\n            if(j+k &gt; column-1)\r\n            {\r\n                i = i + ((j + k) / column);\r\n                j = (j + k) % column;                \r\n                i = i % row;\r\n            }\r\n            else\r\n            {\r\n                j = j + k;\r\n            }\r\n\r\n            return new int[] { i, j };\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>Time Complexity: O(n^2)</p>\r\n<p>Space Complexity: O(n) To Store Result</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class ShiftGridSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void ShiftGridSoln_First()\r\n        {\r\n            var arr = new int[,] {\r\n                    { 1, 2, 3 },\r\n                    { 4, 5, 6 },\r\n                    { 7, 8, 9 }\r\n                };\r\n            var k = 1;\r\n            var output = new int[,] {\r\n                    { 9, 1, 2 },\r\n                    { 3, 4, 5 },\r\n                    { 6, 7, 8 }\r\n                };\r\n\r\n            var res = new ShiftGridSoln().ShiftGrid(ArrayMapper(arr), k);\r\n\r\n            AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ShiftGridSoln_Second()\r\n        {\r\n            var arr = new int[,] {\r\n                    { 1, 2, 3 },\r\n                    { 4, 5, 6 },\r\n                    { 7, 8, 9 }\r\n                };\r\n            var k = 9;\r\n            var output = new int[,] {\r\n                    { 1, 2, 3 },\r\n                    { 4, 5, 6 },\r\n                    { 7, 8, 9 }\r\n                };\r\n\r\n            var res = new ShiftGridSoln().ShiftGrid(ArrayMapper(arr), k);\r\n\r\n            AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ShiftGridSoln_Third()\r\n        {\r\n            var arr = new int[,] {\r\n                    { 3, 8, 1, 9 },\r\n                    { 19, 7, 2, 5 },\r\n                    { 4, 6, 11, 10 },\r\n                    { 12, 0, 21, 13 }\r\n                };\r\n            var k = 4;\r\n            var output = new int[,] {\r\n                    { 12, 0, 21, 13 },\r\n                    { 3, 8, 1, 9 },\r\n                    { 19, 7, 2, 5 },\r\n                    { 4, 6, 11, 10 }\r\n                };\r\n\r\n            var res = new ShiftGridSoln().ShiftGrid(ArrayMapper(arr), k);\r\n\r\n            AreEqual(output, res);\r\n        }\r\n\r\n\r\n        private void AreEqual(int[,] output, IList&lt;IList&lt;int&gt;&gt; res)\r\n        {\r\n            for (int i = 0; i &lt; res.Count; i++)\r\n            {\r\n                for (int j = 0; j &lt; res[i].Count; j++)\r\n                {\r\n                    Assert.AreEqual(output[i, j], res[i][j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        private int[][] ArrayMapper(int[,] matrix)\r\n        {\r\n            var arr = new int[matrix.GetLength(0)][];\r\n            for (int i = 0; i &lt; matrix.GetLength(0); i++)\r\n            {\r\n                arr[i] = new int[matrix.GetLength(1)];\r\n                for (int j = 0; j &lt; matrix.GetLength(1); j++)\r\n                {\r\n                    arr[i][j] = matrix[i, j];\r\n                }\r\n            }\r\n\r\n            return arr;\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/396f6cfc-2966-4853-8c2c-4c293c9d49cf-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"shift-2d-grid-array-easy-leetcode","tags":[{"name":"data-structure","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"}],"recommendations":[{"id":1715,"title":"Determine if String Halves Are Alike - String - Easy - LeetCode","imageUrl":"icon_8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","dateCreated":"2021-01-08T09:24:14.63Z","dateModified":"2021-01-08T09:24:20.084Z","contributedBy":"sumitc91","content":"You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains upperca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"determine-if-string-halves-are-alike-string-easy-leetcode","total":0},{"id":1703,"title":"Array Nesting - Array - Medium - LeetCode","imageUrl":"icon_5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","dateCreated":"2020-11-21T07:20:04.928Z","dateModified":"2020-11-21T07:20:11.837Z","contributedBy":"sumitc91","content":"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5da00dcd-3cd3-4eb0-a2ee-26865bba7184.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"array-nesting-array-medium-leetcode","total":0},{"id":1615,"title":"License Key Formatting - String - Easy - LeetCode","imageUrl":"icon_168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","dateCreated":"2020-10-17T04:06:23.384Z","dateModified":"2020-10-17T04:06:32.538Z","contributedBy":"sumitc91","content":"You are given a license key represented as a string S which consists of only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the fi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"license-key-formatting-string-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}