{"id":1356,"title":"Minimum Absolute Difference - Array - Easy - LeetCode","imageUrl":"b278fc51-feb7-4523-8a58-c878db1984a0-array.png","dateCreated":"2020-06-12T14:06:22.421Z","dateModified":"2020-06-12T14:06:35.075Z","contributedBy":"AskGif","content":"<p>Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.&nbsp;</p>\r\n<p>Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows</p>\r\n<p>a, b are from arr</p>\r\n<p>a &lt; b</p>\r\n<p>b - a equals to the minimum absolute difference of any two elements in arr</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: arr = [4,2,1,3]</p>\r\n<p>Output: [[1,2],[2,3],[3,4]]</p>\r\n<p>Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: arr = [1,3,6,10,15]</p>\r\n<p>Output: [[1,3]]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: arr = [3,8,-10,23,19,-4,-14,27]</p>\r\n<p>Output: [[-14,-10],[19,23],[23,27]]</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>2 &lt;= arr.length &lt;= 10^5</p>\r\n<p>-10^6 &lt;= arr[i] &lt;= 10^6</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class MinimumAbsDifferenceSoln\r\n    {\r\n        public IList&lt;IList&lt;int&gt;&gt; MinimumAbsDifference(int[] arr)\r\n        {\r\n            int minDiff = int.MaxValue;\r\n            int diff = 0;\r\n            var res = new List&lt;IList&lt;int&gt;&gt;();\r\n\r\n            //Sort the array in ascending order\r\n            arr = arr.OrderBy(x =&gt; x).ToArray();\r\n            \r\n            for (int i = 1; i &lt; arr.Length; i++)\r\n            {\r\n                diff = arr[i] - arr[i - 1];\r\n                if(diff &lt; minDiff)\r\n                {\r\n                    res.Clear();\r\n                    res.Add(new List&lt;int&gt;() { arr[i - 1], arr[i] });\r\n                    minDiff = diff;\r\n                }\r\n                else if(diff == minDiff)\r\n                {\r\n                    res.Add(new List&lt;int&gt;() { arr[i - 1], arr[i] });\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(nlogn) Using QuickSort</p>\r\n<p>Space Complexity: O(n) For storing the result</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class MinimumAbsDifferenceSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void MinimumAbsDifferenceSoln_First()\r\n        {\r\n            var chips = new int[] { 4, 2, 1, 3 };\r\n            var output = new int[,] {\r\n                { 1, 2 },\r\n                { 2, 3 },\r\n                { 3, 4 }\r\n            };\r\n\r\n            var res = new MinimumAbsDifferenceSoln().MinimumAbsDifference(chips);\r\n\r\n            AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void MinimumAbsDifferenceSoln_Second()\r\n        {\r\n            var chips = new int[] { 1, 3, 6, 10, 15 };\r\n            var output = new int[,] {\r\n                { 1, 3 }\r\n            };\r\n\r\n            var res = new MinimumAbsDifferenceSoln().MinimumAbsDifference(chips);\r\n\r\n            AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void MinimumAbsDifferenceSoln_Third()\r\n        {\r\n            var chips = new int[] { 3, 8, -10, 23, 19, -4, -14, 27 };\r\n            var output = new int[,] {\r\n                { -14, -10 },\r\n                { 19, 23 },\r\n                { 23, 27 }\r\n            };\r\n\r\n            var res = new MinimumAbsDifferenceSoln().MinimumAbsDifference(chips);\r\n\r\n            AreEqual(output, res);\r\n        }\r\n\r\n        private void AreEqual(int[,] output, IList&lt;IList&lt;int&gt;&gt; res)\r\n        {\r\n            for (int i = 0; i &lt; output.GetLength(0); i++)\r\n            {\r\n                for (int j = 0; j &lt; output.GetLength(1); j++)\r\n                {\r\n                    Assert.AreEqual(output[i, j], res[i][j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b278fc51-feb7-4523-8a58-c878db1984a0-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"minimum-absolute-difference-array-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1721,"title":"Find the Highest Altitude - Array - Easy - LeetCode","imageUrl":"icon_0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","dateCreated":"2021-01-26T09:15:18.731Z","dateModified":"2021-01-26T09:15:23.937Z","contributedBy":"sumitc91","content":"There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-highest-altitude-array-easy-leetcode","total":0},{"id":1706,"title":"Check If Two String Arrays are Equivalent - String - Easy - LeetCode","imageUrl":"icon_38460c51-4f08-46d0-82ef-1f2263c60127.jpg","dateCreated":"2020-11-24T13:04:46.01Z","dateModified":"2020-11-24T13:04:50.906Z","contributedBy":"sumitc91","content":"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n&nbsp;\nExample 1:\nInput: word1 = [\"ab\", \"c\"], word2 ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38460c51-4f08-46d0-82ef-1f2263c60127.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"check-if-two-string-arrays-are-equivalent-string-easy-leetcode","total":0},{"id":1666,"title":"Construct Binary Tree from Preorder and Inorder Traversal - Array - Medium - LeetCode","imageUrl":"icon_af4cfea8-d43c-4a5f-aded-bc8e7ebfe296.jpg","dateCreated":"2020-11-17T10:00:03.216Z","dateModified":"2020-11-17T10:00:07.655Z","contributedBy":"sumitc91","content":"Given preorder and inorder traversal of a tree, construct the binary tree.\nNote:<br />You may assume that duplicates do not exist in the tree.\nFor example, given\npreorder = [3,9,20,15,7]<br />inorder = [9,3,15,20,7]<br />Return the following binary tree:\n&nbsp; &nbsp; ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/af4cfea8-d43c-4a5f-aded-bc8e7ebfe296.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"construct-binary-tree-from-preorder-and-inorder-traversal-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}