{"id":1358,"title":"Distance Between Bus Stops - Array - Easy - LeetCode","imageUrl":"e24dbbf3-b269-4dda-a4b3-f4319036bdb5-untitled-diagram-1.jpg","dateCreated":"2020-06-13T09:21:42.042Z","dateModified":"2020-06-13T09:22:09.869Z","contributedBy":"AskGif","content":"<p>A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.</p>\r\n<p>The bus goes along both directions i.e. clockwise and counterclockwise.</p>\r\n<p>Return the shortest distance between the given start and destination stops.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: distance = [1,2,3,4], start = 0, destination = 1</p>\r\n<p>Output: 1</p>\r\n<p>Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: distance = [1,2,3,4], start = 0, destination = 2</p>\r\n<p>Output: 3</p>\r\n<p>Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: distance = [1,2,3,4], start = 0, destination = 3</p>\r\n<p>Output: 4</p>\r\n<p>Explanation: Distance between 0 and 3 is 6 or 4, the minimum is 4.</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>1 &lt;= n &lt;= 10^4</p>\r\n<p>distance.length == n</p>\r\n<p>0 &lt;= start, destination &lt; n</p>\r\n<p>0 &lt;= distance[i] &lt;= 10^4</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class DistanceBetweenBusStopsSoln\r\n    {\r\n        public int DistanceBetweenBusStops(int[] distance, int start, int destination)\r\n        {            \r\n            var clockwise = 0;\r\n            bool clockwiseFound = false;\r\n\r\n            var antiClockwise = 0;\r\n            bool antiClockwiseFound = false;\r\n            int i = start;\r\n            int j = start;\r\n            \r\n            while (true)\r\n            {\r\n                i++;\r\n                j--;\r\n\r\n                if (i &gt; distance.Length - 1)\r\n                {\r\n                    i = 0;\r\n                }\r\n\r\n                if (j &lt; 0)\r\n                {\r\n                    j = distance.Length - 1;\r\n                }\r\n\r\n                if (i == destination)\r\n                {\r\n                    if ((i - 1) &lt; 0)\r\n                    {\r\n                        clockwise += distance[distance.Length - 1];\r\n                    }\r\n                    else\r\n                    {\r\n                        clockwise += distance[i - 1];\r\n                    }                    \r\n                    clockwiseFound = true;\r\n                }\r\n\r\n                if( j == destination)\r\n                {                    \r\n                    antiClockwise += distance[j];                                                     \r\n                    antiClockwiseFound = true;\r\n                }\r\n\r\n                if (!clockwiseFound)\r\n                {\r\n                    if ((i - 1) &lt; 0)\r\n                    {\r\n                        clockwise += distance[distance.Length - 1];\r\n                    }\r\n                    else\r\n                    {\r\n                        clockwise += distance[i - 1];\r\n                    }\r\n                }\r\n\r\n                if (!antiClockwiseFound)\r\n                {                    \r\n                    antiClockwise += distance[j];                    \r\n                }  \r\n                \r\n                if(clockwiseFound &amp;&amp; antiClockwiseFound)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return clockwise &lt; antiClockwise ? clockwise : antiClockwise;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:<br /><br /></p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class DistanceBetweenBusStopsSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void DistanceBetweenBusStopsSoln_First()\r\n        {\r\n            var distance = new int[] { 1, 2, 3, 4 };\r\n            var start = 0;\r\n            var destination = 1;\r\n\r\n            var output = 1;\r\n\r\n            var res = new DistanceBetweenBusStopsSoln().DistanceBetweenBusStops(distance, start, destination);\r\n\r\n            Assert.AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DistanceBetweenBusStopsSoln_Second()\r\n        {\r\n            var distance = new int[] { 1, 2, 3, 4 };\r\n            var start = 0;\r\n            var destination = 2;\r\n\r\n            var output = 3;\r\n\r\n            var res = new DistanceBetweenBusStopsSoln().DistanceBetweenBusStops(distance, start, destination);\r\n\r\n            Assert.AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DistanceBetweenBusStopsSoln_Third()\r\n        {\r\n            var distance = new int[] { 1, 2, 3, 4 };\r\n            var start = 0;\r\n            var destination = 3;\r\n\r\n            var output = 4;\r\n\r\n            var res = new DistanceBetweenBusStopsSoln().DistanceBetweenBusStops(distance, start, destination);\r\n\r\n            Assert.AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DistanceBetweenBusStopsSoln_Fourt()\r\n        { \r\n            var distance = new int[] { 7, 10, 1, 12, 11, 14, 5, 0 };\r\n            var start = 7;\r\n            var destination = 2;\r\n\r\n            var output = 17;\r\n\r\n            var res = new DistanceBetweenBusStopsSoln().DistanceBetweenBusStops(distance, start, destination);\r\n\r\n            Assert.AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DistanceBetweenBusStopsSoln_Fifth()\r\n        {           \r\n            var distance = new int[] { 3, 6, 7, 2, 9, 10, 7, 16, 11 };\r\n            var start = 6;\r\n            var destination = 2;\r\n\r\n            var output = 28;\r\n\r\n            var res = new DistanceBetweenBusStopsSoln().DistanceBetweenBusStops(distance, start, destination);\r\n\r\n            Assert.AreEqual(output, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DistanceBetweenBusStopsSoln_Sixth()\r\n        {            \r\n            var distance = new int[] { 14, 13, 4, 7, 10, 17, 8, 3, 2, 13 };\r\n            var start = 2;\r\n            var destination = 9;\r\n\r\n            var output = 40;\r\n\r\n            var res = new DistanceBetweenBusStopsSoln().DistanceBetweenBusStops(distance, start, destination);\r\n\r\n            Assert.AreEqual(output, res);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e24dbbf3-b269-4dda-a4b3-f4319036bdb5-untitled-diagram-1.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"distance-between-bus-stops-array-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1644,"title":"Spiral Matrix - Array - Medium - LeetCode","imageUrl":"icon_37d1b470-7389-4e05-97b1-d92ce68eb1ba.jpg","dateCreated":"2020-10-27T07:19:38.491Z","dateModified":"2020-10-27T07:19:48.756Z","contributedBy":"sumitc91","content":"Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\nExample 1:\nInput:<br />[<br />&nbsp;[ 1, 2, 3 ],<br />&nbsp;[ 4, 5, 6 ],<br />&nbsp;[ 7, 8, 9 ]<br />]<br />Output: [1,2,3,6,9,8,7,4,5]<br />Example 2:\nInput:<br />[<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/37d1b470-7389-4e05-97b1-d92ce68eb1ba.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"spiral-matrix-array-medium-leetcode","total":0},{"id":1622,"title":"Rotate String - String - Easy - LeetCode","imageUrl":"icon_cfadbae1-5a57-4a8d-8e75-47f7f8493641.jpg","dateCreated":"2020-10-17T06:43:07.643Z","dateModified":"2020-10-17T06:43:14.01Z","contributedBy":"sumitc91","content":"We are given two strings, A and B.\nA shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/021208ce-72e5-4026-a526-0c8b482a8d72.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"rotate-string-string-easy-leetcode","total":0},{"id":1614,"title":"Fizz Buzz - List - Easy - LeetCode","imageUrl":"icon_6cbe0cee-fefe-40d0-8e0c-36270b4fa350.jpg","dateCreated":"2020-10-16T11:55:40.749Z","dateModified":"2020-10-16T11:55:50.939Z","contributedBy":"sumitc91","content":"Write a program that outputs the string representation of numbers from 1 to n.\nBut for multiples of three, it should output &ldquo;Fizz&rdquo; instead of the number and for the multiples of five output &ldquo;Buzz&rdquo;. For numbers which are multiples of both three and five output &ldquo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6cbe0cee-fefe-40d0-8e0c-36270b4fa350.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"fizz-buzz-list-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}