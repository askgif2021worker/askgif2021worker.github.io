{"id":1370,"title":"Relative Sort Array - Easy - LeetCode","imageUrl":"e187d7a5-3000-4803-888a-41cd36e75d23-array.png","dateCreated":"2020-06-18T13:34:27.382Z","dateModified":"2020-06-18T13:34:54.81Z","contributedBy":"AskGif","content":"<p>Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.</p>\r\n<p>Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.&nbsp; Elements that don't appear in arr2 should be placed at the end of arr1 in ascending order.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]</p>\r\n<p>Output: [2,2,2,1,4,3,3,9,6,7,19]</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>arr1.length, arr2.length &lt;= 1000</p>\r\n<p>0 &lt;= arr1[i], arr2[i] &lt;= 1000</p>\r\n<p>Each arr2[i] is distinct.</p>\r\n<p>Each arr2[i] is in arr1.</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class RelativeSortArraySoln\r\n    {\r\n        public int[] RelativeSortArray(int[] arr1, int[] arr2)\r\n        {\r\n            var map = new SortedDictionary&lt;int, int&gt;();\r\n            for (int i = 0; i &lt; arr1.Length; i++)\r\n            {\r\n                if (map.ContainsKey(arr1[i]))\r\n                {\r\n                    map[arr1[i]]++;\r\n                }\r\n                else\r\n                {\r\n                    map.Add(arr1[i], 1);\r\n                }\r\n            }\r\n\r\n            var res = new int[arr1.Length];\r\n            int idx = 0;\r\n            for (int i = 0; i &lt; arr2.Length; i++)\r\n            {\r\n                for(int j = 0; j &lt; map[arr2[i]]; j++)\r\n                {\r\n                    res[idx] = arr2[i];\r\n                    idx++;                    \r\n                }\r\n                map.Remove(arr2[i]);\r\n            }            \r\n\r\n            foreach (var item in map)\r\n            {\r\n                for (int i = 0; i &lt; item.Value; i++)\r\n                {\r\n                    res[idx] = item.Key;\r\n                    idx++;\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class RelativeSortArraySolnTests\r\n    {\r\n        [TestMethod]\r\n        public void RelativeSortArraySoln_First()\r\n        {\r\n            var arr1 = new int[] { 2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19 };\r\n            var arr2 = new int[] { 2, 1, 4, 3, 9, 6 };\r\n            var expected = new int[] { 2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19 };\r\n\r\n            var res = new RelativeSortArraySoln().RelativeSortArray(arr1, arr2);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void RelativeSortArraySoln_Second()\r\n        {\r\n            var arr1 = new int[] { 28, 6, 22, 8, 44, 17 };\r\n            var arr2 = new int[] { 22, 28, 8, 6 };\r\n            var expected = new int[] { 22, 28, 8, 6, 17, 44 };\r\n\r\n            var res = new RelativeSortArraySoln().RelativeSortArray(arr1, arr2);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        private void AreEqual(int[] res, int[] output)\r\n        {\r\n            Assert.AreEqual(res.Length, output.Length);\r\n            for (int i = 0; i &lt; res.Length; i++)\r\n            {\r\n                Assert.AreEqual(res[i], output[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e187d7a5-3000-4803-888a-41cd36e75d23-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"relative-sort-array-easy-leetcode","tags":[{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"array","slug":"array"},{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"},{"name":"c-sharp","slug":"c-sharp"},{"name":"आसान","slug":"easy"}],"recommendations":[{"id":1715,"title":"Determine if String Halves Are Alike - String - Easy - LeetCode","imageUrl":"icon_8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","dateCreated":"2021-01-08T09:24:14.63Z","dateModified":"2021-01-08T09:24:20.084Z","contributedBy":"sumitc91","content":"You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains upperca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"determine-if-string-halves-are-alike-string-easy-leetcode","total":0},{"id":1681,"title":"Circular Array Loop - Array - Medium - LeetCode","imageUrl":"icon_32298a91-8bd5-4e63-872d-105103726a20.jpg","dateCreated":"2020-11-19T09:05:08.281Z","dateModified":"2020-11-19T09:05:14.582Z","contributedBy":"sumitc91","content":"You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32298a91-8bd5-4e63-872d-105103726a20.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"circular-array-loop-array-medium-leetcode","total":0},{"id":1613,"title":"Rising Temperature - SQL - Easy - LeetCode","imageUrl":"icon_ac130fd7-abdd-4db8-9e17-cccc1048a681.jpg","dateCreated":"2020-10-16T11:40:45.374Z","dateModified":"2020-10-16T11:40:52.328Z","contributedBy":"sumitc91","content":"Table: Weather\n+---------------+---------+<br />| Column Name &nbsp; | Type &nbsp; &nbsp;|<br />+---------------+---------+<br />| id &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| int &nbsp; &nbsp; |<br />| recordDate &nbsp; &nbsp;| date &nbsp; &nbsp;|<br />| temperature &nbsp; | int &nbsp; &","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ac130fd7-abdd-4db8-9e17-cccc1048a681.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"rising-temperature-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}