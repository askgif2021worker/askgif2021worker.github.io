{"id":1377,"title":"Partition Array Into Three Parts With Equal Sum - Easy - LeetCode","imageUrl":"fedb54d8-0128-4a03-9534-84481f102f17-array.png","dateCreated":"2020-06-20T03:12:57.33Z","dateModified":"2020-06-20T03:13:15.176Z","contributedBy":"AskGif","content":"<p>Given an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.</p>\r\n<p>Formally, we can partition the array if we can find indexes i+1 &lt; j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: A = [0,2,1,-6,6,-7,9,1,2,0,1]</p>\r\n<p>Output: true</p>\r\n<p>Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: A = [0,2,1,-6,6,7,9,-1,2,0,1]</p>\r\n<p>Output: false</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: A = [3,3,6,5,-2,2,5,1,-9,4]</p>\r\n<p>Output: true</p>\r\n<p>Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4</p>\r\n<p>&nbsp;</p>\r\n<p>Constraints:</p>\r\n<p>3 &lt;= A.length &lt;= 50000</p>\r\n<p>-10^4 &lt;= A[i] &lt;= 10^4</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class CanThreePartsEqualSumSoln\r\n    {\r\n        public bool CanThreePartsEqualSum(int[] A)\r\n        {\r\n            var sum = 0;\r\n            for (int i = 0; i &lt; A.Length; i++)\r\n            {\r\n                sum += A[i];\r\n            }\r\n\r\n            if(sum%3 != 0)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            int parts = sum / 3;\r\n            int partsCount = 0;\r\n\r\n            int temp = 0;\r\n            for (int i = 0; i &lt; A.Length; i++)\r\n            {\r\n                temp += A[i];\r\n                if(temp == parts)\r\n                {\r\n                    temp = 0;\r\n                    partsCount++;\r\n                }\r\n            }\r\n\r\n            return temp == 0 &amp;&amp; partsCount &gt;= 3;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class CanThreePartsEqualSumSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void CanThreePartsEqualSumSoln_First()\r\n        {\r\n            var arr = new int[] { 0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1 };\r\n            var expected = true;\r\n\r\n            var res = new CanThreePartsEqualSumSoln().CanThreePartsEqualSum(arr);\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanThreePartsEqualSumSoln_Second()\r\n        {\r\n            var arr = new int[] { 0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1 };\r\n            var expected = false;\r\n\r\n            var res = new CanThreePartsEqualSumSoln().CanThreePartsEqualSum(arr);\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanThreePartsEqualSumSoln_Third()\r\n        {\r\n            var arr = new int[] { 3, 3, 6, 5, -2, 2, 5, 1, -9, 4 };\r\n            var expected = true;\r\n\r\n            var res = new CanThreePartsEqualSumSoln().CanThreePartsEqualSum(arr);\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanThreePartsEqualSumSoln_Fourth()\r\n        {\r\n            var arr = new int[] { 1, -1, 1, -1 };\r\n            var expected = false;\r\n\r\n            var res = new CanThreePartsEqualSumSoln().CanThreePartsEqualSum(arr);\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CanThreePartsEqualSumSoln_Fifth()\r\n        {\r\n            var arr = new int[] { 10, -10, 10, -10, 10, -10, 10, -10 };\r\n            var expected = true;\r\n\r\n            var res = new CanThreePartsEqualSumSoln().CanThreePartsEqualSum(arr);\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fedb54d8-0128-4a03-9534-84481f102f17-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"partition-array-into-three-parts-with-equal-sum-easy-leetcode","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"algorithm","slug":"algorithm"},{"name":"leetcode","slug":"leetcode"},{"name":"data-structure","slug":"data-structure"},{"name":"array","slug":"array"},{"name":"easy","slug":"easy"}],"recommendations":[{"id":1654,"title":"Search a 2D Matrix - Array - Medium - LeetCode","imageUrl":"icon_4ecd9aac-a00a-4a8f-ad7b-e7e4a75307ac.jpg","dateCreated":"2020-10-31T10:10:06.758Z","dateModified":"2020-10-31T10:10:15.329Z","contributedBy":"sumitc91","content":"Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right.<br />The first integer of each row is greater than the last integer of the previous row.<br />&nbsp;\nExample 1:</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4ecd9aac-a00a-4a8f-ad7b-e7e4a75307ac.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"search-a-2d-matrix-array-medium-leetcode","total":0},{"id":1640,"title":"Find First and Last Position of Element in Sorted Array - Array - Medium - LeetCode","imageUrl":"icon_4dd548b4-7f64-4384-8000-de99e5e3a765.jpg","dateCreated":"2020-10-25T13:25:33.524Z","dateModified":"2020-10-25T13:25:43.128Z","contributedBy":"sumitc91","content":"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nIf the target is not found in the array, return [-1, -1].\nFollow up: Could you write an algorithm with O(log n) runtime complexity?\n&nbsp;\nExample ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4dd548b4-7f64-4384-8000-de99e5e3a765.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"find-first-and-last-position-of-element-in-sorted-array-array-medium-leetcode","total":0},{"id":1598,"title":"Find the Town Judge - Tree - Easy - LeetCode","imageUrl":"icon_2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","dateCreated":"2020-10-14T09:05:56.984Z","dateModified":"2020-10-14T09:06:09.069Z","contributedBy":"sumitc91","content":"In a town, there are N people labelled from 1 to N. &nbsp;There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody.<br />Everybody (except for the town judge) trusts the town judge.<br />There is exactly one p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-town-judge-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}