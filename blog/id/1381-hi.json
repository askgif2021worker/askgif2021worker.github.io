{"id":1381,"title":"Find Common Characters - Array - Easy - LeetCode","imageUrl":"b81f63a8-c0b3-4aca-8e54-24e8ca5d19e4-array.png","dateCreated":"2020-06-20T17:06:51.132Z","dateModified":"2020-06-20T17:07:05.825Z","contributedBy":"AskGif","content":"<p>Given an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).&nbsp; For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.</p>\r\n<p>You may return the answer in any order.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: [\"bella\",\"label\",\"roller\"]</p>\r\n<p>Output: [\"e\",\"l\",\"l\"]</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: [\"cool\",\"lock\",\"cook\"]</p>\r\n<p>Output: [\"c\",\"o\"]</p>\r\n<p>&nbsp;</p>\r\n<p>Note:</p>\r\n<p>1 &lt;= A.length &lt;= 100</p>\r\n<p>1 &lt;= A[i].length &lt;= 100</p>\r\n<p>A[i][j] is a lowercase letter</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class CommonCharsSoln\r\n    {\r\n        public IList&lt;string&gt; CommonChars(string[] A)\r\n        {\r\n            var mapList = new List&lt;Dictionary&lt;char, int&gt;&gt;();\r\n            for (int i = 0; i &lt; A.Length; i++)\r\n            {\r\n                var map = new Dictionary&lt;char, int&gt;();\r\n                for (int j = 0; j &lt; A[i].Length; j++)\r\n                {\r\n                    if (map.ContainsKey(A[i][j]))\r\n                    {\r\n                        map[A[i][j]]++;\r\n                    }\r\n                    else\r\n                    {\r\n                        map.Add(A[i][j], 1);\r\n                    }\r\n                }\r\n\r\n                mapList.Add(map);\r\n            }\r\n\r\n            var res = new List&lt;string&gt;();\r\n\r\n            for (char i = 'a'; i &lt;= 'z'; i++)\r\n            {\r\n                int min = int.MaxValue;\r\n                for (int j = 0; j &lt; mapList.Count; j++)\r\n                {\r\n                    if (mapList[j].ContainsKey(i))\r\n                    {\r\n                        if (mapList[j][i] &lt; min)\r\n                        {\r\n                            min = mapList[j][i];\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        min = 0;\r\n                    }\r\n                }\r\n\r\n                if(min == int.MaxValue)\r\n                {\r\n                    min = 0;\r\n                }\r\n\r\n                for (int x = 0; x &lt; min; x++)\r\n                {\r\n                    res.Add(i.ToString());\r\n                }\r\n\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(m*n) Where m is the number of string and n is the size of the string.</p>\r\n<p>Space Complexity: O(m*n)</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class CommonCharsSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void CommonCharsSoln_First()\r\n        {\r\n            var arr = new string[] { \"bella\", \"label\", \"roller\" };\r\n            var expected = new Dictionary&lt;string, int&gt;();\r\n            expected.Add(\"e\",1);\r\n            expected.Add(\"l\", 2);\r\n\r\n            var res = new CommonCharsSoln().CommonChars(arr);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CommonCharsSoln_Second()\r\n        {\r\n            var arr = new string[] { \"cool\", \"lock\", \"cook\" };\r\n            var expected = new Dictionary&lt;string, int&gt;();\r\n            expected.Add(\"c\", 1);\r\n            expected.Add(\"o\", 1);\r\n\r\n            var res = new CommonCharsSoln().CommonChars(arr);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        private void AreEqual(Dictionary&lt;string, int&gt; expected, IList&lt;string&gt; res)\r\n        {\r\n            var map = new Dictionary&lt;string, int&gt;();\r\n            for (int i = 0; i &lt; res.Count; i++)\r\n            {\r\n                if (map.ContainsKey(res[i]))\r\n                {\r\n                    map[res[i]]++;\r\n                }\r\n                else\r\n                {\r\n                    map.Add(res[i], 1);\r\n                }\r\n            }\r\n\r\n            foreach (var item in map)\r\n            {\r\n                Assert.IsTrue(expected.ContainsKey(item.Key));\r\n                Assert.AreEqual(expected[item.Key], item.Value);\r\n            }\r\n\r\n            foreach (var item in expected)\r\n            {\r\n                Assert.IsTrue(map.ContainsKey(item.Key));\r\n                Assert.AreEqual(map[item.Key], item.Value);\r\n            }\r\n        }        \r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b81f63a8-c0b3-4aca-8e54-24e8ca5d19e4-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"find-common-characters-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"leetcode","slug":"leetcode"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"आसान","slug":"easy"}],"recommendations":[{"id":1705,"title":"Valid Triangle Number - Array - Medium - LeetCode","imageUrl":"icon_1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","dateCreated":"2020-11-21T14:33:10.794Z","dateModified":"2020-11-21T14:33:17.755Z","contributedBy":"sumitc91","content":"Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.<br />Example 1:<br />Input: [2,2,3,4]<br />Output: 3<br />Explanation:<br />Valid combinations are:&nbsp;<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"valid-triangle-number-array-medium-leetcode","total":0},{"id":1643,"title":"Rotate Image - Array - Medium - LeetCode","imageUrl":"icon_1aaf92bb-a6af-4473-a7da-686247f16016.jpg","dateCreated":"2020-10-26T13:36:30.021Z","dateModified":"2020-10-26T13:36:36.406Z","contributedBy":"sumitc91","content":"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1aaf92bb-a6af-4473-a7da-686247f16016.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"rotate-image-array-medium-leetcode","total":0},{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"A binary tree is univalued if every node in the tree has the same value.\nReturn true if and only if the given tree is univalued.\n&nbsp;\nExample 1:\n<br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:\n<br />Input: [2,2,2,5,2]<br />Output: false<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"univalued-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}