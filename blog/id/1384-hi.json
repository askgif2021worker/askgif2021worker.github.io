{"id":1384,"title":"Available Captures for Rook - Array - Easy - LeetCode","imageUrl":"3761725f-f78c-44a3-a182-f7ba8b012060-array.png","dateCreated":"2020-06-21T06:56:52.353Z","dateModified":"2020-06-21T06:57:20.287Z","contributedBy":"AskGif","content":"<p>On an 8 x 8 chessboard, there is one white rook.&nbsp; There also may be empty squares, white bishops, and black pawns.&nbsp; These are given as characters 'R', '.', 'B', and 'p' respectively. Uppercase characters represent white pieces, and lowercase characters represent black pieces.</p>\r\n<p>The rook moves as in the rules of Chess: it chooses one of four cardinal directions (north, east, west, and south), then moves in that direction until it chooses to stop, reaches the edge of the board, or captures an opposite colored pawn by moving to the same square it occupies.&nbsp; Also, rooks cannot move into the same square as other friendly bishops.</p>\r\n<p>Return the number of pawns the rook can capture in one move.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]</p>\r\n<p>Output: 3</p>\r\n<p>Explanation:&nbsp;</p>\r\n<p>In this example the rook is able to capture all the pawns.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]</p>\r\n<p>Output: 0</p>\r\n<p>Explanation:&nbsp;</p>\r\n<p>Bishops are blocking the rook to capture any pawn.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]</p>\r\n<p>Output: 3</p>\r\n<p>Explanation:&nbsp;</p>\r\n<p>The rook can capture the pawns at positions b5, d6 and f5.</p>\r\n<p>&nbsp;</p>\r\n<p>Note:</p>\r\n<p>board.length == board[i].length == 8</p>\r\n<p>board[i][j] is either 'R', '.', 'B', or 'p'</p>\r\n<p>There is exactly one cell with board[i][j] == 'R'</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class NumRookCapturesSoln\r\n    {\r\n        public int NumRookCaptures(char[][] board)\r\n        {\r\n            var whiteRook = 'R';            \r\n\r\n            for (int i = 0; i &lt; board.Length; i++)\r\n            {\r\n                for (int j = 0; j &lt; board[i].Length; j++)\r\n                {\r\n                    //check for White Rook\r\n                    if(board[i][j]== whiteRook)\r\n                    {\r\n                        return CalculatePawnsCount(board, i, j);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return 0;\r\n        }\r\n\r\n        private int CalculatePawnsCount(char[][] board, int row, int column)\r\n        {\r\n            var whiteBishop = 'B';\r\n            var blackPawn = 'p';\r\n            var empty = '.';\r\n\r\n            int count = 0;\r\n\r\n            //UP Count\r\n            for (int i = row-1; i &gt;= 0 &amp;&amp; row != 0; i--)\r\n            {\r\n                if(board[i][column] != empty)\r\n                {\r\n                    if( board[i][column] == blackPawn)\r\n                    {\r\n                        count += 1;                        \r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //Down Count\r\n            for (int i = row + 1; i &lt; board.Length &amp;&amp; row != board.Length-1; i++)\r\n            {\r\n                if (board[i][column] != empty)\r\n                {\r\n                    if (board[i][column] == blackPawn)\r\n                    {\r\n                        count += 1;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //Left Count\r\n            for (int i = column - 1; i &gt;= 0 &amp;&amp; column != 0; i--)\r\n            {\r\n                if (board[row][i] != empty)\r\n                {\r\n                    if (board[row][i] == blackPawn)\r\n                    {\r\n                        count += 1;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //Right Count\r\n            for (int i = column + 1; i &lt; board[row].Length &amp;&amp; column != board[row].Length-1; i++)\r\n            {\r\n                if (board[row][i] != empty)\r\n                {\r\n                    if (board[row][i] == blackPawn)\r\n                    {\r\n                        count += 1;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(m*n) Where m and n are rows and columns of the matrix</p>\r\n<p>Space Complexity: O(1)</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class NumRookCapturesSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void NumRookCapturesSoln_First()\r\n        {\r\n            var board = new string[,]{\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"p\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"R\", \".\", \".\", \".\", \"p\"},\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"p\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                { \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"}\r\n            };\r\n            var expected = 3;\r\n\r\n            var res = new NumRookCapturesSoln().NumRookCaptures(ArrayMapper(board));\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void NumRookCapturesSoln_Second()\r\n        {\r\n            var board = new string[,]{\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \"p\", \"p\", \"p\", \"p\", \"p\", \".\", \".\"},\r\n                {\".\", \"p\", \"p\", \"B\", \"p\", \"p\", \".\", \".\"},\r\n                {\".\", \"p\", \"B\", \"R\", \"B\", \"p\", \".\", \".\"},\r\n                {\".\", \"p\", \"p\", \"B\", \"p\", \"p\", \".\", \".\"},\r\n                {\".\", \"p\", \"p\", \"p\", \"p\", \"p\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                { \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"}\r\n            };\r\n            var expected = 0;\r\n\r\n            var res = new NumRookCapturesSoln().NumRookCaptures(ArrayMapper(board));\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void NumRookCapturesSoln_Third()\r\n        {\r\n            var board = new string[,]{\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"p\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"p\", \".\", \".\", \".\", \".\"},\r\n                {\"p\", \"p\", \".\", \"R\", \".\", \"p\", \"B\", \".\"},\r\n                {\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"B\", \".\", \".\", \".\", \".\"},\r\n                {\".\", \".\", \".\", \"p\", \".\", \".\", \".\", \".\"},\r\n                { \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"}\r\n            };\r\n            var expected = 3;\r\n\r\n            var res = new NumRookCapturesSoln().NumRookCaptures(ArrayMapper(board));\r\n            Assert.AreEqual(expected, res);\r\n        }\r\n\r\n        private char[][] ArrayMapper(string[,] matrix)\r\n        {\r\n            var arr = new char[matrix.GetLength(0)][];\r\n            for (int i = 0; i &lt; matrix.GetLength(0); i++)\r\n            {\r\n                arr[i] = new char[matrix.GetLength(1)];\r\n                for (int j = 0; j &lt; matrix.GetLength(1); j++)\r\n                {\r\n                    arr[i][j] = matrix[i, j].ToCharArray()[0];\r\n                }\r\n            }\r\n\r\n            return arr;\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3761725f-f78c-44a3-a182-f7ba8b012060-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"available-captures-for-rook-array-easy-leetcode","tags":[{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"algorithm","slug":"algorithm"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"आसान","slug":"easy"}],"recommendations":[{"id":1724,"title":"Maximum Number of Balls in a Box - Maths - Easy - LeetCode","imageUrl":"icon_2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","dateCreated":"2021-02-13T12:35:08.09Z","dateModified":"2021-02-13T12:35:13.637Z","contributedBy":"sumitc91","content":"You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the s","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"slug":"maximum-number-of-balls-in-a-box-maths-easy-leetcode","total":0},{"id":1723,"title":"Beautiful Arrangement II - Maths - Medium - LeetCode","imageUrl":"icon_b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","dateCreated":"2021-01-26T13:09:40.384Z","dateModified":"2021-01-26T13:09:46.827Z","contributedBy":"sumitc91","content":"Given two integers n and k, you need to construct a list that contains n different positive integers ranging from 1 to n and obeys the following requirement:<br />Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"},{"name":"मध्यम","slug":"medium"}],"slug":"beautiful-arrangement-ii-maths-medium-leetcode","total":0},{"id":1719,"title":"Decode XORed Array - Array - Easy - LeetCode","imageUrl":"icon_e7567a26-e981-4e66-9863-f88f7de7e66d.jpg","dateCreated":"2021-01-10T05:22:37.138Z","dateModified":"2021-01-10T05:22:41.53Z","contributedBy":"sumitc91","content":"There is a hidden integer array arr that consists of n non-negative integers.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].\nYou are given the encoded array. Yo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e7567a26-e981-4e66-9863-f88f7de7e66d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"decode-xored-array-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}