{"id":1386,"title":"Add to Array-Form of Integer - Easy - LeetCode","imageUrl":"b1f31204-fff3-4b3b-bdbf-ed63f1f0a11d-array.png","dateCreated":"2020-06-21T15:25:19.108Z","dateModified":"2020-06-21T15:25:32.991Z","contributedBy":"AskGif","content":"<p>For a non-negative integer X, the array-form of X is an array of its digits in left to right order.&nbsp; For example, if X = 1231, then the array form is [1,2,3,1].</p>\r\n<p>Given the array-form A of a non-negative integer X, return the array-form of the integer X+K.</p>\r\n<p>&nbsp;</p>\r\n<p>Example 1:</p>\r\n<p>Input: A = [1,2,0,0], K = 34</p>\r\n<p>Output: [1,2,3,4]</p>\r\n<p>Explanation: 1200 + 34 = 1234</p>\r\n<p>&nbsp;</p>\r\n<p>Example 2:</p>\r\n<p>Input: A = [2,7,4], K = 181</p>\r\n<p>Output: [4,5,5]</p>\r\n<p>Explanation: 274 + 181 = 455</p>\r\n<p>&nbsp;</p>\r\n<p>Example 3:</p>\r\n<p>Input: A = [2,1,5], K = 806</p>\r\n<p>Output: [1,0,2,1]</p>\r\n<p>Explanation: 215 + 806 = 1021</p>\r\n<p>&nbsp;</p>\r\n<p>Example 4:</p>\r\n<p>Input: A = [9,9,9,9,9,9,9,9,9,9], K = 1</p>\r\n<p>Output: [1,0,0,0,0,0,0,0,0,0,0]</p>\r\n<p>Explanation: 9999999999 + 1 = 10000000000</p>\r\n<p>&nbsp;</p>\r\n<p>Noteï¼š</p>\r\n<p>1 &lt;= A.length &lt;= 10000</p>\r\n<p>0 &lt;= A[i] &lt;= 9</p>\r\n<p>0 &lt;= K &lt;= 10000</p>\r\n<p>If A.length &gt; 1, then A[0] != 0</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeetCode.AskGif.Easy.Array\r\n{\r\n    public class AddToArrayFormSoln\r\n    {\r\n        public IList&lt;int&gt; AddToArrayForm(int[] A, int K)\r\n        {           \r\n            var res = new List&lt;int&gt;();\r\n            int i = A.Length - 1;\r\n            int carry = 0;\r\n            int a = 0;\r\n            int b = 0;\r\n            int num = 0;\r\n            while (true)\r\n            {\r\n                a = 0;\r\n                b = 0;\r\n\r\n                if (i &lt; 0 &amp;&amp; K &lt;= 0)\r\n                {\r\n                    break;\r\n                }\r\n\r\n                if (i &gt;= 0)\r\n                {\r\n                    a = A[i];                    \r\n                }\r\n                i--;\r\n\r\n                if (K &gt; 0)\r\n                {\r\n                    b = K % 10;\r\n                    K = K / 10;\r\n                }\r\n\r\n                num = a + b + carry;\r\n                if (num &gt; 9)\r\n                {\r\n                    res.Add(num % 10);\r\n                    carry = num / 10;\r\n                }\r\n                else\r\n                {\r\n                    res.Add(num);\r\n                    carry = 0;\r\n                }                                \r\n            }\r\n\r\n            if(carry &gt; 0)\r\n            {\r\n                res.Add(carry);\r\n            }\r\n\r\n            res.Reverse();\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n) to store the result.</p>\r\n<p>&nbsp;</p>\r\n<p>Unit Tests:</p>\r\n<pre class=\"language-csharp\"><code>using LeetCode.AskGif.Easy.Array;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace CodingUnitTest.Easy.Array\r\n{\r\n    [TestClass]\r\n    public class AddToArrayFormSolnTests\r\n    {\r\n        [TestMethod]\r\n        public void AddToArrayFormSoln_First()\r\n        {\r\n            var arr = new int[] { 1, 2, 0, 0 };\r\n            var K = 34;\r\n            var expected = new int[] { 1, 2, 3, 4 };\r\n\r\n            var res = new AddToArrayFormSoln().AddToArrayForm(arr, K);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void AddToArrayFormSoln_Second()\r\n        {\r\n            var arr = new int[] { 2, 7, 4 };\r\n            var K = 181;\r\n            var expected = new int[] { 4, 5, 5 };\r\n\r\n            var res = new AddToArrayFormSoln().AddToArrayForm(arr, K);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void AddToArrayFormSoln_Third()\r\n        {\r\n            var arr = new int[] { 2, 1, 5 };\r\n            var K = 806;\r\n            var expected = new int[] { 1, 0, 2, 1 };\r\n\r\n            var res = new AddToArrayFormSoln().AddToArrayForm(arr, K);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void AddToArrayFormSoln_Fourth()\r\n        {\r\n            var arr = new int[] { 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 };\r\n            var K = 1;\r\n            var expected = new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\r\n\r\n            var res = new AddToArrayFormSoln().AddToArrayForm(arr, K);\r\n            AreEqual(expected, res);\r\n        }\r\n\r\n        private void AreEqual(int[] res, IList&lt;int&gt; output)\r\n        {\r\n            Assert.AreEqual(res.Length, output.Count);\r\n            for (int i = 0; i &lt; res.Length; i++)\r\n            {\r\n                Assert.AreEqual(res[i], output[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b1f31204-fff3-4b3b-bdbf-ed63f1f0a11d-array.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"add-to-array-form-of-integer-easy-leetcode","tags":[{"name":"easy","slug":"easy"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"algorithm","slug":"algorithm"}],"recommendations":[{"id":1675,"title":"Majority Element II - Array - Medium - LeetCode","imageUrl":"icon_17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","dateCreated":"2020-11-18T12:22:28.829Z","dateModified":"2020-11-18T12:22:35.442Z","contributedBy":"sumitc91","content":"Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n&nbsp;\nExample 1:\nInput: nums = [3,2,3]<br />Output: [3]<br />Example 2:\nInput: nums =","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"majority-element-ii-array-medium-leetcode","total":0},{"id":1652,"title":"Minimum Path Sum - Array - Medium - LeetCode","imageUrl":"icon_d9f5ff7a-791f-41b0-89b0-f12760706d99.jpg","dateCreated":"2020-10-31T09:04:08.041Z","dateModified":"2020-10-31T09:04:16.725Z","contributedBy":"sumitc91","content":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample:\nInput:<br />[<br />&nbsp; [1,3,1],<br />&nbsp; [1,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d9f5ff7a-791f-41b0-89b0-f12760706d99.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"minimum-path-sum-array-medium-leetcode","total":0},{"id":1634,"title":"3Sum Closest - Array - Medium - LeetCode","imageUrl":"icon_981f57b3-a4c6-4c16-baeb-a49e75fe9497.jpg","dateCreated":"2020-10-23T07:22:34.29Z","dateModified":"2020-10-23T07:22:55.266Z","contributedBy":"sumitc91","content":"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n&nbsp;\nExample 1:\nInput: nums = [-1,2,1,-4], targ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/981f57b3-a4c6-4c16-baeb-a49e75fe9497.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"3sum-closest-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}