{"id":1388,"title":"Longest Palindrome Subsequence - Dynamic Porgramming","imageUrl":"icon_c6e29a49-d3d4-4723-abd4-2d3154887bb7.png","dateCreated":"2020-08-29T09:29:43.546Z","dateModified":"2020-08-29T10:56:40.366Z","contributedBy":"sumitc91","content":"<p>Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.</p>\n<p>Example 1:<br />Input:<br />\"bbbab\"<br />Output:<br />4<br />One possible longest palindromic subsequence is \"bbbb\".<br />&nbsp;<br />Example 2:<br />Input:<br />\"cbbd\"<br />Output:<br />2<br />One possible longest palindromic subsequence is \"bb\".&nbsp;</p>\n<p>Constraints:<br />1 &lt;= s.length &lt;= 1000<br />s consists only of lowercase English letters.</p>\n<pre class=\"language-csharp\"><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace LeetCode.AskGif.DP\n{\n    public class LongestPalindromeSubseqSoln\n    {\n        Dictionary&lt;string, int&gt; map = new Dictionary&lt;string, int&gt;();\n        public int LongestPalindromeSubseq(string s)\n        {            \n            return LongestPalindromeSubseqRecursion(s, 0, s.Length-1);\n        }\n\n        private int LongestPalindromeSubseqRecursion(string s, int start, int end)\n        {\n            if (map.ContainsKey(GetKey(start, end))){\n                return map[GetKey(start, end)];\n            }\n\n            if(start == end)\n            {\n                return 1;\n            }\n\n            if (s[start] == s[end])\n            {\n                if(start + 1 == end)\n                {\n                    return 2;\n                }\n\n                var res = 2 + LongestPalindromeSubseqRecursion(s, start + 1, end - 1);\n                map.Add(GetKey(start, end), res);\n                return res;\n            }\n            else\n            {\n                var res = Math.Max(\n                    LongestPalindromeSubseqRecursion(s, start+1, end),\n                    LongestPalindromeSubseqRecursion(s,start,end-1)\n                    );\n                map.Add(GetKey(start, end), res);\n                return res;\n            }\n        }\n\n        private string GetKey(int start, int end)\n        {\n            return $\"{start}-{end}\";\n        }\n    }\n}\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c6e29a49-d3d4-4723-abd4-2d3154887bb7.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"longest-palindrome-subsequence-dynamic-porgramming","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1716,"title":"Maximum Units on a Truck - Array - Easy - LeetCode","imageUrl":"icon_3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","dateCreated":"2021-01-08T09:45:52.965Z","dateModified":"2021-01-08T09:46:00.078Z","contributedBy":"sumitc91","content":"You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nnumberOfBoxesi is the number of boxes of type i.<br />numberOfUnitsPerBoxi is the number of units in each box of the type i.<br />You ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"maximum-units-on-a-truck-array-easy-leetcode","total":0},{"id":1663,"title":"Defuse the Bomb - Array - Easy - LeetCode","imageUrl":"icon_e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","dateCreated":"2020-11-15T15:48:36.584Z","dateModified":"2020-11-15T15:48:43.094Z","contributedBy":"sumitc91","content":"You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\nIf k &gt; 0, replace the ith number with th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"defuse-the-bomb-array-easy-leetcode","total":0},{"id":1661,"title":"Get Maximum in Generated Array - Array - Easy - LeetCode","imageUrl":"icon_6268cd06-1d1b-409d-9665-cbe40d65c81d.jpg","dateCreated":"2020-11-08T08:10:40.511Z","dateModified":"2020-11-08T08:10:45.589Z","contributedBy":"sumitc91","content":"You are given an integer n. An array nums of length n + 1 is generated in the following way:\nnums[0] = 0<br />nums[1] = 1<br />nums[2 * i] = nums[i] when 2 &lt;= 2 * i &lt;= n<br />nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 &lt;= 2 * i + 1 &lt;= n<br />Return the maximum integer in the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6268cd06-1d1b-409d-9665-cbe40d65c81d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"get-maximum-in-generated-array-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}