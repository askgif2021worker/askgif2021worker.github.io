{"id":1389,"title":"Remove Duplicates from Sorted Array - Array - Easy - LeetCode","imageUrl":"icon_3c7b6123-b164-4725-9479-59fbc7616095.png","dateCreated":"2020-09-24T12:49:58.076Z","dateModified":"2020-09-24T12:50:31.499Z","contributedBy":"sumitc91","content":"<p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<p>Example 1:</p>\n<p>Given nums = [1,1,2],</p>\n<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</p>\n<p>It doesn't matter what you leave beyond the returned length.<br />Example 2:</p>\n<p>Given nums = [0,0,1,1,1,2,2,3,3,4],</p>\n<p>Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</p>\n<p>It doesn't matter what values are set beyond the returned length.<br />Clarification:</p>\n<p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:</p>\n<p>// nums is passed in by reference. (i.e., without making a copy)<br />int len = removeDuplicates(nums);</p>\n<p>// any modification to nums in your function would be known by the caller.<br />// using the length returned by your function, it prints the first len elements.<br />for (int i = 0; i &lt; len; i++) {<br />&nbsp; &nbsp; print(nums[i]);<br />}</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        if(nums.Length == 0){\n            return 0;\n        }\n        \n        int prev = nums[0];\n        int j = 1;\n        for(int i = 1;i&lt;nums.Length;i++){\n            if(nums[i] != prev){\n                prev = nums[i];\n                nums[j]=prev;\n                j++;\n            }\n        }\n        \n        return j;\n    }\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3c7b6123-b164-4725-9479-59fbc7616095.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"remove-duplicates-from-sorted-array-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1705,"title":"Valid Triangle Number - Array - Medium - LeetCode","imageUrl":"icon_1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","dateCreated":"2020-11-21T14:33:10.794Z","dateModified":"2020-11-21T14:33:17.755Z","contributedBy":"sumitc91","content":"Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.<br />Example 1:<br />Input: [2,2,3,4]<br />Output: 3<br />Explanation:<br />Valid combinations are:&nbsp;<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"valid-triangle-number-array-medium-leetcode","total":0},{"id":1680,"title":"Find All Duplicates in an Array - Array - Medium - LeetCode","imageUrl":"icon_5a6c2b89-77d6-4d5e-978b-35b19f85ed66.jpg","dateCreated":"2020-11-19T07:32:23.312Z","dateModified":"2020-11-19T07:32:30.12Z","contributedBy":"sumitc91","content":"Given an array of integers, 1 &le; a[i] &le; n (n = size of array), some elements appear twice and others appear once.\nFind all the elements that appear twice in this array.\nCould you do it without extra space and in O(n) runtime?\nExample:<br />Input:<br />[4,3,2,7,8,2,3,1]</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5a6c2b89-77d6-4d5e-978b-35b19f85ed66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"find-all-duplicates-in-an-array-array-medium-leetcode","total":0},{"id":1654,"title":"Search a 2D Matrix - Array - Medium - LeetCode","imageUrl":"icon_4ecd9aac-a00a-4a8f-ad7b-e7e4a75307ac.jpg","dateCreated":"2020-10-31T10:10:06.758Z","dateModified":"2020-10-31T10:10:15.329Z","contributedBy":"sumitc91","content":"Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right.<br />The first integer of each row is greater than the last integer of the previous row.<br />&nbsp;\nExample 1:</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4ecd9aac-a00a-4a8f-ad7b-e7e4a75307ac.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"search-a-2d-matrix-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}