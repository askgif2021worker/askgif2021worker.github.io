{"id":1391,"title":"Remove Element - Array - Easy - LeetCode","imageUrl":"icon_92cdc541-41a9-498b-8b3c-29fbf26c4513.jpg","dateCreated":"2020-09-25T06:40:40.48Z","dateModified":"2020-09-25T06:41:34.366Z","contributedBy":"sumitc91","content":"<p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<p>The order of elements can be changed. It doesn't matter what you leave beyond the new length.</p>\n<p>Example 1:</p>\n<p>Given nums = [3,2,2,3], val = 3,</p>\n<p>Your function should return length = 2, with the first two elements of nums being 2.</p>\n<p>It doesn't matter what you leave beyond the returned length.<br />Example 2:</p>\n<p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p>\n<p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p>\n<p>Note that the order of those five elements can be arbitrary.</p>\n<p>It doesn't matter what values are set beyond the returned length.<br />Clarification:</p>\n<p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:</p>\n<p>// nums is passed in by reference. (i.e., without making a copy)<br />int len = removeElement(nums, val);</p>\n<p>// any modification to nums in your function would be known by the caller.<br />// using the length returned by your function, it prints the first len elements.<br />for (int i = 0; i &lt; len; i++) {<br />&nbsp; &nbsp; print(nums[i]);<br />}</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int RemoveElement(int[] nums, int val) {\n        int j=0;\n        for(int i=0;i&lt;nums.Length;i++){\n            if(nums[i]!=val){\n                nums[j]=nums[i];\n                j++;\n            }\n        }\n        \n        return j;\n    }\n}</code></pre>\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/92cdc541-41a9-498b-8b3c-29fbf26c4513.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"remove-element-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1660,"title":"Check Array Formation Through Concatenation - Array - Easy - LeetCode","imageUrl":"icon_85392267-2028-4c02-8f8a-96c1d2368591.jpg","dateCreated":"2020-11-03T06:50:35.06Z","dateModified":"2020-11-03T06:50:53.205Z","contributedBy":"sumitc91","content":"You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].\nRetur","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/85392267-2028-4c02-8f8a-96c1d2368591.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"check-array-formation-through-concatenation-array-easy-leetcode","total":0},{"id":1659,"title":"बढ़ती आवृत्ति द्वारा क्रमबद्ध सरणी - सरणी - मध्यम - LeetCode","imageUrl":"icon_0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","dateCreated":"2020-11-03T05:02:58.417Z","dateModified":"2020-11-03T05:10:52.862Z","contributedBy":"sumitc91","content":"Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.\n&nbsp;\nExample 1:\nInput: nums = [1,1,2,2,2,3]<br />Output: [3,1","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"sort-array-by-increasing-frequency-array-medium-leetcode","total":0},{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"A binary tree is univalued if every node in the tree has the same value.\nReturn true if and only if the given tree is univalued.\n&nbsp;\nExample 1:\n<br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:\n<br />Input: [2,2,2,5,2]<br />Output: false<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"univalued-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}