{"id":1420,"title":"1-bit and 2-bit Characters - Array - Easy - LeetCode","imageUrl":"icon_aa58794c-975d-4cf0-819c-c0e03f996815.jpg","dateCreated":"2020-09-26T11:04:45.061Z","dateModified":"2020-09-26T11:06:19.705Z","contributedBy":"sumitc91","content":"<p>We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).</p>\n<p>Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.</p>\n<p>Example 1:<br />Input:&nbsp;<br />bits = [1, 0, 0]<br />Output: True<br />Explanation:&nbsp;<br />The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.<br />Example 2:<br />Input:&nbsp;<br />bits = [1, 1, 1, 0]<br />Output: False<br />Explanation:&nbsp;<br />The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.<br />Note:</p>\n<p>1 &lt;= len(bits) &lt;= 1000.<br />bits[i] is always 0 or 1.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool IsOneBitCharacter(int[] bits) {\n        return Helper(bits,0);\n    }\n    \n    private bool Helper(int[] bits, int start){\n        if(start == bits.Length-1){\n            return bits[start]==0;\n        }\n        if(start &gt; bits.Length-1){\n            return false;\n        }\n        \n        var valid1 = false;\n        if(bits[start]==1){\n            valid1 = Helper(bits,start+2);\n        }\n        \n        var valid2 = false;\n        if(bits[start]==0){\n            valid2 = Helper(bits,start+1);\n        }\n        \n        return valid1||valid2;\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(2^n) since it is a recursive call ( we can optimize it using Dynamic Programming)</p>\n<p>Space Complexity: O(n) for stack trace</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/aa58794c-975d-4cf0-819c-c0e03f996815.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"1-bit-and-2-bit-characters-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1705,"title":"Valid Triangle Number - Array - Medium - LeetCode","imageUrl":"icon_1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","dateCreated":"2020-11-21T14:33:10.794Z","dateModified":"2020-11-21T14:33:17.755Z","contributedBy":"sumitc91","content":"Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.<br />Example 1:<br />Input: [2,2,3,4]<br />Output: 3<br />Explanation:<br />Valid combinations are:&nbsp;<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"valid-triangle-number-array-medium-leetcode","total":0},{"id":1664,"title":"Design an Ordered Stream - Array - Easy - LeetCode","imageUrl":"icon_ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","dateCreated":"2020-11-16T03:10:10.642Z","dateModified":"2020-11-16T03:10:15.886Z","contributedBy":"sumitc91","content":"There are n (id, value) pairs, where id is an integer between 1 and n and value is a string. No two pairs have the same id.\nDesign a stream that takes the n pairs in an arbitrary order, and returns the values over several calls in increasing order of their ids.\nImplement the Ordered","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-an-ordered-stream-array-easy-leetcode","total":0},{"id":1644,"title":"Spiral Matrix - Array - Medium - LeetCode","imageUrl":"icon_37d1b470-7389-4e05-97b1-d92ce68eb1ba.jpg","dateCreated":"2020-10-27T07:19:38.491Z","dateModified":"2020-10-27T07:19:48.756Z","contributedBy":"sumitc91","content":"Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\nExample 1:\nInput:<br />[<br />&nbsp;[ 1, 2, 3 ],<br />&nbsp;[ 4, 5, 6 ],<br />&nbsp;[ 7, 8, 9 ]<br />]<br />Output: [1,2,3,6,9,8,7,4,5]<br />Example 2:\nInput:<br />[<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/37d1b470-7389-4e05-97b1-d92ce68eb1ba.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"spiral-matrix-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}