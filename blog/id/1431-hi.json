{"id":1431,"title":"X of a Kind in a Deck of Cards - Array - Easy - LeetCode","imageUrl":"icon_e6730944-b719-4357-b365-d1ab49f9c11b.jpg","dateCreated":"2020-09-27T06:44:35.409Z","dateModified":"2020-09-27T06:44:48.674Z","contributedBy":"sumitc91","content":"<p>In a deck of cards, each card has an integer written on it.</p>\n<p>Return true if and only if you can choose X &gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:</p>\n<p>Each group has exactly X cards.<br />All the cards in each group have the same integer.<br />&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: deck = [1,2,3,4,4,3,2,1]<br />Output: true<br />Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].<br />Example 2:</p>\n<p>Input: deck = [1,1,1,2,2,2,3,3]<br />Output: false&acute;<br />Explanation: No possible partition.<br />Example 3:</p>\n<p>Input: deck = [1]<br />Output: false<br />Explanation: No possible partition.<br />Example 4:</p>\n<p>Input: deck = [1,1]<br />Output: true<br />Explanation: Possible partition [1,1].<br />Example 5:</p>\n<p>Input: deck = [1,1,2,2,2,2]<br />Output: true<br />Explanation: Possible partition [1,1],[2,2],[2,2].<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= deck.length &lt;= 10^4<br />0 &lt;= deck[i] &lt; 10^4</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool HasGroupsSizeX(int[] deck) {\n        if(deck.Length&lt;=1){\n            return false;\n        }\n        \n        var map = new Dictionary&lt;int,int&gt;();\n        for(int i=0;i&lt;deck.Length;i++){\n            if(map.ContainsKey(deck[i])){\n                map[deck[i]]++;\n            }\n            else{\n                map.Add(deck[i],1);\n            }\n        }\n                        \n        int res = 0;\n        foreach(var item in map){\n            res = gcd(item.Value,res);\n        }\n        return res&gt;1;\n    }\n    \n    private int gcd(int a, int b){\n        if(b&gt;0){\n            return gcd(b,a%b);\n        }\n        \n        return a;\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e6730944-b719-4357-b365-d1ab49f9c11b.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"x-of-a-kind-in-a-deck-of-cards-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1724,"title":"Maximum Number of Balls in a Box - Maths - Easy - LeetCode","imageUrl":"icon_2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","dateCreated":"2021-02-13T12:35:08.09Z","dateModified":"2021-02-13T12:35:13.637Z","contributedBy":"sumitc91","content":"You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the s","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"slug":"maximum-number-of-balls-in-a-box-maths-easy-leetcode","total":0},{"id":1606,"title":"Combine Two Tables - Sql - Easy - LeetCode","imageUrl":"icon_88b1c8bf-74b6-45d3-8314-cbd4ac4ead29.jpg","dateCreated":"2020-10-16T05:53:11.599Z","dateModified":"2020-10-16T05:53:36.309Z","contributedBy":"sumitc91","content":"Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:\nTable: Person\n+-------------+---------+<br />| Column Name | Type &nbsp; &nbsp;|<br />+-------------+---------+<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5b6e96ac-0881-4845-bd1a-6f2f1cbcf99e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"combine-two-tables-sql-easy-leetcode","total":0},{"id":1598,"title":"Find the Town Judge - Tree - Easy - LeetCode","imageUrl":"icon_2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","dateCreated":"2020-10-14T09:05:56.984Z","dateModified":"2020-10-14T09:06:09.069Z","contributedBy":"sumitc91","content":"In a town, there are N people labelled from 1 to N. &nbsp;There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody.<br />Everybody (except for the town judge) trusts the town judge.<br />There is exactly one p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-town-judge-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}