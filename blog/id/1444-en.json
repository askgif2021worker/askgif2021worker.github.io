{"id":1444,"title":"Sum of All Odd Length Subarrays - Array - Easy - LeetCode","imageUrl":"icon_04628ff7-990c-4a59-aec3-6d7de8683fb2.jpg","dateCreated":"2020-09-27T13:45:22.315Z","dateModified":"2020-09-27T13:45:38.843Z","contributedBy":"sumitc91","content":"<p>Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.</p>\n<p>A subarray is a contiguous subsequence of the array.</p>\n<p>Return the sum of all odd-length subarrays of arr.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: arr = [1,4,2,5,3]<br />Output: 58<br />Explanation: The odd-length subarrays of arr and their sums are:<br />[1] = 1<br />[4] = 4<br />[2] = 2<br />[5] = 5<br />[3] = 3<br />[1,4,2] = 7<br />[4,2,5] = 11<br />[2,5,3] = 10<br />[1,4,2,5,3] = 15<br />If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58<br />Example 2:</p>\n<p>Input: arr = [1,2]<br />Output: 3<br />Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.<br />Example 3:</p>\n<p>Input: arr = [10,11,12]<br />Output: 66<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= arr.length &lt;= 100<br />1 &lt;= arr[i] &lt;= 1000</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int SumOddLengthSubarrays(int[] arr) {\n        int res = 0;\n        var len = arr.Length;\n        for (int i = 0; i &lt; len; ++i) {\n            res += ((i + 1) * (len - i) + 1) / 2 * arr[i];\n        }\n        return res;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>\n<p>&nbsp;</p>\n<p>Consider the subarray that contains A[i],<br />we can take 0,1,2..,i elements on the left,<br />from A[0] to A[i],<br />we have i + 1 choices.</p>\n<p>we can take 0,1,2..,n-1-i elements on the right,<br />from A[i] to A[n-1],<br />we have n - i choices.</p>\n<p>In total, there are (i + 1) * (n - i) subarrays, that contains A[i].<br />And there are ((i + 1) * (n - i) + 1) / 2 subarrays with odd length, that contains A[i].<br />A[i] will be counted ((i + 1) * (n - i) + 1) / 2 times.</p>\n<p><br />Example of array [1,2,3,4,5]<br />1 2 3 4 5 subarray length 1<br />1 2 X X X subarray length 2<br />X 2 3 X X subarray length 2<br />X X 3 4 X subarray length 2<br />X X X 4 5 subarray length 2<br />1 2 3 X X subarray length 3<br />X 2 3 4 X subarray length 3<br />X X 3 4 5 subarray length 3<br />1 2 3 4 X subarray length 4<br />X 2 3 4 5 subarray length 4<br />1 2 3 4 5 subarray length 5</p>\n<p>5 8 9 8 5 total times each index was added.<br />3 4 5 4 3 total times in odd length array with (x + 1) / 2<br />2 4 4 4 2 total times in even length array with x / 2</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/04628ff7-990c-4a59-aec3-6d7de8683fb2.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"sum-of-all-odd-length-subarrays-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1701,"title":"K-diff Pairs in an Array - Array - Medium - LeetCode","imageUrl":"icon_adbe88a9-d88c-469f-ae16-26daa92dc3b3.jpg","dateCreated":"2020-11-20T09:11:47.894Z","dateModified":"2020-11-20T09:11:56.252Z","contributedBy":"sumitc91","content":"Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n0 &lt;= i, j &lt; nums.length<br />i != j<br />|nums[i] - nums[j]| == k<br />Notice that |val| ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8c421996-adef-4a2c-b776-f3e3810e1e3b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"k-diff-pairs-in-an-array-array-medium-leetcode","total":0},{"id":1677,"title":"Find the Duplicate Number - Array - Medium - LeetCode","imageUrl":"icon_85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","dateCreated":"2020-11-18T13:09:40.526Z","dateModified":"2020-11-18T13:09:46.723Z","contributedBy":"sumitc91","content":"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one duplicate number in nums, return this duplicate number.\nFollow-ups:\nHow can we prove that at least one duplicate number must exist in nums?&nbsp;<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"find-the-duplicate-number-array-medium-leetcode","total":0},{"id":1651,"title":"Unique Paths II - Array - Medium - LeetCode","imageUrl":"icon_ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","dateCreated":"2020-10-31T08:51:34.949Z","dateModified":"2020-10-31T08:51:41.7Z","contributedBy":"sumitc91","content":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ca5278d5-6ee2-45fc-9c8e-7f12ff9f0357.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"unique-paths-ii-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}