{"id":1445,"title":"Happy Number - Hash Table - Easy - LeetCode","imageUrl":"icon_58f42877-4541-466b-9a8e-2b283b064c09.jpg","dateCreated":"2020-09-27T14:03:02.745Z","dateModified":"2020-09-27T14:03:14.961Z","contributedBy":"sumitc91","content":"<p>Write an algorithm to determine if a number n is \"happy\".</p>\n<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>\n<p>Return True if n is a happy number, and False if not.</p>\n<p>Example:&nbsp;</p>\n<p>Input: 19<br />Output: true<br />Explanation:&nbsp;<br />12 + 92 = 82<br />82 + 22 = 68<br />62 + 82 = 100<br />12 + 02 + 02 = 1</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    HashSet&lt;int&gt; set = new HashSet&lt;int&gt;();\n    public bool IsHappy(int n) { \n        if(set.Contains(n)){\n            return false;\n        }\n        if(n==1){\n            return true;\n        }\n        \n        int num = n;\n        int sum = 0;\n        while(num&gt;0){\n            int lsd = num%10;\n            sum += lsd*lsd;\n            num = num/10;\n        }\n        set.Add(n);\n        return IsHappy(sum);\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/58f42877-4541-466b-9a8e-2b283b064c09.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"happy-number-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1722,"title":"Latest Time by Replacing Hidden Digits - String - Easy - LeetCode","imageUrl":"icon_370ef122-a2da-4596-8095-2a518775a5cb.jpg","dateCreated":"2021-01-26T09:27:11.691Z","dateModified":"2021-01-26T09:27:17.976Z","contributedBy":"sumitc91","content":"You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\n&nbsp;","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/370ef122-a2da-4596-8095-2a518775a5cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"latest-time-by-replacing-hidden-digits-string-easy-leetcode","total":0},{"id":1638,"title":"Next Permutation - Array - Medium - LeetCode","imageUrl":"icon_467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","dateCreated":"2020-10-24T11:58:46.632Z","dateModified":"2020-10-24T11:59:00.039Z","contributedBy":"sumitc91","content":"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\nThe replacement must be in place and use ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"next-permutation-array-medium-leetcode","total":0},{"id":1605,"title":"Number of Recent Calls - Queue - Easy - LeetCode","imageUrl":"icon_52ed4bb2-be8a-4dff-832b-3355d3a7b296.jpg","dateCreated":"2020-10-16T05:43:32.617Z","dateModified":"2020-10-16T05:44:07.781Z","contributedBy":"sumitc91","content":"You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:\nRecentCounter() Initializes the counter with zero recent requests.<br />int ping(int t) Adds a new request at time t, where t represents some tim","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/946ba741-b1aa-4d55-9040-0f04c2d3678f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"queue","slug":"queue"}],"slug":"number-of-recent-calls-queue-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}