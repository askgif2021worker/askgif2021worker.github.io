{"id":1449,"title":"Word Pattern - Hash Table - Easy - LeetCode","imageUrl":"icon_c487c656-5a97-4d57-a758-23d8bedd4230.jpg","dateCreated":"2020-09-28T04:43:15.64Z","dateModified":"2020-09-28T04:43:30.427Z","contributedBy":"sumitc91","content":"<p>Given a pattern and a string s, find if s follows the same pattern.</p>\n<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: pattern = \"abba\", s = \"dog cat cat dog\"<br />Output: true<br />Example 2:</p>\n<p>Input: pattern = \"abba\", s = \"dog cat cat fish\"<br />Output: false<br />Example 3:</p>\n<p>Input: pattern = \"aaaa\", s = \"dog cat cat dog\"<br />Output: false<br />Example 4:</p>\n<p>Input: pattern = \"abba\", s = \"dog dog dog dog\"<br />Output: false<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= pattern.length &lt;= 300<br />pattern contains only lower-case English letters.<br />1 &lt;= s.length &lt;= 3000<br />s contains only lower-case English letters and spaces ' '.<br />s does not contain any leading or trailing spaces.<br />All the words in s are separated by a single space.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool WordPattern(string pattern, string s) {\n        var words = s.Split(' ');\n        if(pattern.Length!=words.Length){\n            return false;\n        }\n        var map = new Dictionary&lt;char,string&gt;();\n        var map2 = new Dictionary&lt;string,char&gt;();\n        for(int i=0;i&lt;words.Length;i++){\n            if(!map.ContainsKey(pattern[i])){\n                map.Add(pattern[i],words[i]);\n            }\n            if(!map2.ContainsKey(words[i])){\n                map2.Add(words[i],pattern[i]);\n            }\n        }\n        \n        for(int i=0;i&lt;words.Length;i++){\n            if(map[pattern[i]]!=words[i]){\n                return false;\n            }\n            \n            if(map2[words[i]]!=pattern[i]){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c487c656-5a97-4d57-a758-23d8bedd4230.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"word-pattern-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1724,"title":"Maximum Number of Balls in a Box - Maths - Easy - LeetCode","imageUrl":"icon_2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","dateCreated":"2021-02-13T12:35:08.09Z","dateModified":"2021-02-13T12:35:13.637Z","contributedBy":"sumitc91","content":"You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the s","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c5a52f4-2d58-4245-8e1c-47060f1505b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"}],"slug":"maximum-number-of-balls-in-a-box-maths-easy-leetcode","total":0},{"id":1657,"title":"Word Search - Array - Medium - LeetCode","imageUrl":"icon_20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","dateCreated":"2020-11-01T06:18:06.031Z","dateModified":"2020-11-01T06:18:12.117Z","contributedBy":"sumitc91","content":"Given a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"word-search-array-medium-leetcode","total":0},{"id":1615,"title":"License Key Formatting - String - Easy - LeetCode","imageUrl":"icon_168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","dateCreated":"2020-10-17T04:06:23.384Z","dateModified":"2020-10-17T04:06:32.538Z","contributedBy":"sumitc91","content":"You are given a license key represented as a string S which consists of only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the fi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"license-key-formatting-string-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}