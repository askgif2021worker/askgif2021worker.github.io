{"id":145,"title":"How to Create and Delete edge properties (Titan 1.0) using c# in .net mvc?","imageUrl":"5f0a1027-9006-4e9b-90e3-4287bda3e92a_titan-graph.png","dateCreated":"2018-10-25T11:41:09.134Z","dateModified":"2018-10-25T11:41:16.379Z","contributedBy":"AskGif","content":"<p>Question:&nbsp;</p>\r\n<p>I was using Titan 1.0 with gremlin server to create and delete a vertex. I want to implement this logic in my .net project. I wonder if there is any pre-build plugin for Titan and gremlin server in asp.net?</p>\r\n<p>Currently, I'm directly using a command prompt to create and delete the required vertices and edges. how can I implement it in my .net MVC project?</p>\r\n<p>&nbsp;</p>\r\n<p>Solution:</p>\r\n<p>I've created one class in my project for interacting with Gremlin server using REST API. you can make small changes to make it work for you.</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Web;\r\nusing Newtonsoft.Json;\r\nusing RestSharp;\r\nusing urNotice.Common.Infrastructure.Common.Config;\r\nusing urNotice.Common.Infrastructure.Common.Constants;\r\nusing urNotice.Common.Infrastructure.Common.Enum;\r\nusing urNotice.Common.Infrastructure.commonMethods;\r\nusing urNotice.Common.Infrastructure.Model.urNoticeModel.DynamoDb;\r\nusing urNotice.Services.NoSqlDb.DynamoDb;\r\n\r\nnamespace urNotice.Services.GraphDb\r\n{\r\n    public class GremlinServerGraphEdgeDb : IGraphEdgeDb\r\n    {\r\n        private delegate Dictionary&lt;string, string&gt; AddEdgeAsyncDelegate(string userName, string graphName, Dictionary&lt;string, string&gt; properties);\r\n\r\n    public Dictionary&lt;string, string&gt; AddEdge(string userName, string graphName, Dictionary&lt;string, string&gt; properties)\r\n    {\r\n        string url = TitanGraphConfig.Server;\r\n        var response = CreateEdge(graphName, properties, url);\r\n\r\n        // add edge to dynamodb.\r\n        var edgeDetail = new OrbitPageEdgeDetail\r\n        {\r\n            url = url,\r\n            edgeId = response[TitanGraphConstants.Id],\r\n            graphName = graphName,\r\n            properties = properties\r\n        };\r\n\r\n        IDynamoDb dynamoDbModel = new DynamoDb();\r\n        dynamoDbModel.UpsertOrbitPageEdgeDetail(edgeDetail, userName, properties[EdgePropertyEnum._inV.ToString()], properties[EdgePropertyEnum._outV.ToString()]);\r\n\r\n        //Adding edgeDetail for faster query.\r\n        //dynamoDbModel.UpsertOrbitPageEdgeForQueryDetail(edgeDetail, userName, properties[EdgePropertyEnum._inV.ToString()], properties[EdgePropertyEnum._outV.ToString()]);\r\n\r\n        return response;\r\n    }\r\n\r\n    public Dictionary&lt;string, string&gt; DeleteEdge(string inV, string outV, string label)\r\n    {\r\n        string url = TitanGraphConfig.Server;\r\n\r\n        IDynamoDb dynamoDbModel = new DynamoDb();\r\n        string uniqueKey = OrbitPageUtil.GenerateUniqueKeyForEdgeQuery(inV, label, outV);\r\n        var edgeInfo = dynamoDbModel.GetOrbitPageCompanyUserWorkgraphyTable(\r\n                   DynamoDbHashKeyDataType.EdgeDetail.ToString(),\r\n                   uniqueKey,\r\n                   null);\r\n\r\n        if (edgeInfo == null)\r\n            return null;\r\n\r\n        var response = DeleteEdgeNative(TitanGraphConfig.Graph, edgeInfo.CompareId, url);\r\n        dynamoDbModel.DeleteOrbitPageCompanyUserWorkgraphyTable(edgeInfo);\r\n\r\n        //Deleting Edge detail creating for only query purpose.\r\n        //string uniqueKey = OrbitPageUtil.GenerateUniqueKeyForEdgeQuery(inV, label, outV);\r\n        //edgeInfo = dynamoDbModel.GetOrbitPageCompanyUserWorkgraphyTable(\r\n        //            DynamoDbHashKeyDataType.EdgeDetail.ToString(),\r\n        //            uniqueKey,\r\n        //            null);\r\n\r\n        //if(edgeInfo!=null)\r\n        //    dynamoDbModel.DeleteOrbitPageCompanyUserWorkgraphyTable(edgeInfo);\r\n\r\n        return response;\r\n    }\r\n\r\n    public Dictionary&lt;string, string&gt; AddEdgeAsync(string userName, string graphName, Dictionary&lt;string, string&gt; properties)\r\n    {\r\n        var addEdgeAsyncDelegate = new GremlinServerGraphEdgeDb.AddEdgeAsyncDelegate(AddEdge);\r\n        addEdgeAsyncDelegate.BeginInvoke(userName, graphName, properties, null, null);\r\n        return null;\r\n    }\r\n\r\n    private Dictionary&lt;String, String&gt; CreateEdge(string graphName, Dictionary&lt;string, string&gt; properties, string url)\r\n    {\r\n        var uri = new StringBuilder(url + \"/?gremlin=\");\r\n\r\n        //http://localhost:8182/?gremlin=g.V(8320).next().addEdge(\"Using\",g.V(12416).next(),\"Desc\",\"Item used by Person\",\"time\",12345)\r\n\r\n        string graphProperties = string.Empty;\r\n\r\n        //_outV must be the first parameter\r\n        graphProperties += \"'\" + properties[EdgePropertyEnum._label.ToString()] + \"', g.V(\" + properties[EdgePropertyEnum._inV.ToString()] + \").next() ,\";\r\n        foreach (KeyValuePair&lt;string, string&gt; property in properties)\r\n        {\r\n            if (property.Key == EdgePropertyEnum._inV.ToString() || property.Key == EdgePropertyEnum._outV.ToString() || property.Key == EdgePropertyEnum._label.ToString())\r\n            {\r\n                //do nothing.. May be in future we will write logic here.                    \r\n            }\r\n            else\r\n            {\r\n                if (property.Key == EdgePropertyEnum.PostedDateLong.ToString() || property.Key == EdgePropertyEnum.SalaryAmount.ToString())\r\n                    graphProperties += \"'\" + property.Key + \"', \" + property.Value + \" ,\";\r\n                else\r\n                    graphProperties += \"'\" + property.Key + \"', '\" + property.Value + \"' ,\";\r\n            }\r\n        }\r\n\r\n        if (!string.IsNullOrEmpty(graphProperties))\r\n        {\r\n            graphProperties = graphProperties.Substring(0, graphProperties.Length - 2);\r\n        }\r\n\r\n        uri.Append(\"g.V(\" + properties[EdgePropertyEnum._outV.ToString()] + \").next().addEdge(\" + graphProperties + \");\");\r\n        var client = new RestClient(uri.ToString());\r\n        var request = new RestRequest();\r\n\r\n        request.Method = Method.GET;\r\n        request.AddHeader(\"Accept\", \"application/json\");\r\n        request.Parameters.Clear();\r\n        request.AddParameter(\"application/json\", \"\", ParameterType.RequestBody);\r\n\r\n        var res = client.Execute(request);\r\n        var content = res.Content; // raw content as string \r\n\r\n        dynamic jsonResponse = JsonConvert.DeserializeObject(content);\r\n        var response = new Dictionary&lt;String, String&gt;();\r\n        response[\"status\"] = \"200\";\r\n        response[\"CreateEdgeStatus\"] = \"200\";\r\n        response[TitanGraphConstants.Id] = jsonResponse.result.data[0].id;\r\n        response[TitanGraphConstants.RexsterUri] = url;\r\n        return response;\r\n    }\r\n\r\n    private Dictionary&lt;String, String&gt; DeleteEdgeNative(string graphName, string edgeId, string url)\r\n    {\r\n        var uri = new StringBuilder(url + \"/?gremlin=\");\r\n        //var uri = new StringBuilder(url + \"/graphs/\" + graphName + \"/edges/\" + edgeId);\r\n\r\n        //http://localhost:8182/?gremlin=g.E('odxqo-6f4-2hat-9kw').drop()\r\n\r\n        uri.Append(\"g.E('\" + edgeId + \"').drop();\");\r\n\r\n        var client = new RestClient(uri.ToString());\r\n        var request = new RestRequest();\r\n\r\n        request.Method = Method.GET;\r\n        request.AddHeader(\"Accept\", \"application/json\");\r\n        request.Parameters.Clear();\r\n        request.AddParameter(\"application/json\", \"\", ParameterType.RequestBody);\r\n\r\n        var res = client.Execute(request);\r\n        var content = res.Content; // raw content as string \r\n\r\n        dynamic jsonResponse = JsonConvert.DeserializeObject(content);\r\n        var response = new Dictionary&lt;String, String&gt;();\r\n        response[\"status\"] = \"200\";\r\n        response[\"DeleteEdgeStatus\"] = \"200\";\r\n        //response[TitanGraphConstants.Id] = jsonResponse.result.data[0].id;\r\n        //response[TitanGraphConstants.RexsterUri] = url;\r\n        return response;\r\n    }\r\n}\r\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5f0a1027-9006-4e9b-90e3-4287bda3e92a_titan-graph.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-create-and-delete-edge-properties-titan-1.0-using-c-in-.net-mvc","tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"c-sharp","slug":"c-sharp"},{"name":"titan","slug":"titan"},{"name":"gremlin-server","slug":"gremlin-server"},{"name":"gremlin","slug":"gremlin"},{"name":"graph","slug":"graph"},{"name":"Rexster","slug":"rexster"},{"name":"dot-net","slug":"dot-net"},{"name":"graph-database","slug":"graph-database"}],"recommendations":[{"id":1335,"title":"Groups of Special-Equivalent Strings - Easy - LeetCode","imageUrl":"777fbd8f-51f2-4c38-9d3e-eadcc18d3d71-array.png","dateCreated":"2020-06-06T09:10:12.091Z","dateModified":"2020-06-06T09:10:25.141Z","contributedBy":"AskGif","content":"You are given an array A of strings.\r\nA move onto S consists of swapping any two even indexed characters of S, or any two odd indexed characters of S.\r\nTwo strings S and T are special-equivalent if after any number of moves onto S, S == T.\r\nFor example, S = \"zzxy\" and T = \"xy","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/777fbd8f-51f2-4c38-9d3e-eadcc18d3d71-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"}],"slug":"groups-of-special-equivalent-strings-easy-leetcode","total":0},{"id":313,"title":"Learning Routing and AttributeRouting Web API 2 Controllers in MVC with Areas","imageUrl":"4285ec15-bc4b-4e02-bbb4-75307e546848_attribute-routing-aspnet-core.jpg","dateCreated":"2019-03-23T14:30:03.714Z","dateModified":"2019-03-23T14:30:49.016Z","contributedBy":"AskGif","content":"The Acumen ASP.NET MVC development team started working with the new Web API 2 controllers released with Visual Studio 2013, and quickly hit some important issues that took some research to resolve.\r\n&nbsp;\r\nRouting and AttributeRouting and using Web API 2 controllers inside an Area","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4285ec15-bc4b-4e02-bbb4-75307e546848_attribute-routing-aspnet-core.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-5","slug":"mvc-5"}],"slug":"learning-routing-and-attributerouting-web-api-2-controllers-in-mvc-with-areas","total":0},{"id":312,"title":"New features about ASP.NET and C#","imageUrl":"23a73932-d77d-4bd4-b4ab-06ea4d5183d3_c-sharp-dotnet.jpg","dateCreated":"2019-03-23T14:12:39.969Z","dateModified":"2019-03-23T14:30:23.06Z","contributedBy":"AskGif","content":"Microsoft is coming out with a bunch of new features that make me very glad to be a .NET-oriented developer. The ASP.NET vNext platform looks like it is going to be a solid improvement to the environment; no longer will users be tied to IIS or Visual Studio and I anticipate some strong VS competi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/23a73932-d77d-4bd4-b4ab-06ea4d5183d3_c-sharp-dotnet.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-core","slug":"mvc-core"},{"name":"c-sharp","slug":"c-sharp"}],"slug":"new-features-about-asp.net-and-c","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}