{"id":1454,"title":"Number of Boomerangs - Hash Table - Easy - LeetCode","imageUrl":"icon_0bfaa627-058c-4deb-8cd9-80d4d46eab4f.jpg","dateCreated":"2020-09-28T10:19:55.076Z","dateModified":"2020-09-28T10:20:09.52Z","contributedBy":"sumitc91","content":"<p>Given n points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).</p>\n<p>Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).</p>\n<p>Example:</p>\n<p>Input:<br />[[0,0],[1,0],[2,0]]</p>\n<p>Output:<br />2</p>\n<p>Explanation:<br />The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int NumberOfBoomerangs(int[][] points) {\n        int res = 0;\n\n        var map = new Dictionary&lt;int,int&gt;();\n        for(int i=0; i&lt;points.Length; i++) {\n            for(int j=0; j&lt;points.Length; j++) {\n                if(i == j)\n                    continue;\n\n                int d = getDistance(points[i], points[j]);   \n                if(map.ContainsKey(d)){\n                    map[d]++;\n                }\n                else{\n                    map.Add(d,1);\n                }                \n            }\n\n            foreach(var item in map) {\n                res += item.Value * (item.Value-1);\n            }            \n            map.Clear();\n        }\n\n        return res;\n    }\n    \n    private int getDistance(int[] a, int[] b) {\n        int dx = a[0] - b[0];\n        int dy = a[1] - b[1];\n\n        return dx*dx + dy*dy;\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(n^2)</p>\n<p>Space Complexity: O(n)</p>\n<p>the val * (val-1); means permutations A(n,2)=n*(n-1),and also excludes 1&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0bfaa627-058c-4deb-8cd9-80d4d46eab4f.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"number-of-boomerangs-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1672,"title":"Rotate Array - Array - Medium - LeetCode","imageUrl":"icon_37fb5cd6-ca4d-4282-9a29-a03ba8523202.jpg","dateCreated":"2020-11-18T07:21:27.3Z","dateModified":"2020-11-18T07:21:33.323Z","contributedBy":"sumitc91","content":"Given an array, rotate the array to the right by k steps, where k is non-negative.\nFollow up:\nTry to come up as many solutions as you can, there are at least 3 different ways to solve this problem.<br />Could you do it in-place with O(1) extra space?<br />&nbsp;\nExample 1:</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/37fb5cd6-ca4d-4282-9a29-a03ba8523202.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"rotate-array-array-medium-leetcode","total":0},{"id":1671,"title":"Find Peak Element - Array - Medium - LeetCode","imageUrl":"icon_ddbfc17c-bd5c-47a2-8c7d-53508db12cab.jpg","dateCreated":"2020-11-18T07:03:05.436Z","dateModified":"2020-11-18T07:03:11.729Z","contributedBy":"sumitc91","content":"A peak element is an element that is greater than its neighbors.\nGiven an input array nums, where nums[i] &ne; nums[i+1], find a peak element and return its index.\nThe array may contain multiple peaks, in that case return the index to any one of the peaks is fine.\nYou may ima","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ddbfc17c-bd5c-47a2-8c7d-53508db12cab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"find-peak-element-array-medium-leetcode","total":0},{"id":1643,"title":"Rotate Image - Array - Medium - LeetCode","imageUrl":"icon_1aaf92bb-a6af-4473-a7da-686247f16016.jpg","dateCreated":"2020-10-26T13:36:30.021Z","dateModified":"2020-10-26T13:36:36.406Z","contributedBy":"sumitc91","content":"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1aaf92bb-a6af-4473-a7da-686247f16016.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"rotate-image-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}