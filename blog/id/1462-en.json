{"id":1462,"title":"Design HashSet - Hash Table - Easy - LeetCode","imageUrl":"icon_77c682da-7ab2-482b-a261-371aabd3e875.jpg","dateCreated":"2020-09-29T06:34:32.619Z","dateModified":"2020-09-29T06:34:44.458Z","contributedBy":"sumitc91","content":"<p>Design a HashSet without using any built-in hash table libraries.</p>\n<p>To be specific, your design should include these functions:</p>\n<p>add(value): Insert a value into the HashSet.&nbsp;<br />contains(value) : Return whether the value exists in the HashSet or not.<br />remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.</p>\n<p>Example:</p>\n<p>MyHashSet hashSet = new MyHashSet();<br />hashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />hashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />hashSet.contains(1); &nbsp; &nbsp;// returns true<br />hashSet.contains(3); &nbsp; &nbsp;// returns false (not found)<br />hashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />hashSet.contains(2); &nbsp; &nbsp;// returns true<br />hashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />hashSet.contains(2); &nbsp; &nbsp;// returns false (already removed)</p>\n<p>Note:</p>\n<p>All values will be in the range of [0, 1000000].<br />The number of operations will be in the range of [1, 10000].<br />Please do not use the built-in HashSet library.</p>\n<pre class=\"language-csharp\"><code>public class MyHashSet {\n\n    List&lt;int&gt;[] table;\n    const int size = 10000;\n    /** Initialize your data structure here. */\n    public MyHashSet() {\n        table = new List&lt;int&gt;[size];\n    }\n    \n    public void Add(int key) {\n        if(Contains(key)){\n            return;\n        }\n        int hash = GetHash(key);\n        if(table[hash] == null){\n            table[hash]=new List&lt;int&gt;();            \n        }\n        table[hash].Add(key);\n    }\n    \n    public void Remove(int key) {\n        int hash = GetHash(key);\n        if(table[hash]==null){\n            return;\n        }\n        table[hash].Remove(key);\n    }\n    \n    /** Returns true if this set contains the specified element */\n    public bool Contains(int key) {\n        int hash = GetHash(key);\n        if(table[hash]==null){\n            return false;\n        }\n        \n        return table[hash].Contains(key);\n    }\n    \n    private int GetHash(int key){\n        return (key * 7)%size;\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.Add(key);\n * obj.Remove(key);\n * bool param_3 = obj.Contains(key);\n */</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(1) Amortised time complexity</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/77c682da-7ab2-482b-a261-371aabd3e875.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"design-hashset-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1716,"title":"Maximum Units on a Truck - Array - Easy - LeetCode","imageUrl":"icon_3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","dateCreated":"2021-01-08T09:45:52.965Z","dateModified":"2021-01-08T09:46:00.078Z","contributedBy":"sumitc91","content":"You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nnumberOfBoxesi is the number of boxes of type i.<br />numberOfUnitsPerBoxi is the number of units in each box of the type i.<br />You ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"maximum-units-on-a-truck-array-easy-leetcode","total":0},{"id":1658,"title":"Remove Duplicates from Sorted Array II - Array - Medium - LeetCode","imageUrl":"icon_354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","dateCreated":"2020-11-01T11:57:49.77Z","dateModified":"2020-11-01T11:57:54.983Z","contributedBy":"sumitc91","content":"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\nClarification:\nConfus","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"remove-duplicates-from-sorted-array-ii-array-medium-leetcode","total":0},{"id":1613,"title":"Rising Temperature - SQL - Easy - LeetCode","imageUrl":"icon_ac130fd7-abdd-4db8-9e17-cccc1048a681.jpg","dateCreated":"2020-10-16T11:40:45.374Z","dateModified":"2020-10-16T11:40:52.328Z","contributedBy":"sumitc91","content":"Table: Weather\n+---------------+---------+<br />| Column Name &nbsp; | Type &nbsp; &nbsp;|<br />+---------------+---------+<br />| id &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| int &nbsp; &nbsp; |<br />| recordDate &nbsp; &nbsp;| date &nbsp; &nbsp;|<br />| temperature &nbsp; | int &nbsp; &","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ac130fd7-abdd-4db8-9e17-cccc1048a681.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"rising-temperature-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}