{"id":1463,"title":"Design HashMap - Hash Table - Easy - LeetCode","imageUrl":"icon_078ed58a-35ea-4193-badc-1ba6ca82c796.jpg","dateCreated":"2020-09-29T07:19:43.424Z","dateModified":"2020-09-29T07:19:57.662Z","contributedBy":"sumitc91","content":"<p>Design a HashMap without using any built-in hash table libraries.</p>\n<p>To be specific, your design should include these functions:</p>\n<p>put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.<br />get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.<br />remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.</p>\n<p>Example:</p>\n<p>MyHashMap hashMap = new MyHashMap();<br />hashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />hashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />hashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1<br />hashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found)<br />hashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// update the existing value<br />hashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1&nbsp;<br />hashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// remove the mapping for 2<br />hashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found)&nbsp;</p>\n<p>Note:</p>\n<p>All keys and values will be in the range of [0, 1000000].<br />The number of operations will be in the range of [1, 10000].<br />Please do not use the built-in HashMap library.</p>\n<pre class=\"language-csharp\"><code>public class MyHashMap {\n\n    /** Initialize your data structure here. */\n    int[] hasharray; \n    public MyHashMap() {\n        hasharray = new int[1000000];\n        Array.Fill(hasharray, Int32.MinValue);\n    }\n    \n    /** value will always be non-negative. */\n    public void Put(int key, int value) {\n        hasharray[key] = value;\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    public int Get(int key) {\n        if (hasharray[key]!=Int32.MinValue)\n            return hasharray[key];\n        return -1;\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    public void Remove(int key) {\n        hasharray[key] = Int32.MinValue;\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.Put(key,value);\n * int param_2 = obj.Get(key);\n * obj.Remove(key);\n */</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(1)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/078ed58a-35ea-4193-badc-1ba6ca82c796.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"design-hashmap-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1723,"title":"Beautiful Arrangement II - Maths - Medium - LeetCode","imageUrl":"icon_b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","dateCreated":"2021-01-26T13:09:40.384Z","dateModified":"2021-01-26T13:09:46.827Z","contributedBy":"sumitc91","content":"Given two integers n and k, you need to construct a list that contains n different positive integers ranging from 1 to n and obeys the following requirement:<br />Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"},{"name":"मध्यम","slug":"medium"}],"slug":"beautiful-arrangement-ii-maths-medium-leetcode","total":0},{"id":1630,"title":"Mean of Array After Removing Some Elements - Array - Easy - LeetCode","imageUrl":"icon_9f50a4a2-b70b-453a-934d-064ef9684592.jpg","dateCreated":"2020-10-18T09:36:20.32Z","dateModified":"2020-10-18T09:36:35.59Z","contributedBy":"sumitc91","content":"1619. Mean of Array After Removing Some Elements<br />Easy\n30\n5\nAdd to List\nShare<br />Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9f50a4a2-b70b-453a-934d-064ef9684592.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"mean-of-array-after-removing-some-elements-array-easy-leetcode","total":0},{"id":1600,"title":"Design Parking System - Design - Easy - LeetCode","imageUrl":"icon_2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","dateCreated":"2020-10-15T05:28:49.957Z","dateModified":"2020-10-15T05:49:22.82Z","contributedBy":"sumitc91","content":"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:\nParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"डिज़ाइन","slug":"design"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-parking-system-design-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}