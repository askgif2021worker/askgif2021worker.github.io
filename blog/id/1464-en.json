{"id":1464,"title":"Longest Word in Dictionary - Hash Table - Easy - LeetCode","imageUrl":"icon_ab2ba357-1eb6-473a-a75e-b16072ccf447.jpg","dateCreated":"2020-09-29T08:12:30.447Z","dateModified":"2020-09-29T08:12:46.176Z","contributedBy":"sumitc91","content":"<p>Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.</p>\n<p>If there is no answer, return the empty string.<br />Example 1:<br />Input:&nbsp;<br />words = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]<br />Output: \"world\"<br />Explanation:&nbsp;<br />The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".<br />Example 2:<br />Input:&nbsp;<br />words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]<br />Output: \"apple\"<br />Explanation:&nbsp;<br />Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".<br />Note:</p>\n<p>All the strings in the input will only contain lowercase letters.<br />The length of words will be in the range [1, 1000].<br />The length of words[i] will be in the range [1, 30].</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public string LongestWord(string[] words) {\n        var set = new HashSet&lt;string&gt;();\n        var startCharList = new List&lt;string&gt;();\n        for(int i=0;i&lt;words.Length;i++){\n            set.Add(words[i]);\n            if(words[i].Length==1){\n                startCharList.Add(words[i]);\n            }            \n        }\n        \n        int max = 0;\n        string str = string.Empty;\n        for(int i=0;i&lt;words.Length;i++){\n            var valid = Helper(set,words[i],words[i].Length);\n            if(valid){\n                if(max&lt;words[i].Length){\n                    max = words[i].Length;\n                    str = words[i];\n                }\n                else if(max == words[i].Length &amp;&amp; string.Compare(words[i],str)==-1){\n                    str = words[i];\n                }\n            }\n        } \n        \n        return str;\n    }\n    \n    private bool Helper(HashSet&lt;string&gt; set, string word, int len){\n        if(len &lt;=0){\n            return true;\n        }\n        \n        if(!set.Contains(word.Substring(0,len))){\n            return false;\n        }\n        return Helper(set,word,len-1);\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p><br />Time Complexity: O(m*n)</p>\n<p>Space Complexity: O(m*n)</p>\n<p>Where m and n are the number of strings and maximum characters in the string</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ab2ba357-1eb6-473a-a75e-b16072ccf447.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"longest-word-in-dictionary-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1723,"title":"Beautiful Arrangement II - Maths - Medium - LeetCode","imageUrl":"icon_b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","dateCreated":"2021-01-26T13:09:40.384Z","dateModified":"2021-01-26T13:09:46.827Z","contributedBy":"sumitc91","content":"Given two integers n and k, you need to construct a list that contains n different positive integers ranging from 1 to n and obeys the following requirement:<br />Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"},{"name":"medium","slug":"medium"}],"slug":"beautiful-arrangement-ii-maths-medium-leetcode","total":0},{"id":1626,"title":"Reformat Department Table - Sql - Easy - LeetCode","imageUrl":"icon_59cdadef-bfee-4b37-bafa-ad7569c32e3f.jpg","dateCreated":"2020-10-18T04:10:25.839Z","dateModified":"2020-10-18T04:10:34.638Z","contributedBy":"sumitc91","content":"Table: Department\n+---------------+---------+<br />| Column Name &nbsp; | Type &nbsp; &nbsp;|<br />+---------------+---------+<br />| id &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| int &nbsp; &nbsp; |<br />| revenue &nbsp; &nbsp; &nbsp; | int &nbsp; &nbsp; |<br />| month &nbsp; &nbsp; &nbsp","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/59cdadef-bfee-4b37-bafa-ad7569c32e3f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"reformat-department-table-sql-easy-leetcode","total":0},{"id":1593,"title":"Range Sum of BST - Tree - Easy - LeetCode","imageUrl":"icon_2d446765-9ada-4072-93c3-eedfb56f7794.jpg","dateCreated":"2020-10-09T08:49:41.585Z","dateModified":"2020-10-09T08:49:55.954Z","contributedBy":"sumitc91","content":"Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).\nThe binary search tree is guaranteed to have unique values.\n&nbsp;\nExample 1:\nInput: root = [10,5,15,3,7,null,18], L = 7, R = 15<br />Output: 32<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2d446765-9ada-4072-93c3-eedfb56f7794.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"range-sum-of-bst-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}