{"id":1469,"title":"Uncommon Words from Two Sentences - Hash Table - Easy - LeetCode","imageUrl":"icon_43f1b22f-c025-4087-a3d7-13e09e09af7b.jpg","dateCreated":"2020-09-30T05:44:56.443Z","dateModified":"2020-09-30T05:45:10.284Z","contributedBy":"sumitc91","content":"<p>We are given two sentences A and B. &nbsp;(A sentence is a string of space separated words. &nbsp;Each word consists only of lowercase letters.)</p>\n<p>A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.</p>\n<p>Return a list of all uncommon words.&nbsp;</p>\n<p>You may return the list in any order.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: A = \"this apple is sweet\", B = \"this apple is sour\"<br />Output: [\"sweet\",\"sour\"]<br />Example 2:</p>\n<p>Input: A = \"apple apple\", B = \"banana\"<br />Output: [\"banana\"]<br />&nbsp;</p>\n<p>Note:</p>\n<p>0 &lt;= A.length &lt;= 200<br />0 &lt;= B.length &lt;= 200<br />A and B both contain only spaces and lowercase letters.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public string[] UncommonFromSentences(string A, string B) {\n        var map = new Dictionary&lt;string,int&gt;();\n        var strArr = A.Split(' ');\n        foreach(var item in strArr){\n            if(map.ContainsKey(item)){\n                map[item]++;\n            }\n            else{\n                map.Add(item,1);\n            }\n        }\n        \n        strArr = B.Split(' ');\n        foreach(var item in strArr){\n            if(map.ContainsKey(item)){\n                map[item]++;\n            }\n            else{\n                map.Add(item,1);\n            }\n        }\n        \n        var ans = new List&lt;string&gt;();\n        foreach(var item in map){\n            if(item.Value==1){\n                ans.Add(item.Key);\n            }\n        }\n        \n        return ans.ToArray();\n    }\n}</code></pre>\n<p>Time Complexity: O(m+n)</p>\n<p>Space Complexity: O(m+n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/43f1b22f-c025-4087-a3d7-13e09e09af7b.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"uncommon-words-from-two-sentences-hash-table-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"hash-table","slug":"hash-table"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1670,"title":"Find Minimum in Rotated Sorted Array - Array - Medium - LeetCode","imageUrl":"icon_d1be15f3-8f69-4050-83a2-f9c67ac5827b.jpg","dateCreated":"2020-11-18T02:56:56.195Z","dateModified":"2020-11-18T02:57:02.762Z","contributedBy":"sumitc91","content":"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n[4,5,6,7,0,1,2] if it was rotated 4 times.<br />[0,1,2,4,5,6,7] if it was rotated 7 times.<br />Notice that rotating an array [a[0], a[1], a[","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d1be15f3-8f69-4050-83a2-f9c67ac5827b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"व्यायाम","slug":"athletics"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"मध्यम","slug":"medium"}],"slug":"find-minimum-in-rotated-sorted-array-array-medium-leetcode","total":0},{"id":1618,"title":"Big Countries - Sql - Easy - LeetCode","imageUrl":"icon_6ebd2b15-7c5c-49e4-8989-4100969f8797.jpg","dateCreated":"2020-10-17T05:34:51.754Z","dateModified":"2020-10-17T05:35:04.401Z","contributedBy":"sumitc91","content":"There is a table World\n+-----------------+------------+------------+--------------+---------------+<br />| name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| continent &nbsp;| area &nbsp; &nbsp; &nbsp; | population &nbsp; | gdp &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />+-----------------+----","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ebd2b15-7c5c-49e4-8989-4100969f8797.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"big-countries-sql-easy-leetcode","total":0},{"id":1595,"title":"Cousins in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","dateCreated":"2020-10-09T09:24:10.362Z","dateModified":"2020-10-09T09:24:23.315Z","contributedBy":"sumitc91","content":"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\nWe are given the root of a binary tree with unique values, and the values x and y of two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"cousins-in-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}