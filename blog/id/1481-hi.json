{"id":1481,"title":"Delete Node in a Linked List - Linked List - Easy - LeetCode","imageUrl":"icon_62375622-c40b-4a40-a61f-7cce7e5b39ec.jpg","dateCreated":"2020-09-30T10:20:09.755Z","dateModified":"2020-09-30T10:20:20.742Z","contributedBy":"sumitc91","content":"<p>Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.</p>\n<p>It is guaranteed that the node to be deleted is not a tail node in the list.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p><br />Input: head = [4,5,1,9], node = 5<br />Output: [4,1,9]<br />Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.<br />Example 2:</p>\n<p><br />Input: head = [4,5,1,9], node = 1<br />Output: [4,5,9]<br />Explanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.<br />Example 3:</p>\n<p>Input: head = [1,2,3,4], node = 3<br />Output: [1,2,4]<br />Example 4:</p>\n<p>Input: head = [0,1], node = 0<br />Output: [1]<br />Example 5:</p>\n<p>Input: head = [-3,5,-99], node = -3<br />Output: [5,-99]<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>The number of the nodes in the given list is in the range [2, 1000].<br />-1000 &lt;= Node.val &lt;= 1000<br />The value of each node in the list is unique.<br />The node to be deleted is in the list and is not a tail node</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public void DeleteNode(ListNode node) {\n        while(node.next!=null){\n            node.val = node.next.val;\n            if(node.next.next == null){\n                node.next = null;\n            }\n            else{\n                node = node.next;\n            }            \n        }                \n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/62375622-c40b-4a40-a61f-7cce7e5b39ec.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"delete-node-in-a-linked-list-linked-list-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"linked-list","slug":"linked-list"}],"recommendations":[{"id":1726,"title":"Maximum Swap - Array - Medium - LeetCode","imageUrl":"icon_16589057-204a-4929-8beb-ec745719515b.jpg","dateCreated":"2021-03-04T10:15:19.693Z","dateModified":"2021-03-04T10:16:54.289Z","contributedBy":"sumitc91","content":"Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.\nExample 1:<br />Input: 2736<br />Output: 7236<br />Explanation: Swap the number 2 and the number 7.<br />Example 2:<br />Input: 9973<br />O","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/16589057-204a-4929-8beb-ec745719515b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"maximum-swap-array-medium-leetcode","total":0},{"id":1605,"title":"Number of Recent Calls - Queue - Easy - LeetCode","imageUrl":"icon_52ed4bb2-be8a-4dff-832b-3355d3a7b296.jpg","dateCreated":"2020-10-16T05:43:32.617Z","dateModified":"2020-10-16T05:44:07.781Z","contributedBy":"sumitc91","content":"You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:\nRecentCounter() Initializes the counter with zero recent requests.<br />int ping(int t) Adds a new request at time t, where t represents some tim","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/946ba741-b1aa-4d55-9040-0f04c2d3678f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"queue","slug":"queue"}],"slug":"number-of-recent-calls-queue-easy-leetcode","total":0},{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"A binary tree is univalued if every node in the tree has the same value.\nReturn true if and only if the given tree is univalued.\n&nbsp;\nExample 1:\n<br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:\n<br />Input: [2,2,2,5,2]<br />Output: false<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"univalued-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}