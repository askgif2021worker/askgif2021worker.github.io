{"id":1482,"title":"Middle of the Linked List - Linked List - Easy - LeetCode","imageUrl":"icon_ba3ddd2b-2bea-48c7-a498-3694471f2dac.jpg","dateCreated":"2020-09-30T10:35:56.618Z","dateModified":"2020-09-30T10:36:09.37Z","contributedBy":"sumitc91","content":"<p>Given a non-empty, singly linked list with head node head, return a middle node of linked list.</p>\n<p>If there are two middle nodes, return the second middle node.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: [1,2,3,4,5]<br />Output: Node 3 from this list (Serialization: [3,4,5])<br />The returned node has value 3. &nbsp;(The judge's serialization of this node is [3,4,5]).<br />Note that we returned a ListNode object ans, such that:<br />ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.<br />Example 2:</p>\n<p>Input: [1,2,3,4,5,6]<br />Output: Node 4 from this list (Serialization: [4,5,6])<br />Since the list has two middle nodes with values 3 and 4, we return the second one.<br />&nbsp;</p>\n<p>Note:</p>\n<p>The number of nodes in the given list will be between 1 and 100.</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MiddleNode(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        if(head == null){\n            return null;\n        }\n        \n        if(head.next == null){\n            return head;\n        }\n        \n        if(head.next.next==null){\n            return head.next;\n        }\n        \n        while(fast != null &amp;&amp; fast.next!=null){\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        \n        return slow;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ba3ddd2b-2bea-48c7-a498-3694471f2dac.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"middle-of-the-linked-list-linked-list-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"linked-list","slug":"linked-list"}],"recommendations":[{"id":1716,"title":"Maximum Units on a Truck - Array - Easy - LeetCode","imageUrl":"icon_3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","dateCreated":"2021-01-08T09:45:52.965Z","dateModified":"2021-01-08T09:46:00.078Z","contributedBy":"sumitc91","content":"You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nnumberOfBoxesi is the number of boxes of type i.<br />numberOfUnitsPerBoxi is the number of units in each box of the type i.<br />You ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"maximum-units-on-a-truck-array-easy-leetcode","total":0},{"id":1713,"title":"Reformat Phone Number - String - Easy - LeetCode","imageUrl":"icon_716c7816-48e6-45e6-840e-df068e41c6f6.jpg","dateCreated":"2021-01-05T04:21:52.889Z","dateModified":"2021-01-05T04:22:00.273Z","contributedBy":"sumitc91","content":"You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/716c7816-48e6-45e6-840e-df068e41c6f6.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"reformat-phone-number-string-easy-leetcode","total":0},{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}