{"id":1490,"title":"Add Digits - Math - Easy - LeetCode","imageUrl":"icon_7f561f05-99fd-4752-ba2b-312a83a4dc64.jpg","dateCreated":"2020-10-01T04:48:41.189Z","dateModified":"2020-10-01T04:48:48.151Z","contributedBy":"sumitc91","content":"<p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>\n<p>Example:</p>\n<p>Input: 38<br />Output: 2&nbsp;<br />Explanation: The process is like: 3 + 8 = 11, 1 + 1 = 2.&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Since 2 has only one digit, return it.<br />Follow up:<br />Could you do it without any loop/recursion in O(1) runtime?</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int AddDigits(int num) {\n        if(num&lt;10){\n            return num;\n        }\n        int sum = 0;\n        while(num&gt;0){\n            sum+=num%10;\n            num/=10;\n        }\n        return AddDigits(sum);\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>\n<p>&nbsp;</p>\n<p>Efficient Approach:</p>\n<p>The problem, widely known as digit root problem, has a congruence formula:</p>\n<p>https://en.wikipedia.org/wiki/Digital_root#Congruence_formula<br />For base b (decimal case b = 10), the digit root of an integer is:</p>\n<p>dr(n) = 0 if n == 0<br />dr(n) = (b-1) if n != 0 and n % (b-1) == 0<br />dr(n) = n mod (b-1) if n % (b-1) != 0<br />or</p>\n<p>dr(n) = 1 + (n - 1) % 9<br />Note here, when n = 0, since (n - 1) % 9 = -1, the return value is zero (correct).</p>\n<p>From the formula, we can find that the result of this problem is immanently periodic, with a period (b-1).</p>\n<p>Output sequence for decimals (b = 10):</p>\n<p>~input: 0 1 2 3 4 ...<br />output: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ....</p>\n<p>Henceforth, we can write the following code, whose time and space complexities are both O(1).</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int AddDigits(int num) {\n        return 1 + (num-1)%9;\n    }\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7f561f05-99fd-4752-ba2b-312a83a4dc64.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"add-digits-math-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"recommendations":[{"id":1715,"title":"Determine if String Halves Are Alike - String - Easy - LeetCode","imageUrl":"icon_8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","dateCreated":"2021-01-08T09:24:14.63Z","dateModified":"2021-01-08T09:24:20.084Z","contributedBy":"sumitc91","content":"You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains upperca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8d5b87e0-0bd8-47c9-8f55-cfff94e5858d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"determine-if-string-halves-are-alike-string-easy-leetcode","total":0},{"id":1701,"title":"K-diff Pairs in an Array - Array - Medium - LeetCode","imageUrl":"icon_adbe88a9-d88c-469f-ae16-26daa92dc3b3.jpg","dateCreated":"2020-11-20T09:11:47.894Z","dateModified":"2020-11-20T09:11:56.252Z","contributedBy":"sumitc91","content":"Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n0 &lt;= i, j &lt; nums.length<br />i != j<br />|nums[i] - nums[j]| == k<br />Notice that |val| ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8c421996-adef-4a2c-b776-f3e3810e1e3b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"k-diff-pairs-in-an-array-array-medium-leetcode","total":0},{"id":1635,"title":"New Year Chaos - Array - Medium - HackerRank","imageUrl":"icon_53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","dateCreated":"2020-10-24T07:14:47.121Z","dateModified":"2020-10-24T07:15:13.568Z","contributedBy":"sumitc91","content":"It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. Initial positions increment by &nbsp;from &nbsp;at the front of the line to &nbsp;at the back.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"hackerrank","slug":"hackerrank"},{"name":"मध्यम","slug":"medium"}],"slug":"new-year-chaos-array-medium-hackerrank","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}