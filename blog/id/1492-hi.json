{"id":1492,"title":"Power of Three - Math - Easy - LeetCode","imageUrl":"icon_22a0492a-94f1-4ade-9d89-603ef89a654f.jpg","dateCreated":"2020-10-01T06:04:18.376Z","dateModified":"2020-10-01T06:04:38.922Z","contributedBy":"sumitc91","content":"<p>Given an integer, write a function to determine if it is a power of three.</p>\n<p>Example 1:</p>\n<p>Input: 27<br />Output: true<br />Example 2:</p>\n<p>Input: 0<br />Output: false<br />Example 3:</p>\n<p>Input: 9<br />Output: true<br />Example 4:</p>\n<p>Input: 45<br />Output: false<br />Follow up:<br />Could you do it without using any loop/recursion?</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool IsPowerOfThree(int n) {\n        return n &gt; 0 &amp;&amp; (1162261467 % n == 0);                \n    }\n}</code></pre>\n<p>Time Complexity: O(1)</p>\n<p>Space Complexity: O(1)</p>\n<p>&nbsp;</p>\n<p>#Recursive Solution#</p>\n<p>public boolean isPowerOfThree(int n) {<br />&nbsp; &nbsp; return n&gt;0 &amp;&amp; (n==1 || (n%3==0 &amp;&amp; isPowerOfThree(n/3)));<br />}<br />#Iterative Solution#</p>\n<p>update following Stefan's answer below:</p>\n<pre class=\"language-csharp\"><code>public boolean isPowerOfThree(int n) {\n    if(n&gt;1)\n        while(n%3==0) n /= 3;\n    return n==1;\n}</code></pre>\n<p><br />my original code:</p>\n<pre class=\"language-csharp\"><code>public boolean isPowerOfThree(int n) {\nwhile(n&gt;1) {\nif(n%3!=0) return false;\nn /= 3;\n}\nreturn n&lt;=0 ? false : true;\n}</code></pre>\n<p>#It's all about MATH...#</p>\n<p>Method 1</p>\n<p>Find the maximum integer that is a power of 3 and check if it is a multiple of the given input. (related post)</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    int maxPowerOfThree = (int)Math.pow(3, (int)(Math.log(0x7fffffff) / Math.log(3)));\n    return n&gt;0 &amp;&amp; maxPowerOfThree%n==0;\n}</code></pre>\n<p><br />Or simply hard code it since we know maxPowerOfThree = 1162261467:</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    return n &gt; 0 &amp;&amp; (1162261467 % n == 0);\n}</code></pre>\n<p><br />It is worthwhile to mention that Method 1 works only when the base is prime. For example, we cannot use this algorithm to check if a number is a power of 4 or 6 or any other composite number.</p>\n<p>Method 2</p>\n<p>If log10(n) / log10(3) returns an int (more precisely, a double but has 0 after decimal point), then n is a power of 3. (original post). But be careful here, you cannot use log (natural log) here, because it will generate round off error for n=243. This is more like a coincidence. I mean when n=243, we have the following results:</p>\n<p>log(243) = 5.493061443340548 &nbsp; &nbsp;log(3) = 1.0986122886681098<br />&nbsp; &nbsp;==&gt; log(243)/log(3) = 4.999999999999999</p>\n<p>log10(243) = 2.385606273598312 &nbsp; &nbsp;log10(3) = 0.47712125471966244<br />&nbsp; &nbsp;==&gt; log10(243)/log10(3) = 5.0<br />This happens because log(3) is actually slightly larger than its true value due to round off, which makes the ratio smaller.</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    return (Math.log10(n) / Math.log10(3)) % 1 == 0;\n}</code></pre>\n<p><br />Method 3 related post</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    return n==0 ? false : n==Math.pow(3, Math.round(Math.log(n) / Math.log(3)));\n}</code></pre>\n<p><br />Method 4 related post</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    return n&gt;0 &amp;&amp; Math.abs(Math.log10(n)/Math.log10(3)-Math.ceil(Math.log10(n)/Math.log10(3))) &lt; Double.MIN_VALUE;\n}</code></pre>\n<p><br />Cheating Method</p>\n<p>This is not really a good idea in general. But for such kind of power questions, if we need to check many times, it might be a good idea to store the desired powers into an array first. (related post)</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    int[] allPowerOfThree = new int[]{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467};\n    return Arrays.binarySearch(allPowerOfThree, n) &gt;= 0;\n}</code></pre>\n<p><br />or even better with HashSet:</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;(Arrays.asList(1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467));\n    return set.contains(n);\n}</code></pre>\n<p><br />#New Method Included at 15:30pm Jan-8th#</p>\n<p>Radix-3 original post</p>\n<p>The idea is to convert the original number into radix-3 format and check if it is of format 10* where 0* means k zeros with k&gt;=0.</p>\n<pre class=\"language-java\"><code>public boolean isPowerOfThree(int n) {\n    return Integer.toString(n, 3).matches(\"10*\");\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/22a0492a-94f1-4ade-9d89-603ef89a654f.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"power-of-three-math-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"recommendations":[{"id":1725,"title":"Sum of Unique Elements - Array - Easy - LeetCode","imageUrl":"icon_9e341651-0933-4893-84a8-1d3f65898dda.jpg","dateCreated":"2021-02-13T13:13:53.857Z","dateModified":"2021-02-13T13:13:59.576Z","contributedBy":"sumitc91","content":"You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.\n&nbsp;\nExample 1:\nInput: nums = [1,2,3,2]<br />Output: 4<br />Explanation: The unique element","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e341651-0933-4893-84a8-1d3f65898dda.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"sum-of-unique-elements-array-easy-leetcode","total":0},{"id":1661,"title":"Get Maximum in Generated Array - Array - Easy - LeetCode","imageUrl":"icon_6268cd06-1d1b-409d-9665-cbe40d65c81d.jpg","dateCreated":"2020-11-08T08:10:40.511Z","dateModified":"2020-11-08T08:10:45.589Z","contributedBy":"sumitc91","content":"You are given an integer n. An array nums of length n + 1 is generated in the following way:\nnums[0] = 0<br />nums[1] = 1<br />nums[2 * i] = nums[i] when 2 &lt;= 2 * i &lt;= n<br />nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 &lt;= 2 * i + 1 &lt;= n<br />Return the maximum integer in the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6268cd06-1d1b-409d-9665-cbe40d65c81d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"get-maximum-in-generated-array-array-easy-leetcode","total":0},{"id":1624,"title":"Shortest Distance to a Character - Array - Easy - LeetCode","imageUrl":"icon_5ae5fc7c-ff85-4fa4-b353-2d4b89a92b76.jpg","dateCreated":"2020-10-18T03:37:10.612Z","dateModified":"2020-10-18T03:37:18.655Z","contributedBy":"sumitc91","content":"Given a string S and a character C, return an array of integers representing the shortest distance from the character C in the string.\nExample 1:\nInput: S = \"loveleetcode\", C = 'e'<br />Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]<br />&nbsp;\nNote:\nS string length is i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5ae5fc7c-ff85-4fa4-b353-2d4b89a92b76.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"shortest-distance-to-a-character-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}