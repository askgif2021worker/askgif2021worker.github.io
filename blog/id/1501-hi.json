{"id":1501,"title":"Binary Gap - Math - Easy - LeetCode","imageUrl":"icon_add24678-6326-4bed-964b-9d6498bf6d14.jpg","dateCreated":"2020-10-01T09:11:29.766Z","dateModified":"2020-10-01T09:11:42.208Z","contributedBy":"sumitc91","content":"<p>Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.</p>\n<p>Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: n = 22<br />Output: 2<br />Explanation: 22 in binary is \"10110\".<br />The first adjacent pair of 1's is \"10110\" with a distance of 2.<br />The second adjacent pair of 1's is \"10110\" with a distance of 1.<br />The answer is the largest of these two distances, which is 2.<br />Note that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.<br />Example 2:</p>\n<p>Input: n = 5<br />Output: 2<br />Explanation: 5 in binary is \"101\".<br />Example 3:</p>\n<p>Input: n = 6<br />Output: 1<br />Explanation: 6 in binary is \"110\".<br />Example 4:</p>\n<p>Input: n = 8<br />Output: 0<br />Explanation: 8 in binary is \"1000\".<br />There aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.<br />Example 5:</p>\n<p>Input: n = 1<br />Output: 0<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= n &lt;= 109</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int BinaryGap(int n) {\n        int res = 0, tmp = 1;\n        bool flag = false;\n        while (n != 0) {\n            if(n % 2 != 0 &amp;&amp; !flag) flag = true;\n            else if (n % 2 != 0 &amp;&amp; flag) {\n                res = Math.Max(tmp, res);\n                tmp = 1;\n            } else if(n % 2 == 0 &amp;&amp; flag) tmp++;\n            n /= 2;\n        }\n        return res;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/add24678-6326-4bed-964b-9d6498bf6d14.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"binary-gap-math-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"recommendations":[{"id":1662,"title":"Search in Rotated Sorted Array II - Array - Medium - LeetCode","imageUrl":"icon_f90b9cf1-f98d-483f-9cb6-f0ccc23c9c57.jpg","dateCreated":"2020-11-10T06:51:27.488Z","dateModified":"2020-11-10T06:51:33.729Z","contributedBy":"sumitc91","content":"Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).\nYou are given a target value to search. If found in the array return true, otherwise return false.\nExample 1:\nInput: num","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f90b9cf1-f98d-483f-9cb6-f0ccc23c9c57.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"search-in-rotated-sorted-array-ii-array-medium-leetcode","total":0},{"id":1637,"title":"4Sum - Array - Medium - LeetCode","imageUrl":"icon_dadac4de-7510-4859-a826-eab8fa2011e3.jpg","dateCreated":"2020-10-24T10:17:11.757Z","dateModified":"2020-10-24T10:17:18.465Z","contributedBy":"sumitc91","content":"Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\nNotice that the solution set must not contain duplicate quadruplets.\n&nbsp;</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/dadac4de-7510-4859-a826-eab8fa2011e3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"4sum-array-medium-leetcode","total":0},{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"A binary tree is univalued if every node in the tree has the same value.\nReturn true if and only if the given tree is univalued.\n&nbsp;\nExample 1:\n<br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:\n<br />Input: [2,2,2,5,2]<br />Output: false<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"univalued-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}