{"id":1515,"title":"Convert Integer to the Sum of Two No-Zero Integers - Math - Easy - LeetCode","imageUrl":"icon_80933984-f708-441c-b15f-48201c86ed89.jpg","dateCreated":"2020-10-02T07:35:24.076Z","dateModified":"2020-10-02T07:35:34.568Z","contributedBy":"sumitc91","content":"<p>Given an integer n. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.</p>\n<p>Return a list of two integers [A, B] where:</p>\n<p>A and B are No-Zero integers.<br />A + B = n<br />It's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: n = 2<br />Output: [1,1]<br />Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.<br />Example 2:</p>\n<p>Input: n = 11<br />Output: [2,9]<br />Example 3:</p>\n<p>Input: n = 10000<br />Output: [1,9999]<br />Example 4:</p>\n<p>Input: n = 69<br />Output: [1,68]<br />Example 5:</p>\n<p>Input: n = 1010<br />Output: [11,999]<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>2 &lt;= n &lt;= 10^4</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int[] GetNoZeroIntegers(int n) {\n        var ans = new int[2];\n        if(n==0){\n            return ans;\n        }\n        \n        for(int i=1;i&lt;n;i++){\n            if(NotContainsZero(i)&amp;&amp;NotContainsZero(n-i)){\n                ans[0]=i;\n                ans[1]=n-i;\n                return ans;\n            }\n        }\n        return ans;\n    }\n    \n    private bool NotContainsZero(int num){\n        if(num==0){\n            return false;\n        }\n        while(num&gt;0){\n            if(num%10==0){\n                return false;\n            }\n            num/=10;\n        }\n        return true;\n    }\n}</code></pre>\n<p>Time complexity: O(n * log10(n))<br />Space complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/80933984-f708-441c-b15f-48201c86ed89.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"convert-integer-to-the-sum-of-two-no-zero-integers-math-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"recommendations":[{"id":1675,"title":"Majority Element II - Array - Medium - LeetCode","imageUrl":"icon_17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","dateCreated":"2020-11-18T12:22:28.829Z","dateModified":"2020-11-18T12:22:35.442Z","contributedBy":"sumitc91","content":"Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n&nbsp;\nExample 1:\nInput: nums = [3,2,3]<br />Output: [3]<br />Example 2:\nInput: nums =","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"majority-element-ii-array-medium-leetcode","total":0},{"id":1629,"title":"Maximum Nesting Depth of the Parentheses - Stack - Easy - LeetCode","imageUrl":"icon_9d515e72-4c83-4541-9650-c0972215972d.jpg","dateCreated":"2020-10-18T08:20:30.391Z","dateModified":"2020-10-18T08:20:41.012Z","contributedBy":"sumitc91","content":"A string is a valid parentheses string (denoted VPS) if it meets one of the following:\nIt is an empty string \"\", or a single character not equal to \"(\" or \")\",<br />It can be written as AB (A concatenated with B), where A and B are VPS's, or<br />It can be written as (A), where A is a VPS.","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9d515e72-4c83-4541-9650-c0972215972d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"maximum-nesting-depth-of-the-parentheses-stack-easy-leetcode","total":0},{"id":1600,"title":"Design Parking System - Design - Easy - LeetCode","imageUrl":"icon_2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","dateCreated":"2020-10-15T05:28:49.957Z","dateModified":"2020-10-15T05:49:22.82Z","contributedBy":"sumitc91","content":"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:\nParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"डिज़ाइन","slug":"design"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-parking-system-design-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}