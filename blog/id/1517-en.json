{"id":1517,"title":"Count Odd Numbers in an Interval Range - Math - Easy - LeetCode","imageUrl":"icon_73fa83b2-dfd4-4a69-9a9a-018f825d16b6.jpg","dateCreated":"2020-10-02T08:04:29.068Z","dateModified":"2020-10-02T08:04:42.02Z","contributedBy":"sumitc91","content":"<p>Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: low = 3, high = 7<br />Output: 3<br />Explanation: The odd numbers between 3 and 7 are [3,5,7].<br />Example 2:</p>\n<p>Input: low = 8, high = 10<br />Output: 1<br />Explanation: The odd numbers between 8 and 10 are [9].<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>0 &lt;= low &lt;= high &lt;= 10^9</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int CountOdds(int low, int high) {        \n        \n        if(low%2==0 &amp;&amp; high%2==0){\n            return (high-low)/2;\n        }\n        \n        return ((high-low)/2)+1;\n    }\n}</code></pre>\n<p>Time Complexity: O(1)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/73fa83b2-dfd4-4a69-9a9a-018f825d16b6.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"count-odd-numbers-in-an-interval-range-math-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"}],"recommendations":[{"id":1707,"title":"Maximum Repeating Substring - String - Easy - LeetCode","imageUrl":"icon_6c2a7180-5aaa-46ea-9f10-28d9ae8d0784.jpg","dateCreated":"2020-12-02T09:09:18.46Z","dateModified":"2020-12-02T09:09:24.372Z","contributedBy":"sumitc91","content":"For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiv","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6c2a7180-5aaa-46ea-9f10-28d9ae8d0784.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"maximum-repeating-substring-string-easy-leetcode","total":0},{"id":1608,"title":"Duplicate Emails - Sql - Easy - LeetCode","imageUrl":"icon_bd99f209-a7f9-453d-9a5a-c63d4392098f.jpg","dateCreated":"2020-10-16T07:15:00.174Z","dateModified":"2020-10-16T07:15:10.2Z","contributedBy":"sumitc91","content":"Write a SQL query to find all duplicate emails in a table named Person.\n+----+---------+<br />| Id | Email &nbsp; |<br />+----+---------+<br />| 1 &nbsp;| a@b.com |<br />| 2 &nbsp;| c@d.com |<br />| 3 &nbsp;| a@b.com |<br />+----+---------+<br />For example, your query should return the fo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bd99f209-a7f9-453d-9a5a-c63d4392098f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"duplicate-emails-sql-easy-leetcode","total":0},{"id":1595,"title":"Cousins in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","dateCreated":"2020-10-09T09:24:10.362Z","dateModified":"2020-10-09T09:24:23.315Z","contributedBy":"sumitc91","content":"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\nWe are given the root of a binary tree with unique values, and the values x and y of two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"cousins-in-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}