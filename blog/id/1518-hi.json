{"id":1518,"title":"Backspace String Compare - Math - Easy - LeetCode","imageUrl":"icon_2317b6e6-406c-443f-9d8f-a2967128fb9d.jpg","dateCreated":"2020-10-02T08:53:32.409Z","dateModified":"2020-10-02T08:54:08.226Z","contributedBy":"sumitc91","content":"<p>Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.</p>\n<p>Note that after backspacing an empty text, the text will continue empty.</p>\n<p>Example 1:</p>\n<p>Input: S = \"ab#c\", T = \"ad#c\"<br />Output: true<br />Explanation: Both S and T become \"ac\".<br />Example 2:</p>\n<p>Input: S = \"ab##\", T = \"c#d#\"<br />Output: true<br />Explanation: Both S and T become \"\".<br />Example 3:</p>\n<p>Input: S = \"a##c\", T = \"#a#c\"<br />Output: true<br />Explanation: Both S and T become \"c\".<br />Example 4:</p>\n<p>Input: S = \"a#c\", T = \"b\"<br />Output: false<br />Explanation: S becomes \"c\" while T becomes \"b\".<br />Note:</p>\n<p>1 &lt;= S.length &lt;= 200<br />1 &lt;= T.length &lt;= 200<br />S and T only contain lowercase letters and '#' characters.<br />Follow up:</p>\n<p>Can you solve it in O(N) time and O(1) space?</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool BackspaceCompare(string S, string T) {                \n        var stack1 = new Stack&lt;char&gt;();\n        var stack2 = new Stack&lt;char&gt;();\n        for(int i=0;i&lt;S.Length;i++){\n            if(S[i]=='#'){\n                if(stack1.Count!=0){\n                    stack1.Pop();\n                }\n            }\n            else{\n                stack1.Push(S[i]);\n            }\n        }\n        \n        for(int i=0;i&lt;T.Length;i++){\n            if(T[i]=='#'){\n                if(stack2.Count!=0){\n                    stack2.Pop();\n                }\n            }\n            else{\n                stack2.Push(T[i]);\n            }\n        }\n        \n        if(stack1.Count != stack2.Count){\n            return false;\n        }\n        \n        while(stack1.Count&gt;0){\n            if(stack1.Pop()!=stack2.Pop()){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2317b6e6-406c-443f-9d8f-a2967128fb9d.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"backspace-string-compare-math-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1681,"title":"Circular Array Loop - Array - Medium - LeetCode","imageUrl":"icon_32298a91-8bd5-4e63-872d-105103726a20.jpg","dateCreated":"2020-11-19T09:05:08.281Z","dateModified":"2020-11-19T09:05:14.582Z","contributedBy":"sumitc91","content":"You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32298a91-8bd5-4e63-872d-105103726a20.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"circular-array-loop-array-medium-leetcode","total":0},{"id":1675,"title":"Majority Element II - Array - Medium - LeetCode","imageUrl":"icon_17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","dateCreated":"2020-11-18T12:22:28.829Z","dateModified":"2020-11-18T12:22:35.442Z","contributedBy":"sumitc91","content":"Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n&nbsp;\nExample 1:\nInput: nums = [3,2,3]<br />Output: [3]<br />Example 2:\nInput: nums =","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"majority-element-ii-array-medium-leetcode","total":0},{"id":1631,"title":"Largest Substring Between Two Equal Characters - Array - Easy - LeetCode","imageUrl":"icon_696afb81-fd63-43c4-a6e8-038e3152e83e.jpg","dateCreated":"2020-10-18T09:57:37.517Z","dateModified":"2020-10-18T09:57:48.765Z","contributedBy":"sumitc91","content":"Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\n&nbsp;\nExample 1:\nInput: s = \"aa\"<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/696afb81-fd63-43c4-a6e8-038e3152e83e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"largest-substring-between-two-equal-characters-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}