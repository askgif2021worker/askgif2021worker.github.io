{"id":1523,"title":"Replace All ? to Avoid Consecutive Repeating Characters - String - Easy - LeetCode","imageUrl":"icon_6d76f4d8-f4e4-4634-95a7-a35ea72d49c1.jpg","dateCreated":"2020-10-02T11:15:48.241Z","dateModified":"2020-10-02T11:16:05.876Z","contributedBy":"sumitc91","content":"<p>Given a string s containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.</p>\n<p>It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.</p>\n<p>Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: s = \"?zs\"<br />Output: \"azs\"<br />Explanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".<br />Example 2:</p>\n<p>Input: s = \"ubv?w\"<br />Output: \"ubvaw\"<br />Explanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".<br />Example 3:</p>\n<p>Input: s = \"j?qg??b\"<br />Output: \"jaqgacb\"<br />Example 4:</p>\n<p>Input: s = \"??yw?ipkj?\"<br />Output: \"acywaipkja\"<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= s.length &lt;= 100</p>\n<p>s contains only lower case English letters and '?'.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public string ModifyString(string s) { \n        if(s.Length == 0){\n            return \"\";\n        }\n        \n        if(s.Length==1){\n            return s[0]=='?'?\"a\":s;\n        }\n        var arr = s.ToCharArray();\n        for(int i=0;i&lt;arr.Length;i++){\n            if(arr[i]=='?'){\n                if(i==0){\n                    if(arr[i+1]=='a'){\n                        arr[i]='b';\n                    }\n                    else{\n                        arr[i]='a';\n                    }\n                }\n                else if(i==arr.Length-1){\n                    if(arr[i-1]=='a'){\n                        arr[i]='b';\n                    }\n                    else{\n                        arr[i]='a';\n                    }\n                }\n                else{\n                    if(arr[i-1]=='a' || arr[i+1]=='a'){\n                        if(arr[i-1]=='b' || arr[i+1]=='b'){\n                            arr[i]='c';\n                        }\n                        else{\n                            arr[i]='b';\n                        }\n                    }\n                    else{\n                        arr[i]='a';\n                    }\n                }\n            }            \n        }\n        \n        return new string(arr);\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6d76f4d8-f4e4-4634-95a7-a35ea72d49c1.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"replace-all-to-avoid-consecutive-repeating-characters-string-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"recommendations":[{"id":1623,"title":"Number of Lines To Write String - String - Easy - LeetCode","imageUrl":"icon_1c27d36c-1576-4ab8-bf0a-6787e2a1a3a0.jpg","dateCreated":"2020-10-17T11:18:12.621Z","dateModified":"2020-10-17T11:18:22.116Z","contributedBy":"sumitc91","content":"We are to write the letters of a given string S, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array widths, an array where widths[0] is the width","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1c27d36c-1576-4ab8-bf0a-6787e2a1a3a0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"number-of-lines-to-write-string-string-easy-leetcode","total":0},{"id":1616,"title":"Construct the Rectangle - Maths - Easy - LeetCode","imageUrl":"icon_b45219ed-7740-49ab-9ef5-a30a75eda886.jpg","dateCreated":"2020-10-17T04:16:55.036Z","dateModified":"2020-10-17T04:17:06.352Z","contributedBy":"sumitc91","content":"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page&rsquo;s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\nThe area of the rectangular web page you designed must ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b45219ed-7740-49ab-9ef5-a30a75eda886.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"}],"slug":"construct-the-rectangle-maths-easy-leetcode","total":0},{"id":1592,"title":"Increasing Order Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","dateCreated":"2020-10-09T07:45:00.338Z","dateModified":"2020-10-09T07:45:33.127Z","contributedBy":"sumitc91","content":"Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.\nExample 1:<br />Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]\n&nbsp; &nbsp; &nbsp; &nbsp;5<br />&nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"increasing-order-search-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}