{"id":1532,"title":"Peak Index in a Mountain Array - Array - Easy - LeetCode","imageUrl":"icon_34aca53b-c6e4-427b-945f-5c7881cdba25.jpg","dateCreated":"2020-10-03T09:30:34.939Z","dateModified":"2020-10-03T09:30:47.133Z","contributedBy":"sumitc91","content":"<p>Let's call an array arr a mountain if the following properties hold:</p>\n<p>arr.length &gt;= 3<br />There exists some i with 0 &lt; i &lt; arr.length - 1 such that:<br />arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i]<br />arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]<br />Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1].</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: arr = [0,1,0]<br />Output: 1<br />Example 2:</p>\n<p>Input: arr = [0,2,1,0]<br />Output: 1<br />Example 3:</p>\n<p>Input: arr = [0,10,5,2]<br />Output: 1<br />Example 4:</p>\n<p>Input: arr = [3,4,5,1]<br />Output: 2<br />Example 5:</p>\n<p>Input: arr = [24,69,100,99,79,78,67,36,26,19]<br />Output: 2<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>3 &lt;= arr.length &lt;= 104<br />0 &lt;= arr[i] &lt;= 106<br />arr is guaranteed to be a mountain array.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int PeakIndexInMountainArray(int[] arr) {\n        int start = 1;\n        int end = arr.Length-2;\n        while(start&lt;=end){\n            int mid = start + (end-start)/2;\n            if(arr[mid-1]&lt;arr[mid] &amp;&amp; arr[mid]&lt;arr[mid+1]){\n                start = mid + 1;\n            }\n            else if(arr[mid-1]&gt;arr[mid] &amp;&amp; arr[mid]&gt;arr[mid+1]){\n                end = mid - 1;\n            }\n            else{\n                return mid;\n            }\n        }\n        \n        return -1;\n    }\n}</code></pre>\n<p>Time Complexity: O(logn)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/34aca53b-c6e4-427b-945f-5c7881cdba25.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"peak-index-in-a-mountain-array-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-search","slug":"binary-search"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1635,"title":"New Year Chaos - Array - Medium - HackerRank","imageUrl":"icon_53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","dateCreated":"2020-10-24T07:14:47.121Z","dateModified":"2020-10-24T07:15:13.568Z","contributedBy":"sumitc91","content":"It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. Initial positions increment by &nbsp;from &nbsp;at the front of the line to &nbsp;at the back.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"hackerrank","slug":"hackerrank"},{"name":"मध्यम","slug":"medium"}],"slug":"new-year-chaos-array-medium-hackerrank","total":0},{"id":1625,"title":"Print in Order - Multi Threading - Easy - LeetCode","imageUrl":"icon_3e17a90d-8d3d-4655-9ad5-34bee8157e21.jpg","dateCreated":"2020-10-18T04:04:15.138Z","dateModified":"2020-10-18T04:04:52.636Z","contributedBy":"sumitc91","content":"Suppose we have a class:\npublic class Foo {<br />&nbsp; public void first() { print(\"first\"); }<br />&nbsp; public void second() { print(\"second\"); }<br />&nbsp; public void third() { print(\"third\"); }<br />}<br />The same instance of Foo will be passed to three different threads. Thread A","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3e17a90d-8d3d-4655-9ad5-34bee8157e21.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"multi-threading","slug":"multi-threading"}],"slug":"print-in-order-multi-threading-easy-leetcode","total":0},{"id":1592,"title":"Increasing Order Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","dateCreated":"2020-10-09T07:45:00.338Z","dateModified":"2020-10-09T07:45:33.127Z","contributedBy":"sumitc91","content":"Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.\nExample 1:<br />Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]\n&nbsp; &nbsp; &nbsp; &nbsp;5<br />&nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"increasing-order-search-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}