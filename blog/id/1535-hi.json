{"id":1535,"title":"Binary Watch - Immutable - Array - Easy - LeetCode","imageUrl":"icon_1e287cd8-b266-4f82-bd34-f9d44dadc5b4.jpg","dateCreated":"2020-10-03T10:45:00.286Z","dateModified":"2020-10-03T10:45:11.92Z","contributedBy":"sumitc91","content":"<p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).</p>\n<p>Each LED represents a zero or one, with the least significant bit on the right.</p>\n<p><br />For example, the above binary watch reads \"3:25\".</p>\n<p>Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>\n<p>Example:</p>\n<p>Input: n = 1<br />Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]<br />Note:<br />The order of output does not matter.<br />The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".<br />The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public IList&lt;string&gt; ReadBinaryWatch(int num) {\n        var res = new List&lt;string&gt;();\n        for(int i=0;i&lt;12;i++){\n            for(int j=0;j&lt;60;j++){\n                if(NumberOfSetBits(i)+NumberOfSetBits(j)==num){\n                    res.Add(i+\":\"+((j&lt;10)?\"0\":\"\")+j);\n                }\n            }\n        }\n        \n        return res;\n    }\n    \n    private int CountBits(int num){\n        int count = 0;\n        while (num != 0)\n        {\n            count++;\n            num &amp;= num - 1;\n        }\n        return count;\n    }\n    \n    private int NumberOfSetBits(int i)\n    {\n        i = i - ((i &gt;&gt; 1) &amp; 0x55555555);\n        i = (i &amp; 0x33333333) + ((i &gt;&gt; 2) &amp; 0x33333333);\n        return (((i + (i &gt;&gt; 4)) &amp; 0x0F0F0F0F) * 0x01010101) &gt;&gt; 24;\n    }\n}</code></pre>\n<p>Time Complexity: O(1) // since minutes and hours are constant.</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1e287cd8-b266-4f82-bd34-f9d44dadc5b4.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"binary-watch-immutable-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"backtracking","slug":"backtracking"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1718,"title":"Calculate Money in Leetcode Bank - Maths - Easy - LeetCode","imageUrl":"icon_8f7ac85a-3434-4f99-ba13-6b64b13831b7.jpg","dateCreated":"2021-01-10T05:17:33.968Z","dateModified":"2021-01-10T05:17:40.265Z","contributedBy":"sumitc91","content":"Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.\nHe starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8f7ac85a-3434-4f99-ba13-6b64b13831b7.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"गणित","slug":"maths"}],"slug":"calculate-money-in-leetcode-bank-maths-easy-leetcode","total":0},{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1664,"title":"Design an Ordered Stream - Array - Easy - LeetCode","imageUrl":"icon_ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","dateCreated":"2020-11-16T03:10:10.642Z","dateModified":"2020-11-16T03:10:15.886Z","contributedBy":"sumitc91","content":"There are n (id, value) pairs, where id is an integer between 1 and n and value is a string. No two pairs have the same id.\nDesign a stream that takes the n pairs in an arbitrary order, and returns the values over several calls in increasing order of their ids.\nImplement the Ordered","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-an-ordered-stream-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}