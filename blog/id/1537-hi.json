{"id":1537,"title":"Implement Queue using Stacks - Stack - Easy - LeetCode","imageUrl":"icon_c936be58-88e9-44a4-8a17-123b102b3e6f.jpg","dateCreated":"2020-10-03T11:45:37.423Z","dateModified":"2020-10-03T11:46:14.88Z","contributedBy":"sumitc91","content":"<p>Implement the following operations of a queue using stacks.</p>\n<p>push(x) -- Push element x to the back of the queue.<br />pop() -- Removes the element from in front of the queue.<br />peek() -- Get the front element.<br />empty() -- Return whether the queue is empty.<br />Notes:</p>\n<p>You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.<br />Depending on your language, the stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.<br />You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).<br />&nbsp;</p>\n<p>Example 1:</p>\n<p>Input<br />[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]<br />[[], [1], [2], [], [], []]<br />Output<br />[null, null, null, 1, 1, false]</p>\n<p>Explanation<br />MyQueue myQueue = new MyQueue();<br />myQueue.push(1);<br />myQueue.push(2);<br />myQueue.peek(); // return 1<br />myQueue.pop(); // return 1<br />myQueue.empty(); // return False<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= x &lt; 10<br />At most 100 calls will be made to push, pop, peek, and empty.</p>\n<pre class=\"language-csharp\"><code>public class MyQueue {\n\n    Stack&lt;int&gt; stack1;\n    Stack&lt;int&gt; stack2;\n    /** Initialize your data structure here. */\n    public MyQueue() {\n        stack1 = new Stack&lt;int&gt;();\n        stack2 = new Stack&lt;int&gt;();\n    }\n    \n    /** Push element x to the back of queue. */\n    public void Push(int x) {\n        stack1.Push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    public int Pop() {\n        if(stack2.Count()&lt;1){\n            while(stack1.Count()&gt;0){\n                stack2.Push(stack1.Pop());\n            }\n        }\n        \n        return stack2.Pop();\n    }\n    \n    /** Get the front element. */\n    public int Peek() {\n        if(stack2.Count&lt;1){\n            while(stack1.Count()&gt;0){\n                stack2.Push(stack1.Pop());\n            }\n        }\n        return stack2.Peek();\n    }\n    \n    /** Returns whether the queue is empty. */\n    public bool Empty() {\n        return stack1.Count()&lt;1 &amp;&amp; stack2.Count()&lt;1;\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Peek();\n * bool param_4 = obj.Empty();\n */</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c936be58-88e9-44a4-8a17-123b102b3e6f.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"implement-queue-using-stacks-stack-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"recommendations":[{"id":1710,"title":"Count the Number of Consistent Strings - String - Easy - LeetCode","imageUrl":"icon_6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","dateCreated":"2020-12-28T13:45:06.506Z","dateModified":"2020-12-28T13:45:12.666Z","contributedBy":"sumitc91","content":"You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.\n&nbsp;\nExample 1:\nInput: all","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"count-the-number-of-consistent-strings-string-easy-leetcode","total":0},{"id":1675,"title":"Majority Element II - Array - Medium - LeetCode","imageUrl":"icon_17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","dateCreated":"2020-11-18T12:22:28.829Z","dateModified":"2020-11-18T12:22:35.442Z","contributedBy":"sumitc91","content":"Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n&nbsp;\nExample 1:\nInput: nums = [3,2,3]<br />Output: [3]<br />Example 2:\nInput: nums =","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"majority-element-ii-array-medium-leetcode","total":0},{"id":1633,"title":"3Sum - Array - Medium - LeetCode","imageUrl":"icon_b05855a6-ac78-4434-a041-4682444c76bc.jpg","dateCreated":"2020-10-19T04:39:11.508Z","dateModified":"2020-10-19T04:39:21.598Z","contributedBy":"sumitc91","content":"Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNotice that the solution set must not contain duplicate triplets.\n&nbsp;\nExample 1:\nInput: nums = [-1,0,1,2","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b05855a6-ac78-4434-a041-4682444c76bc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"3sum-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}