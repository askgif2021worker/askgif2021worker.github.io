{"id":1540,"title":"Remove Outermost Parentheses - Stacks - Easy - LeetCode","imageUrl":"icon_6315b40b-4be9-4bf6-97e7-331f0ce835f3.jpg","dateCreated":"2020-10-03T14:10:42.368Z","dateModified":"2020-10-03T14:10:53.793Z","contributedBy":"sumitc91","content":"<p>A valid parentheses string is either empty (\"\"), \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation. &nbsp;For example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings.</p>\n<p>A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.</p>\n<p>Given a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + ... + P_k, where P_i are primitive valid parentheses strings.</p>\n<p>Return S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: \"(()())(())\"<br />Output: \"()()()\"<br />Explanation:&nbsp;<br />The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".<br />After removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".<br />Example 2:</p>\n<p>Input: \"(()())(())(()(()))\"<br />Output: \"()()()()(())\"<br />Explanation:&nbsp;<br />The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".<br />After removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".<br />Example 3:</p>\n<p>Input: \"()()\"<br />Output: \"\"<br />Explanation:&nbsp;<br />The input string is \"()()\", with primitive decomposition \"()\" + \"()\".<br />After removing outer parentheses of each part, this is \"\" + \"\" = \"\".<br />&nbsp;</p>\n<p>Note:</p>\n<p>S.length &lt;= 10000<br />S[i] is \"(\" or \")\"<br />S is a valid parentheses string</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public string RemoveOuterParentheses(string S) {\n        var sb = new StringBuilder();\n        var stack = new Stack&lt;char&gt;();  \n        var open = 0;\n        for(int i=0;i&lt;S.Length;i++){\n            if(S[i]=='('){\n                if(open&gt;0){\n                    sb.Append(\"(\");\n                }\n                open++;             \n            }\n            else if(S[i]==')'){\n                if(open&gt;1){\n                    sb.Append(\")\");\n                }\n                open--;\n            }            \n        }\n        \n        return sb.ToString();\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6315b40b-4be9-4bf6-97e7-331f0ce835f3.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"remove-outermost-parentheses-stacks-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"recommendations":[{"id":1717,"title":"Task Scheduler - Array - Medium - LeetCode","imageUrl":"icon_ce3e557e-274e-4956-a16f-a62c66777be4.jpg","dateCreated":"2021-01-09T09:25:26.524Z","dateModified":"2021-01-09T09:25:33.09Z","contributedBy":"sumitc91","content":"Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\nHowever, there is","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ce3e557e-274e-4956-a16f-a62c66777be4.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"task-scheduler-array-medium-leetcode","total":0},{"id":1704,"title":"Shortest Unsorted Continuous Subarray - Array - Medium - LeetCode","imageUrl":"icon_8ae155ae-c65a-4be5-8bc2-0e72f6588a6a.jpg","dateCreated":"2020-11-21T08:37:40.528Z","dateModified":"2020-11-21T08:37:59.841Z","contributedBy":"sumitc91","content":"Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\nReturn the shortest such subarray and output its length.\n&nbsp;\nExample 1:\nInput: nums ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8ae155ae-c65a-4be5-8bc2-0e72f6588a6a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"shortest-unsorted-continuous-subarray-array-medium-leetcode","total":0},{"id":1638,"title":"Next Permutation - Array - Medium - LeetCode","imageUrl":"icon_467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","dateCreated":"2020-10-24T11:58:46.632Z","dateModified":"2020-10-24T11:59:00.039Z","contributedBy":"sumitc91","content":"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\nThe replacement must be in place and use ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"next-permutation-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}