{"id":1543,"title":"Crawler Log Folder - Stacks - Easy - LeetCode","imageUrl":"icon_32e1873a-b4f9-4731-8f9d-98d4d9928abe.jpg","dateCreated":"2020-10-03T14:41:29.811Z","dateModified":"2020-10-03T14:41:42.417Z","contributedBy":"sumitc91","content":"<p>The Leetcode file system keeps a log each time some user performs a change folder operation.</p>\n<p>The operations are described below:</p>\n<p>\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).<br />\"./\" : Remain in the same folder.<br />\"x/\" : Move to the child folder named x (This folder is guaranteed to always exist).<br />You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.</p>\n<p>The file system starts in the main folder, then the operations in logs are performed.</p>\n<p>Return the minimum number of operations needed to go back to the main folder after the change folder operations.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>&nbsp;</p>\n<p>Input: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]<br />Output: 2<br />Explanation: Use this change folder operation \"../\" 2 times and go back to the main folder.<br />Example 2:</p>\n<p>&nbsp;</p>\n<p>Input: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]<br />Output: 3<br />Example 3:</p>\n<p>Input: logs = [\"d1/\",\"../\",\"../\",\"../\"]<br />Output: 0<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= logs.length &lt;= 103<br />2 &lt;= logs[i].length &lt;= 10<br />logs[i] contains lowercase English letters, digits, '.', and '/'.<br />logs[i] follows the format described in the statement.<br />Folder names consist of lowercase English letters and digits.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int MinOperations(string[] logs) {\n        var stack = new Stack&lt;string&gt;();\n        for(int i=0;i&lt;logs.Length;i++){\n            switch(logs[i]){\n                case \"../\":\n                    if(stack.Count()&gt;0){\n                        stack.Pop();   \n                    }                    \n                    break;\n                case \"./\":\n                    break;\n                default:\n                    stack.Push(logs[i]);\n                    break;\n            }\n        }\n        \n        return stack.Count();\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32e1873a-b4f9-4731-8f9d-98d4d9928abe.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"crawler-log-folder-stacks-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"recommendations":[{"id":1656,"title":"Subsets - Array - Medium - LeetCode","imageUrl":"icon_a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","dateCreated":"2020-10-31T16:06:14.288Z","dateModified":"2020-10-31T16:06:19.933Z","contributedBy":"sumitc91","content":"Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]<br />Output:<br />[<br />&nbsp; [3],<br />&nbsp; [1],<br />&nbsp; [2],<br />&nbsp; [1,2,3],<br />&nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subsets-array-medium-leetcode","total":0},{"id":1604,"title":"Second Highest Salary - Sql - Easy - LeetCode","imageUrl":"icon_cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","dateCreated":"2020-10-16T06:01:26.855Z","dateModified":"2020-10-16T06:01:35.503Z","contributedBy":"sumitc91","content":"Write a SQL query to get the second highest salary from the Employee table.\n+----+--------+<br />| Id | Salary |<br />+----+--------+<br />| 1 &nbsp;| 100 &nbsp; &nbsp;|<br />| 2 &nbsp;| 200 &nbsp; &nbsp;|<br />| 3 &nbsp;| 300 &nbsp; &nbsp;|<br />+----+--------+<br />For example, given the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"second-highest-salary-sql-easy-leetcode","total":0},{"id":1600,"title":"Design Parking System - Design - Easy - LeetCode","imageUrl":"icon_2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","dateCreated":"2020-10-15T05:28:49.957Z","dateModified":"2020-10-15T05:49:22.82Z","contributedBy":"sumitc91","content":"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:\nParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"design","slug":"design"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-parking-system-design-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}