{"id":1548,"title":"Walking Robot Simulation - Greedy - Easy - LeetCode","imageUrl":"icon_7809996e-466c-4a9b-84d4-a004918a469b.jpg","dateCreated":"2020-10-05T06:58:36.636Z","dateModified":"2020-10-05T06:58:55.25Z","contributedBy":"sumitc91","content":"<p>A robot on an infinite grid starts at point (0, 0) and faces north. &nbsp;The robot can receive one of three possible types of commands:</p>\n<p>-2: turn left 90 degrees<br />-1: turn right 90 degrees<br />1 &lt;= x &lt;= 9: move forward x units<br />Some of the grid squares are obstacles.&nbsp;</p>\n<p>The i-th obstacle is at grid point (obstacles[i][0], obstacles[i][1])</p>\n<p>If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)</p>\n<p>Return the square of the maximum Euclidean distance that the robot will be from the origin.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: commands = [4,-1,3], obstacles = []<br />Output: 25<br />Explanation: robot will go to (3, 4)<br />Example 2:</p>\n<p>Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]<br />Output: 65<br />Explanation: robot will be stuck at (1, 4) before turning left and going to (1, 8)<br />&nbsp;</p>\n<p>Note:</p>\n<p>0 &lt;= commands.length &lt;= 10000<br />0 &lt;= obstacles.length &lt;= 10000<br />-30000 &lt;= obstacle[i][0] &lt;= 30000<br />-30000 &lt;= obstacle[i][1] &lt;= 30000<br />The answer is guaranteed to be less than 2 ^ 31.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    char face = 'N';\n    public int RobotSim(int[] commands, int[][] obstacles) {        \n        int x =0;\n        int y = 0;\n        int maxDistance = 0;\n        var set = new HashSet&lt;string&gt;();\n        for(int i=0;i&lt;obstacles.Length;i++){\n            set.Add(GetKey(obstacles[i][0],obstacles[i][1]));\n        }\n        \n        for(int i=0;i&lt;commands.Length;i++){\n            if(commands[i]==-2){\n                TurnLeft();\n            }\n            else if(commands[i]==-1){\n                TurnRight();\n            }\n            else{\n                for(int j=1;j&lt;=commands[i];j++){\n                    int tx = x + GetValue('x');\n                    int ty = y + GetValue('y');\n                    if(set.Contains(GetKey(tx,ty))){\n                        break;\n                    }\n                    x = tx;\n                    y = ty;\n                }\n            }\n            maxDistance = Math.Max(maxDistance, x*x+y*y);\n        }\n        \n        return maxDistance;\n    }\n    \n    private string GetKey(int x, int y){\n        return x+\" \"+y;\n    }\n    \n    private int GetValue(char ch){\n        if(ch=='x'){\n            if(face=='E'){\n                return 1;\n            }\n            else if(face == 'W'){\n                return -1;\n            }\n        }\n        else if(ch=='y'){\n            if(face=='N'){\n                return 1;\n            }\n            else if(face == 'S'){\n                return -1;\n            }\n        }\n        return 0;\n    }\n    \n    private void TurnLeft(){\n        switch(face){\n            case 'E':\n                face = 'N';\n                break;\n            case 'W':\n                face = 'S';\n                break;\n            case 'N':\n                face = 'W';\n                break;\n            case 'S':\n                face = 'E';\n                break;\n        }\n    }\n    \n    private void TurnRight(){\n        switch(face){\n            case 'E':\n                face = 'S';\n                break;\n            case 'W':\n                face = 'N';\n                break;\n            case 'N':\n                face = 'E';\n                break;\n            case 'S':\n                face = 'W';\n                break;\n        }\n    }\n}</code></pre>\n<p>Time Complexity: O(n*m)</p>\n<p>Space Complexity: O(n)</p>\n<p>Where n is the number of inputs and m is the length of steps</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7809996e-466c-4a9b-84d4-a004918a469b.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"walking-robot-simulation-greedy-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"greedy","slug":"greedy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1706,"title":"Check If Two String Arrays are Equivalent - String - Easy - LeetCode","imageUrl":"icon_38460c51-4f08-46d0-82ef-1f2263c60127.jpg","dateCreated":"2020-11-24T13:04:46.01Z","dateModified":"2020-11-24T13:04:50.906Z","contributedBy":"sumitc91","content":"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n&nbsp;\nExample 1:\nInput: word1 = [\"ab\", \"c\"], word2 ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38460c51-4f08-46d0-82ef-1f2263c60127.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"check-if-two-string-arrays-are-equivalent-string-easy-leetcode","total":0},{"id":1641,"title":"Combination Sum - Array - Medium - LeetCode","imageUrl":"icon_b42ea67c-de94-42f6-aa57-391837827a47.jpg","dateCreated":"2020-10-25T14:37:09.044Z","dateModified":"2020-10-25T14:37:53.305Z","contributedBy":"sumitc91","content":"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of time","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b42ea67c-de94-42f6-aa57-391837827a47.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"combination-sum-array-medium-leetcode","total":0},{"id":1604,"title":"Second Highest Salary - Sql - Easy - LeetCode","imageUrl":"icon_cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","dateCreated":"2020-10-16T06:01:26.855Z","dateModified":"2020-10-16T06:01:35.503Z","contributedBy":"sumitc91","content":"Write a SQL query to get the second highest salary from the Employee table.\n+----+--------+<br />| Id | Salary |<br />+----+--------+<br />| 1 &nbsp;| 100 &nbsp; &nbsp;|<br />| 2 &nbsp;| 200 &nbsp; &nbsp;|<br />| 3 &nbsp;| 300 &nbsp; &nbsp;|<br />+----+--------+<br />For example, given the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"second-highest-salary-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}