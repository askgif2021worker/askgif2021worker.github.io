{"id":1553,"title":"Matrix Cells in Distance Order - Sort - Easy - LeetCode","imageUrl":"icon_740965fd-d849-4ae0-8784-87f437a62181.jpg","dateCreated":"2020-10-05T10:29:34.035Z","dateModified":"2020-10-05T10:29:44.075Z","contributedBy":"sumitc91","content":"<p>We are given a matrix with R rows and C columns has cells with integer coordinates (r, c), where 0 &lt;= r &lt; R and 0 &lt;= c &lt; C.</p>\n<p>Additionally, we are given a cell in that matrix with coordinates (r0, c0).</p>\n<p>Return the coordinates of all cells in the matrix, sorted by their distance from (r0, c0) from smallest distance to largest distance. &nbsp;Here, the distance between two cells (r1, c1) and (r2, c2) is the Manhattan distance, |r1 - r2| + |c1 - c2|. &nbsp;(You may return the answer in any order that satisfies this condition.)</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: R = 1, C = 2, r0 = 0, c0 = 0<br />Output: [[0,0],[0,1]]<br />Explanation: The distances from (r0, c0) to other cells are: [0,1]<br />Example 2:</p>\n<p>Input: R = 2, C = 2, r0 = 0, c0 = 1<br />Output: [[0,1],[0,0],[1,1],[1,0]]<br />Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2]<br />The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.<br />Example 3:</p>\n<p>Input: R = 2, C = 3, r0 = 1, c0 = 2<br />Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]<br />Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2,2,3]<br />There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].<br />&nbsp;</p>\n<p>Note:</p>\n<p>1 &lt;= R &lt;= 100<br />1 &lt;= C &lt;= 100<br />0 &lt;= r0 &lt; R<br />0 &lt;= c0 &lt; C</p>\n<pre class=\"language-csharp\"><code>public class Solution {    \n    public int[][] AllCellsDistOrder(int R, int C, int r0, int c0) {\n        var ans=new List&lt;int[]&gt;();\n        var queue=new Queue&lt;int[]&gt;();\n        \n        var visited=new int[R,C];\n        \n        queue.Enqueue(new int[]{r0,c0});\n        visited[r0,c0]=1;\n        while(queue.Count&gt;0){\n            var current=queue.Dequeue();\n            ans.Add(current);\n            enqueue(R,C,current[0]-1,current[1], visited,queue);\n            enqueue(R,C,current[0]+1,current[1],visited,queue);\n            enqueue(R,C,current[0],current[1]-1,visited,queue);\n            enqueue(R,C,current[0],current[1]+1,visited,queue);                \n        }\n        return ans.ToArray();\n    }\n    \n    private void enqueue(int R, int C, int i,int j, int[,] visited, Queue&lt;int[]&gt; queue){\n        if(i&gt;=0&amp;&amp;i&lt;R&amp;&amp;j&gt;=0&amp;&amp;j&lt;C&amp;&amp;visited[i,j]==0){\n            queue.Enqueue(new int[]{i,j});\n            visited[i,j]=1;\n        }\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/740965fd-d849-4ae0-8784-87f437a62181.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"matrix-cells-in-distance-order-sort-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"},{"name":"sorting","slug":"sorting"}],"recommendations":[{"id":1710,"title":"Count the Number of Consistent Strings - String - Easy - LeetCode","imageUrl":"icon_6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","dateCreated":"2020-12-28T13:45:06.506Z","dateModified":"2020-12-28T13:45:12.666Z","contributedBy":"sumitc91","content":"You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.\n&nbsp;\nExample 1:\nInput: all","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"count-the-number-of-consistent-strings-string-easy-leetcode","total":0},{"id":1679,"title":"Insert Delete GetRandom O(1) - Array - Medium - LeetCode","imageUrl":"icon_8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","dateCreated":"2020-11-19T06:35:11.658Z","dateModified":"2020-11-19T06:35:19.394Z","contributedBy":"sumitc91","content":"Implement the RandomizedSet class:\nbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.<br />bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"insert-delete-getrandom-o1-array-medium-leetcode","total":0},{"id":1659,"title":"Sort Array by Increasing Frequency - Array - Medium - LeetCode","imageUrl":"icon_0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","dateCreated":"2020-11-03T05:02:58.417Z","dateModified":"2020-11-03T05:10:52.862Z","contributedBy":"sumitc91","content":"Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.\n&nbsp;\nExample 1:\nInput: nums = [1,1,2,2,2,3]<br />Output: [3,1","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"sort-array-by-increasing-frequency-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}