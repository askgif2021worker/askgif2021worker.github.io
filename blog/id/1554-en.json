{"id":1554,"title":"Sort Integers by The Number of 1 Bits - Sort - Easy - LeetCode","imageUrl":"icon_7007c4d9-2958-4b6a-8a5e-379076ab7b5f.jpg","dateCreated":"2020-10-05T10:44:45.35Z","dateModified":"2020-10-05T10:45:04.655Z","contributedBy":"sumitc91","content":"<p>Given an integer array arr. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.</p>\n<p>Return the sorted array.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: arr = [0,1,2,3,4,5,6,7,8]<br />Output: [0,1,2,4,8,3,5,6,7]<br />Explantion: [0] is the only integer with 0 bits.<br />[1,2,4,8] all have 1 bit.<br />[3,5,6] have 2 bits.<br />[7] has 3 bits.<br />The sorted array by bits is [0,1,2,4,8,3,5,6,7]<br />Example 2:</p>\n<p>Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]<br />Output: [1,2,4,8,16,32,64,128,256,512,1024]<br />Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.<br />Example 3:</p>\n<p>Input: arr = [10000,10000]<br />Output: [10000,10000]<br />Example 4:</p>\n<p>Input: arr = [2,3,5,7,11,13,17,19]<br />Output: [2,3,5,17,7,11,13,19]<br />Example 5:</p>\n<p>Input: arr = [10,100,1000,10000]<br />Output: [10,100,10000,1000]<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= arr.length &lt;= 500<br />0 &lt;= arr[i] &lt;= 10^4</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int[] SortByBits(int[] arr) {\n        for(int i=0;i&lt;arr.Length;i++){\n            arr[i]+=BitCount(arr[i])*10001;\n        }\n        \n        Array.Sort(arr);\n        \n        for(int i=0;i&lt;arr.Length;i++){\n            arr[i]=arr[i]%10001;\n        }\n        \n        return arr;\n    }\n    \n    private int BitCount(int num){\n        if(num==0){\n            return 0;\n        }\n        int count = 0;        \n        while(num&gt;0){\n            count+=num &amp; 1;\n            num=num&gt;&gt;1;\n        }\n        return count;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>\n<p><br />Since the input values can range from 0 to 10000, we can add to each element on the array the value of the bit count (the number of 1s) multiplied by 10001.<br />10001 is not a magic number, it is merely the max possible number the array may have + 1, which ensures that the bit count has the maximum priority,<br />and that we do not mistakenly erase a number when reverting the array back to its original values (after sorting).<br />This approach is an effective way of sorting by more than one criteria, a similar logic could be applied to more complex problems. &nbsp; &nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7007c4d9-2958-4b6a-8a5e-379076ab7b5f.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"sort-integers-by-the-number-of-1-bits-sort-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"sorting","slug":"sorting"}],"recommendations":[{"id":1722,"title":"Latest Time by Replacing Hidden Digits - String - Easy - LeetCode","imageUrl":"icon_370ef122-a2da-4596-8095-2a518775a5cb.jpg","dateCreated":"2021-01-26T09:27:11.691Z","dateModified":"2021-01-26T09:27:17.976Z","contributedBy":"sumitc91","content":"You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\n&nbsp;","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/370ef122-a2da-4596-8095-2a518775a5cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"latest-time-by-replacing-hidden-digits-string-easy-leetcode","total":0},{"id":1706,"title":"Check If Two String Arrays are Equivalent - String - Easy - LeetCode","imageUrl":"icon_38460c51-4f08-46d0-82ef-1f2263c60127.jpg","dateCreated":"2020-11-24T13:04:46.01Z","dateModified":"2020-11-24T13:04:50.906Z","contributedBy":"sumitc91","content":"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n&nbsp;\nExample 1:\nInput: word1 = [\"ab\", \"c\"], word2 ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38460c51-4f08-46d0-82ef-1f2263c60127.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"check-if-two-string-arrays-are-equivalent-string-easy-leetcode","total":0},{"id":1649,"title":"Spiral Matrix II - Array - Medium - LeetCode","imageUrl":"icon_6df8412b-55e5-4d25-9094-489e2623ffe0.jpg","dateCreated":"2020-10-31T08:11:06.067Z","dateModified":"2020-10-31T08:11:30.766Z","contributedBy":"sumitc91","content":"Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.\nExample:\nInput: 3<br />Output:<br />[<br />&nbsp;[ 1, 2, 3 ],<br />&nbsp;[ 8, 9, 4 ],<br />&nbsp;[ 7, 6, 5 ]<br />]\n&nbsp;\n<pre class=\"language-csharp\"><code>public cla","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6df8412b-55e5-4d25-9094-489e2623ffe0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"spiral-matrix-ii-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}