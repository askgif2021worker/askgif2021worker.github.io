{"id":1556,"title":"Reverse Bits - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_d4b2e860-6b2d-4640-82db-af6eab2ed36a.jpg","dateCreated":"2020-10-05T11:53:31.208Z","dateModified":"2020-10-05T11:53:39.094Z","contributedBy":"sumitc91","content":"<p>Reverse bits of a given 32 bits unsigned integer.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: 00000010100101000001111010011100<br />Output: 00111001011110000010100101000000<br />Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.<br />Example 2:</p>\n<p>Input: 11111111111111111111111111111101<br />Output: 10111111111111111111111111111111<br />Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.<br />&nbsp;</p>\n<p>Note:</p>\n<p>Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.<br />In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above the input represents the signed integer -3 and the output represents the signed integer -1073741825.<br />&nbsp;</p>\n<p>Follow up:</p>\n<p>If this function is called many times, how would you optimize it?</p>\n<p>&nbsp;</p>\n<p>Constraints:</p>\n<p>The input must be a binary string of length = 32</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public uint reverseBits(uint n) {\n        uint res = 0;\n        for(int i=0;i&lt;32;i++)\n        {\n            res &lt;&lt;= 1;\n            res = res + (n &amp; 1);\n            n &gt;&gt;=1;\n        }\n        return res;\n    }\n}</code></pre>\n<p>Time Complexity: O(logn) - i.e number of binary digits.</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d4b2e860-6b2d-4640-82db-af6eab2ed36a.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"reverse-bits-bit-manipulation-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1723,"title":"Beautiful Arrangement II - Maths - Medium - LeetCode","imageUrl":"icon_b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","dateCreated":"2021-01-26T13:09:40.384Z","dateModified":"2021-01-26T13:09:46.827Z","contributedBy":"sumitc91","content":"Given two integers n and k, you need to construct a list that contains n different positive integers ranging from 1 to n and obeys the following requirement:<br />Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b2d502bc-0983-4102-b87f-e37eff0ed0db.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"},{"name":"medium","slug":"medium"}],"slug":"beautiful-arrangement-ii-maths-medium-leetcode","total":0},{"id":1652,"title":"Minimum Path Sum - Array - Medium - LeetCode","imageUrl":"icon_d9f5ff7a-791f-41b0-89b0-f12760706d99.jpg","dateCreated":"2020-10-31T09:04:08.041Z","dateModified":"2020-10-31T09:04:16.725Z","contributedBy":"sumitc91","content":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample:\nInput:<br />[<br />&nbsp; [1,3,1],<br />&nbsp; [1,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d9f5ff7a-791f-41b0-89b0-f12760706d99.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"minimum-path-sum-array-medium-leetcode","total":0},{"id":1628,"title":"Special Array With X Elements Greater Than or Equal X - Array - Easy - LeetCode","imageUrl":"icon_8f426000-750a-4ff1-bb71-5a34851ae354.jpg","dateCreated":"2020-10-18T06:57:23.217Z","dateModified":"2020-10-18T06:57:30.65Z","contributedBy":"sumitc91","content":"You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, othe","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8f426000-750a-4ff1-bb71-5a34851ae354.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"special-array-with-x-elements-greater-than-or-equal-x-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}