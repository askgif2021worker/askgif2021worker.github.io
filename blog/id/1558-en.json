{"id":1558,"title":"Power of Four - Easy - LeetCode","imageUrl":"icon_e049be7d-b0a4-4781-8dd9-03334b15e391.jpg","dateCreated":"2020-10-05T12:57:40.213Z","dateModified":"2020-10-05T12:57:53.062Z","contributedBy":"sumitc91","content":"<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>\n<p>Example 1:</p>\n<p>Input: 16<br />Output: true<br />Example 2:</p>\n<p>Input: 5<br />Output: false<br />Follow up: Could you solve it without loops/recursion?</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool IsPowerOfFour(int num) {\n        if(num&lt;=0){\n            return false;            \n        }\n        \n        if((num &amp; (num-1))!= 0){\n            return false;\n        }\n        \n        return (num-1)%3==0;\n    }\n}</code></pre>\n<p>Time Complexity: O(1)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e049be7d-b0a4-4781-8dd9-03334b15e391.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"power-of-four-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1663,"title":"Defuse the Bomb - Array - Easy - LeetCode","imageUrl":"icon_e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","dateCreated":"2020-11-15T15:48:36.584Z","dateModified":"2020-11-15T15:48:43.094Z","contributedBy":"sumitc91","content":"You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\nIf k &gt; 0, replace the ith number with th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e0c7ac1d-e52e-489e-849e-a7842cdb2c18.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"defuse-the-bomb-array-easy-leetcode","total":0},{"id":1634,"title":"3Sum Closest - Array - Medium - LeetCode","imageUrl":"icon_981f57b3-a4c6-4c16-baeb-a49e75fe9497.jpg","dateCreated":"2020-10-23T07:22:34.29Z","dateModified":"2020-10-23T07:22:55.266Z","contributedBy":"sumitc91","content":"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n&nbsp;\nExample 1:\nInput: nums = [-1,2,1,-4], targ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/981f57b3-a4c6-4c16-baeb-a49e75fe9497.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"3sum-closest-array-medium-leetcode","total":0},{"id":1597,"title":"Flood Fill - Tree - Easy - LeetCode","imageUrl":"icon_0e3c9311-ee03-4845-8887-471eb8b67c05.jpg","dateCreated":"2020-10-09T13:26:25.345Z","dateModified":"2020-10-09T13:26:36.925Z","contributedBy":"sumitc91","content":"An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\nGiven a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, \"flood fill\" the image.\nTo perfor","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0e3c9311-ee03-4845-8887-471eb8b67c05.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"flood-fill-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}