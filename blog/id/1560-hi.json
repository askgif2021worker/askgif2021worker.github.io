{"id":1560,"title":"Hamming Distance - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_542a96ad-853b-4bcf-ae4a-fb6955795b7b.jpg","dateCreated":"2020-10-06T06:44:12.218Z","dateModified":"2020-10-06T06:45:08.921Z","contributedBy":"sumitc91","content":"<p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>\n<p>Given two integers x and y, calculate the Hamming distance.</p>\n<p>Note:<br />0 &le; x, y &lt; 231.</p>\n<p>Example:</p>\n<p>Input: x = 1, y = 4</p>\n<p>Output: 2</p>\n<p>Explanation:<br />1 &nbsp; (0 0 0 1)<br />4 &nbsp; (0 1 0 0)<br />&nbsp; &nbsp; &nbsp; &nbsp;&uarr; &nbsp; &uarr;</p>\n<p>The above arrows point to positions where the corresponding bits are different.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int HammingDistance(int x, int y) {\n        int diff = 0;\n        for(int i=0;i&lt;32;i++){\n            int x1 = x&amp;1;\n            int y1 = y&amp;1;\n            if(x1!=y1){\n                diff++;\n            }\n            x=x&gt;&gt;1;\n            y=y&gt;&gt;1;\n        }\n        return diff;\n    }\n}</code></pre>\n<p>Time Complexity: O(nlogn) which is the number of digits.</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/542a96ad-853b-4bcf-ae4a-fb6955795b7b.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"hamming-distance-bit-manipulation-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1666,"title":"Construct Binary Tree from Preorder and Inorder Traversal - Array - Medium - LeetCode","imageUrl":"icon_af4cfea8-d43c-4a5f-aded-bc8e7ebfe296.jpg","dateCreated":"2020-11-17T10:00:03.216Z","dateModified":"2020-11-17T10:00:07.655Z","contributedBy":"sumitc91","content":"Given preorder and inorder traversal of a tree, construct the binary tree.\nNote:<br />You may assume that duplicates do not exist in the tree.\nFor example, given\npreorder = [3,9,20,15,7]<br />inorder = [9,3,15,20,7]<br />Return the following binary tree:\n&nbsp; &nbsp; ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/af4cfea8-d43c-4a5f-aded-bc8e7ebfe296.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"construct-binary-tree-from-preorder-and-inorder-traversal-array-medium-leetcode","total":0},{"id":1628,"title":"Special Array With X Elements Greater Than or Equal X - Array - Easy - LeetCode","imageUrl":"icon_8f426000-750a-4ff1-bb71-5a34851ae354.jpg","dateCreated":"2020-10-18T06:57:23.217Z","dateModified":"2020-10-18T06:57:30.65Z","contributedBy":"sumitc91","content":"You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, othe","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8f426000-750a-4ff1-bb71-5a34851ae354.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"special-array-with-x-elements-greater-than-or-equal-x-array-easy-leetcode","total":0},{"id":1612,"title":"Delete Duplicate Emails - SQL - Easy - LeetCode","imageUrl":"icon_a8c368b1-ddbd-45ca-96b4-7558b7166a74.jpg","dateCreated":"2020-10-16T11:31:27.16Z","dateModified":"2020-10-16T11:31:37.404Z","contributedBy":"sumitc91","content":"Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.\n+----+------------------+<br />| Id | Email &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />+----+------------------+<br />| 1 &nbsp;| john@example.com |<br","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a8c368b1-ddbd-45ca-96b4-7558b7166a74.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"delete-duplicate-emails-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}