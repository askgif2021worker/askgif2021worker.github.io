{"id":1563,"title":"Prime Number of Set Bits in Binary Representation - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_8ff23690-a1ec-487a-a860-51faf94bafb7.jpg","dateCreated":"2020-10-06T09:32:36.994Z","dateModified":"2020-10-06T09:32:44.766Z","contributedBy":"sumitc91","content":"<p>Given two integers L and R, find the count of numbers in the range [L, R] (inclusive) having a prime number of set bits in their binary representation.</p>\n<p>(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits. Also, 1 is not a prime.)</p>\n<p>Example 1:</p>\n<p>Input: L = 6, R = 10<br />Output: 4<br />Explanation:<br />6 -&gt; 110 (2 set bits, 2 is prime)<br />7 -&gt; 111 (3 set bits, 3 is prime)<br />9 -&gt; 1001 (2 set bits , 2 is prime)<br />10-&gt;1010 (2 set bits , 2 is prime)<br />Example 2:</p>\n<p>Input: L = 10, R = 15<br />Output: 5<br />Explanation:<br />10 -&gt; 1010 (2 set bits, 2 is prime)<br />11 -&gt; 1011 (3 set bits, 3 is prime)<br />12 -&gt; 1100 (2 set bits, 2 is prime)<br />13 -&gt; 1101 (3 set bits, 3 is prime)<br />14 -&gt; 1110 (3 set bits, 3 is prime)<br />15 -&gt; 1111 (4 set bits, 4 is not prime)<br />Note:</p>\n<p>L, R will be integers L &lt;= R in the range [1, 10^6].<br />R - L will be at most 10000.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int CountPrimeSetBits(int L, int R) {\n        int count=0;\n        \n        var set = new HashSet&lt;int&gt;();\n        set.Add(2);\n        set.Add(3);\n        set.Add(5);\n        set.Add(7);\n        set.Add(11);\n        set.Add(13);\n        set.Add(17);\n        set.Add(19);\n        set.Add(23);\n        set.Add(29);\n        set.Add(31);\n        for(int i=L;i&lt;=R;i++){\n            int val = SetBitCount(i);\n            if(set.Contains(val)){\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private int SetBitCount(int num){\n        int count=0;\n        while(num!=0){\n            count+= (num&amp;1);\n            num=num&gt;&gt;1;\n        }\n        return count;\n    }\n}</code></pre>\n<p>Time Complexity: O(nlogm) Where n is the number of elements and m is the count of binary bits of the number.</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8ff23690-a1ec-487a-a860-51faf94bafb7.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"prime-number-of-set-bits-in-binary-representation-bit-manipulation-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1605,"title":"Number of Recent Calls - Queue - Easy - LeetCode","imageUrl":"icon_52ed4bb2-be8a-4dff-832b-3355d3a7b296.jpg","dateCreated":"2020-10-16T05:43:32.617Z","dateModified":"2020-10-16T05:44:07.781Z","contributedBy":"sumitc91","content":"You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:\nRecentCounter() Initializes the counter with zero recent requests.<br />int ping(int t) Adds a new request at time t, where t represents some tim","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/946ba741-b1aa-4d55-9040-0f04c2d3678f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"queue","slug":"queue"}],"slug":"number-of-recent-calls-queue-easy-leetcode","total":0},{"id":1603,"title":"Moving Stones Until Consecutive - Brainteaser - Easy - LeetCode","imageUrl":"icon_e620d162-e256-4aff-b3fa-67c0a4795dd6.jpg","dateCreated":"2020-10-16T05:13:52.149Z","dateModified":"2020-10-16T05:14:17.79Z","contributedBy":"sumitc91","content":"Three stones are on a number line at positions a, b, and c.\nEach turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. &nbsp;Formally, let's say the stones are currently at positions x, y,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e620d162-e256-4aff-b3fa-67c0a4795dd6.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"brain-teaser","slug":"brain-teaser"},{"name":"brainteaser","slug":"brainteaser"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"moving-stones-until-consecutive-brainteaser-easy-leetcode","total":0},{"id":1593,"title":"Range Sum of BST - Tree - Easy - LeetCode","imageUrl":"icon_2d446765-9ada-4072-93c3-eedfb56f7794.jpg","dateCreated":"2020-10-09T08:49:41.585Z","dateModified":"2020-10-09T08:49:55.954Z","contributedBy":"sumitc91","content":"Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).\nThe binary search tree is guaranteed to have unique values.\n&nbsp;\nExample 1:\nInput: root = [10,5,15,3,7,null,18], L = 7, R = 15<br />Output: 32<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2d446765-9ada-4072-93c3-eedfb56f7794.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"range-sum-of-bst-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}