{"id":1572,"title":"Binary Tree Paths - Tree - Easy - LeetCode","imageUrl":"icon_93874631-b0aa-4d7d-a413-084a6380763d.jpg","dateCreated":"2020-10-06T14:22:08.31Z","dateModified":"2020-10-06T14:22:21.599Z","contributedBy":"sumitc91","content":"<p>Given a binary tree, return all root-to-leaf paths.</p>\n<p>Note: A leaf is a node with no children.</p>\n<p>Example:</p>\n<p>Input:</p>\n<p>&nbsp; &nbsp;1<br />&nbsp;/ &nbsp; \\<br />2 &nbsp; &nbsp; 3<br />&nbsp;\\<br />&nbsp; 5</p>\n<p>Output: [\"1-&gt;2-&gt;5\", \"1-&gt;3\"]</p>\n<p>Explanation: All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList&lt;string&gt; BinaryTreePaths(TreeNode root) {\n        var result = new List&lt;string&gt;();\n        var str = new List&lt;int&gt;();\n        if(root==null){\n            return result;\n        }\n        \n        Helper(root,str,result);\n        return result;\n    }\n    \n    private void Helper(TreeNode root,List&lt;int&gt; str, List&lt;string&gt; result){\n        if(root == null){\n            return;\n        }\n        \n        str.Add(root.val);\n        \n        if(root.left == null &amp;&amp; root.right == null){\n            var sb = new StringBuilder();\n            for(int i=0;i&lt;str.Count()-1;i++){\n                sb.Append(str[i]+\"-&gt;\");\n            }\n            if(str.Count()&gt;0){\n                sb.Append(str[str.Count()-1]);\n            }\n            result.Add(sb.ToString());\n        }\n                \n        Helper(root.left, str, result);        \n        Helper(root.right, str, result);\n        str.RemoveAt(str.Count()-1);\n    }\n}</code></pre>\n<p>Time Complexity: O(2^n) we are doing backtracking</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/93874631-b0aa-4d7d-a413-084a6380763d.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"binary-tree-paths-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1679,"title":"Insert Delete GetRandom O(1) - Array - Medium - LeetCode","imageUrl":"icon_8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","dateCreated":"2020-11-19T06:35:11.658Z","dateModified":"2020-11-19T06:35:19.394Z","contributedBy":"sumitc91","content":"Implement the RandomizedSet class:\nbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.<br />bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"insert-delete-getrandom-o1-array-medium-leetcode","total":0},{"id":1656,"title":"Subsets - Array - Medium - LeetCode","imageUrl":"icon_a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","dateCreated":"2020-10-31T16:06:14.288Z","dateModified":"2020-10-31T16:06:19.933Z","contributedBy":"sumitc91","content":"Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]<br />Output:<br />[<br />&nbsp; [3],<br />&nbsp; [1],<br />&nbsp; [2],<br />&nbsp; [1,2,3],<br />&nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subsets-array-medium-leetcode","total":0},{"id":1636,"title":"Two Strings - HashMap - Easy - HackerRank","imageUrl":"icon_b574251c-e9c0-4be6-9bc1-7c86f8da1806.jpg","dateCreated":"2020-10-24T07:22:16.972Z","dateModified":"2020-10-24T07:22:22.952Z","contributedBy":"sumitc91","content":"Given two strings, determine if they share a common substring. A substring may be as small as one character.\nFor example, the words \"a\", \"and\", \"art\" share the common substring . The words \"be\" and \"cat\" do not share a substring.\nFunction Description\nComplete the function two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b574251c-e9c0-4be6-9bc1-7c86f8da1806.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"hackerrank","slug":"hackerrank"},{"name":"hash-table","slug":"hash-table"}],"slug":"two-strings-hashmap-easy-hackerrank","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}