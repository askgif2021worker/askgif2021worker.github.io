{"id":1574,"title":"Find Mode in Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_7e61ce7c-697d-4270-8d1b-f48c3bda649b.jpg","dateCreated":"2020-10-07T05:05:11.566Z","dateModified":"2020-10-07T05:05:22.255Z","contributedBy":"sumitc91","content":"<p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p>\n<p>Assume a BST is defined as follows:</p>\n<p>The left subtree of a node contains only nodes with keys less than or equal to the node's key.<br />The right subtree of a node contains only nodes with keys greater than or equal to the node's key.<br />Both the left and right subtrees must also be binary search trees.<br />&nbsp;</p>\n<p>For example:<br />Given BST [1,null,2,2],</p>\n<p>&nbsp; &nbsp;1<br />&nbsp; &nbsp; \\<br />&nbsp; &nbsp; &nbsp;2<br />&nbsp; &nbsp; /<br />&nbsp; &nbsp;2<br />&nbsp;</p>\n<p>return [2].</p>\n<p>Note: If a tree has more than one mode, you can return them in any order.</p>\n<p>Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    int? prev = null;\n    int count = 1;\n    int max = 0;\n    public int[] FindMode(TreeNode root) {\n        var list = new List&lt;int&gt;();\n        InOrder(root,list);\n        return list.ToArray();\n    }\n    \n    private void InOrder(TreeNode root, List&lt;int&gt; list){\n        if(root==null){\n            return;\n        }\n        \n        InOrder(root.left, list);\n        \n        if(prev != null){\n            if(root.val==prev){\n            count++;\n            }\n            else{\n                count = 1;\n            } \n        }\n        \n        \n        if(count&gt;max){\n            max = count;\n            list.Clear();\n            list.Add(root.val);\n        }\n        else if(count == max){\n            list.Add(root.val);\n        }\n        \n        prev = root.val;\n        \n        InOrder(root.right, list);\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n) // for recursion stack.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7e61ce7c-697d-4270-8d1b-f48c3bda649b.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"find-mode-in-binary-search-tree-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1670,"title":"Find Minimum in Rotated Sorted Array - Array - Medium - LeetCode","imageUrl":"icon_d1be15f3-8f69-4050-83a2-f9c67ac5827b.jpg","dateCreated":"2020-11-18T02:56:56.195Z","dateModified":"2020-11-18T02:57:02.762Z","contributedBy":"sumitc91","content":"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n[4,5,6,7,0,1,2] if it was rotated 4 times.<br />[0,1,2,4,5,6,7] if it was rotated 7 times.<br />Notice that rotating an array [a[0], a[1], a[","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d1be15f3-8f69-4050-83a2-f9c67ac5827b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"athletics","slug":"athletics"},{"name":"data-structure","slug":"data-structure"},{"name":"medium","slug":"medium"}],"slug":"find-minimum-in-rotated-sorted-array-array-medium-leetcode","total":0},{"id":1621,"title":"Swap Salary - Sql - Easy - LeetCode","imageUrl":"icon_d5dae622-be43-4a7d-a90e-4173c15f3195.jpg","dateCreated":"2020-10-17T06:35:01.639Z","dateModified":"2020-10-17T06:36:00.564Z","contributedBy":"sumitc91","content":"Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.\nNote that you must write a single update statement, DO NOT write any sele","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d5dae622-be43-4a7d-a90e-4173c15f3195.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"sql","slug":"sql"}],"slug":"swap-salary-sql-easy-leetcode","total":0},{"id":1611,"title":"Tenth Line - Bash - Easy - LeetCode","imageUrl":"icon_2f13c5c6-6e33-47bb-a84b-a78e7452f775.jpg","dateCreated":"2020-10-16T07:52:54.062Z","dateModified":"2020-10-16T07:53:14.702Z","contributedBy":"sumitc91","content":"Given a text file file.txt, print just the 10th line of the file.\nExample:\nAssume that file.txt has the following content:\nLine 1<br />Line 2<br />Line 3<br />Line 4<br />Line 5<br />Line 6<br />Line 7<br />Line 8<br />Line 9<br />Line 10<br />Your script should output the te","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f13c5c6-6e33-47bb-a84b-a78e7452f775.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bash","slug":"bash"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"tenth-line-bash-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}