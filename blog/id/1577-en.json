{"id":1577,"title":"Maximum Depth of N-ary Tree - Tree - Easy - LeetCode","imageUrl":"icon_5c7d09b8-c901-46a5-b6f3-f23acbc38034.jpg","dateCreated":"2020-10-07T07:48:32.081Z","dateModified":"2020-10-07T07:49:17.954Z","contributedBy":"sumitc91","content":"<p>Given a n-ary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>&nbsp;</p>\n<p>Input: root = [1,null,3,2,4,null,5,6]<br />Output: 3<br />Example 2:</p>\n<p>&nbsp;</p>\n<p>Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]<br />Output: 5<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>The depth of the n-ary tree is less than or equal to 1000.<br />The total number of nodes is between [0, 10^4].</p>\n<pre class=\"language-csharp\"><code>/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList&lt;Node&gt; children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList&lt;Node&gt; _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public int MaxDepth(Node root) {\n        if(root == null){\n            return 0;\n        }\n        int max = 0;\n        foreach(var child in root.children){\n            max = Math.Max(max, MaxDepth(child));\n        }\n        \n        return 1+max;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5c7d09b8-c901-46a5-b6f3-f23acbc38034.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"maximum-depth-of-n-ary-tree-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1677,"title":"Find the Duplicate Number - Array - Medium - LeetCode","imageUrl":"icon_85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","dateCreated":"2020-11-18T13:09:40.526Z","dateModified":"2020-11-18T13:09:46.723Z","contributedBy":"sumitc91","content":"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one duplicate number in nums, return this duplicate number.\nFollow-ups:\nHow can we prove that at least one duplicate number must exist in nums?&nbsp;<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"find-the-duplicate-number-array-medium-leetcode","total":0},{"id":1667,"title":"Construct Binary Tree from Inorder and Postorder Traversal - Array - Medium - LeetCode","imageUrl":"icon_eeacf71f-bde9-47d7-bf9d-4f6212eb787e.jpg","dateCreated":"2020-11-17T10:15:10.097Z","dateModified":"2020-11-17T10:15:16.628Z","contributedBy":"sumitc91","content":"Given inorder and postorder traversal of a tree, construct the binary tree.\nNote:<br />You may assume that duplicates do not exist in the tree.\nFor example, given\ninorder = [9,3,15,20,7]<br />postorder = [9,15,7,20,3]<br />Return the following binary tree:\n&nbsp; &nbsp","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/eeacf71f-bde9-47d7-bf9d-4f6212eb787e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"construct-binary-tree-from-inorder-and-postorder-traversal-array-medium-leetcode","total":0},{"id":1591,"title":"Leaf-Similar Trees - Tree - Easy - LeetCode","imageUrl":"icon_db0b4415-6ae2-4e32-b111-ad26e1d99874.jpg","dateCreated":"2020-10-09T05:05:38.157Z","dateModified":"2020-10-09T05:05:50.02Z","contributedBy":"sumitc91","content":"Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar if their leaf value sequence is t","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/db0b4415-6ae2-4e32-b111-ad26e1d99874.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"leaf-similar-trees-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}