{"id":1584,"title":"Average of Levels in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_00a270d3-3254-4f73-a90d-6153174f3a15.jpg","dateCreated":"2020-10-08T04:10:04.182Z","dateModified":"2020-10-08T04:10:29.201Z","contributedBy":"sumitc91","content":"<p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.<br />Example 1:<br />Input:<br />&nbsp; &nbsp; 3<br />&nbsp; &nbsp;/ \\<br />&nbsp; 9 &nbsp;20<br />&nbsp; &nbsp; / &nbsp;\\<br />&nbsp; &nbsp;15 &nbsp; 7<br />Output: [3, 14.5, 11]<br />Explanation:<br />The average value of nodes on level 0 is 3, &nbsp;on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].<br />Note:<br />The range of node's value is in the range of 32-bit signed integer.</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList&lt;double&gt; AverageOfLevels(TreeNode root) {\n        var res = new List&lt;double&gt;();\n        var queue = new Queue&lt;TreeNode&gt;();\n        queue.Enqueue(root);\n        while(queue.Count()&gt;0){\n            int count = queue.Count();\n            int i = count;\n            double sum = 0;\n            while(i--&gt;0){\n                var node = queue.Dequeue();\n                sum += node.val;\n                if(node.left != null){\n                    queue.Enqueue(node.left);\n                }\n                if(node.right != null){\n                    queue.Enqueue(node.right);\n                }\n            }\n            res.Add(sum/count);\n        }\n        return res;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/00a270d3-3254-4f73-a90d-6153174f3a15.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"average-of-levels-in-binary-tree-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1714,"title":"Number of Students Unable to Eat Lunch - String - Easy - LeetCode","imageUrl":"icon_dad639fe-8bb2-4bcd-ba3d-af4e7cb5299b.jpg","dateCreated":"2021-01-06T10:28:07.741Z","dateModified":"2021-01-06T10:28:12.288Z","contributedBy":"sumitc91","content":"The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students. Th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/dad639fe-8bb2-4bcd-ba3d-af4e7cb5299b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"number-of-students-unable-to-eat-lunch-string-easy-leetcode","total":0},{"id":1705,"title":"Valid Triangle Number - Array - Medium - LeetCode","imageUrl":"icon_1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","dateCreated":"2020-11-21T14:33:10.794Z","dateModified":"2020-11-21T14:33:17.755Z","contributedBy":"sumitc91","content":"Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.<br />Example 1:<br />Input: [2,2,3,4]<br />Output: 3<br />Explanation:<br />Valid combinations are:&nbsp;<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1cec6b01-c299-43b3-909b-3fb5fb1661e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"valid-triangle-number-array-medium-leetcode","total":0},{"id":1658,"title":"Remove Duplicates from Sorted Array II - Array - Medium - LeetCode","imageUrl":"icon_354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","dateCreated":"2020-11-01T11:57:49.77Z","dateModified":"2020-11-01T11:57:54.983Z","contributedBy":"sumitc91","content":"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\nClarification:\nConfus","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"remove-duplicates-from-sorted-array-ii-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}