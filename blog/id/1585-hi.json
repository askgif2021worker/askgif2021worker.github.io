{"id":1585,"title":"Two Sum IV - Input is a BST - Tree - Easy - LeetCode","imageUrl":"icon_d4fc6da1-e8bd-4173-9588-4c3ec727e3f2.jpg","dateCreated":"2020-10-08T04:36:12.089Z","dateModified":"2020-10-08T04:36:21.987Z","contributedBy":"sumitc91","content":"<p>Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p><br />Input: root = [5,3,6,2,4,null,7], k = 9<br />Output: true<br />Example 2:</p>\n<p><br />Input: root = [5,3,6,2,4,null,7], k = 28<br />Output: false<br />Example 3:</p>\n<p>Input: root = [2,1,3], k = 4<br />Output: true<br />Example 4:</p>\n<p>Input: root = [2,1,3], k = 1<br />Output: false<br />Example 5:</p>\n<p>Input: root = [2,1,3], k = 3<br />Output: true<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>The number of nodes in the tree is in the range [1, 104].<br />-104 &lt;= Node.val &lt;= 104<br />root is guaranteed to be a valid binary search tree.<br />-105 &lt;= k &lt;= 105</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {    \n    public bool FindTarget(TreeNode root, int k) {\n        var set = new HashSet&lt;int&gt;();\n        return Helper(root,set,k);\n    }\n    \n    private bool Helper(TreeNode root, HashSet&lt;int&gt; set, int k){\n        if(root == null){\n            return false;\n        }\n        \n        if(set.Contains(k-root.val)){\n            return true;\n        }\n        \n        set.Add(root.val);\n        \n        return Helper(root.left,set,k)||Helper(root.right,set,k);\n    }\n    \n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d4fc6da1-e8bd-4173-9588-4c3ec727e3f2.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"two-sum-iv-input-is-a-bst-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1677,"title":"Find the Duplicate Number - Array - Medium - LeetCode","imageUrl":"icon_85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","dateCreated":"2020-11-18T13:09:40.526Z","dateModified":"2020-11-18T13:09:46.723Z","contributedBy":"sumitc91","content":"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one duplicate number in nums, return this duplicate number.\nFollow-ups:\nHow can we prove that at least one duplicate number must exist in nums?&nbsp;<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/85d20211-e54a-42fd-9300-e83bc02b7ffe.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"find-the-duplicate-number-array-medium-leetcode","total":0},{"id":1674,"title":"Combination Sum III - Array - Medium - LeetCode","imageUrl":"icon_becf4b84-69f9-4582-a8d7-d32b8422353a.jpg","dateCreated":"2020-11-18T11:38:07.946Z","dateModified":"2020-11-18T11:38:14.249Z","contributedBy":"sumitc91","content":"Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\nOnly numbers 1 through 9 are used.<br />Each number is used at most once.<br />Return a list of all possible valid combinations. The list must not contain the same combination twice, and ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/becf4b84-69f9-4582-a8d7-d32b8422353a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"combination-sum-iii-array-medium-leetcode","total":0},{"id":1608,"title":"Duplicate Emails - Sql - Easy - LeetCode","imageUrl":"icon_bd99f209-a7f9-453d-9a5a-c63d4392098f.jpg","dateCreated":"2020-10-16T07:15:00.174Z","dateModified":"2020-10-16T07:15:10.2Z","contributedBy":"sumitc91","content":"Write a SQL query to find all duplicate emails in a table named Person.\n+----+---------+<br />| Id | Email &nbsp; |<br />+----+---------+<br />| 1 &nbsp;| a@b.com |<br />| 2 &nbsp;| c@d.com |<br />| 3 &nbsp;| a@b.com |<br />+----+---------+<br />For example, your query should return the fo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bd99f209-a7f9-453d-9a5a-c63d4392098f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"duplicate-emails-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}