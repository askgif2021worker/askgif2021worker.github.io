{"id":1588,"title":"Longest Univalue Path - Tree - Easy - LeetCode","imageUrl":"icon_767bd537-2951-47b6-8d05-b9ca6b615826.jpg","dateCreated":"2020-10-08T12:25:34.461Z","dateModified":"2020-10-08T12:25:45.238Z","contributedBy":"sumitc91","content":"<p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.</p>\n<p>The length of path between two nodes is represented by the number of edges between them.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ \\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; 5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ \\ &nbsp; \\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; 1 &nbsp; 5<br />Output: 2</p>\n<p>&nbsp;</p>\n<p>Example 2:</p>\n<p>Input:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ \\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; 5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ \\ &nbsp; \\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; 4 &nbsp; 5<br />Output: 2</p>\n<p>&nbsp;</p>\n<p>Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    int max = 0;\n    public int LongestUnivaluePath(TreeNode root) {\n        if(root==null){\n            return 0;\n        }        \n        \n        Helper(root,null);\n        return max;\n    }\n    \n    private int Helper(TreeNode root, int? parent){\n        if(root == null){\n            return 0;\n        }\n        \n        int left = Helper(root.left,root.val);\n        int right = Helper(root.right,root.val);\n        \n        max = Math.Max(max,left+right);\n        if(parent!=null &amp;&amp; root.val == parent){\n            return 1+Math.Max(left,right);\n        }\n        return 0;   \n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/767bd537-2951-47b6-8d05-b9ca6b615826.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"longest-univalue-path-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1721,"title":"Find the Highest Altitude - Array - Easy - LeetCode","imageUrl":"icon_0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","dateCreated":"2021-01-26T09:15:18.731Z","dateModified":"2021-01-26T09:15:23.937Z","contributedBy":"sumitc91","content":"There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-highest-altitude-array-easy-leetcode","total":0},{"id":1644,"title":"Spiral Matrix - Array - Medium - LeetCode","imageUrl":"icon_37d1b470-7389-4e05-97b1-d92ce68eb1ba.jpg","dateCreated":"2020-10-27T07:19:38.491Z","dateModified":"2020-10-27T07:19:48.756Z","contributedBy":"sumitc91","content":"Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\nExample 1:\nInput:<br />[<br />&nbsp;[ 1, 2, 3 ],<br />&nbsp;[ 4, 5, 6 ],<br />&nbsp;[ 7, 8, 9 ]<br />]<br />Output: [1,2,3,6,9,8,7,4,5]<br />Example 2:\nInput:<br />[<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/37d1b470-7389-4e05-97b1-d92ce68eb1ba.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"spiral-matrix-array-medium-leetcode","total":0},{"id":1610,"title":"Valid Phone Numbers - Bash - Easy - LeetCode","imageUrl":"icon_903f4733-4a8e-4987-9d87-0e0feefd9f8e.jpg","dateCreated":"2020-10-16T07:46:02.223Z","dateModified":"2020-10-16T07:46:13.79Z","contributedBy":"sumitc91","content":"Given a text file file.txt that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/903f4733-4a8e-4987-9d87-0e0feefd9f8e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"valid-phone-numbers-bash-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}