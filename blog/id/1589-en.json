{"id":1589,"title":"Search in a Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_862ff4cf-5f64-4e7f-92ee-63a4017cae63.jpg","dateCreated":"2020-10-09T04:19:45.942Z","dateModified":"2020-10-09T04:19:56.582Z","contributedBy":"sumitc91","content":"<p>Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node's value equals the given value. Return the subtree rooted with that node. If such node doesn't exist, you should return NULL.</p>\n<p>For example,&nbsp;</p>\n<p>Given the tree:<br />&nbsp; &nbsp; &nbsp; &nbsp; 4<br />&nbsp; &nbsp; &nbsp; &nbsp;/ \\<br />&nbsp; &nbsp; &nbsp; 2 &nbsp; 7<br />&nbsp; &nbsp; &nbsp;/ \\<br />&nbsp; &nbsp; 1 &nbsp; 3</p>\n<p>And the value to search: 2<br />You should return this subtree:</p>\n<p>&nbsp; &nbsp; &nbsp; 2 &nbsp; &nbsp;&nbsp;<br />&nbsp; &nbsp; &nbsp;/ \\ &nbsp;&nbsp;<br />&nbsp; &nbsp; 1 &nbsp; 3<br />In the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.</p>\n<p>Note that an empty tree is represented by NULL, therefore you would see the expected output (serialized tree format) as [], not null.</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode SearchBST(TreeNode root, int val) {\n        if(root == null){\n            return null;\n        }\n        \n        if(root.val&gt;val){\n            return SearchBST(root.left,val);\n        }\n        else if(root.val&lt;val){\n            return SearchBST(root.right,val);\n        }\n        else if(root.val==val){\n            return root;\n        }\n        \n        return null;\n    }\n}</code></pre>\n<p>Time Complexity: O(logn)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/862ff4cf-5f64-4e7f-92ee-63a4017cae63.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"search-in-a-binary-search-tree-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1725,"title":"Sum of Unique Elements - Array - Easy - LeetCode","imageUrl":"icon_9e341651-0933-4893-84a8-1d3f65898dda.jpg","dateCreated":"2021-02-13T13:13:53.857Z","dateModified":"2021-02-13T13:13:59.576Z","contributedBy":"sumitc91","content":"You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.\n&nbsp;\nExample 1:\nInput: nums = [1,2,3,2]<br />Output: 4<br />Explanation: The unique element","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e341651-0933-4893-84a8-1d3f65898dda.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"sum-of-unique-elements-array-easy-leetcode","total":0},{"id":1702,"title":"Subarray Sum Equals K - Array - Medium - LeetCode","imageUrl":"icon_5dec0e7e-af11-40c9-b0bb-98503e290084.jpg","dateCreated":"2020-11-21T04:33:22.934Z","dateModified":"2020-11-21T04:33:27.536Z","contributedBy":"sumitc91","content":"Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.\n&nbsp;\nExample 1:\nInput: nums = [1,1,1], k = 2<br />Output: 2<br />Example 2:\nInput: nums = [1,2,3], k = 3<br />Output: 2<br />&nbsp;\nConstra","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5dec0e7e-af11-40c9-b0bb-98503e290084.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subarray-sum-equals-k-array-medium-leetcode","total":0},{"id":1656,"title":"Subsets - Array - Medium - LeetCode","imageUrl":"icon_a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","dateCreated":"2020-10-31T16:06:14.288Z","dateModified":"2020-10-31T16:06:19.933Z","contributedBy":"sumitc91","content":"Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]<br />Output:<br />[<br />&nbsp; [3],<br />&nbsp; [1],<br />&nbsp; [2],<br />&nbsp; [1,2,3],<br />&nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subsets-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}