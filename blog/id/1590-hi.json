{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"<p>Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.</p>\n<p>Example :</p>\n<p>Input: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</p>\n<p>The given tree [4,2,6,1,3,null,null] is represented by the following diagram:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4<br />&nbsp; &nbsp; &nbsp; &nbsp; / &nbsp; \\<br />&nbsp; &nbsp; &nbsp; 2 &nbsp; &nbsp; &nbsp;6<br />&nbsp; &nbsp; &nbsp;/ \\ &nbsp; &nbsp;<br />&nbsp; &nbsp; 1 &nbsp; 3 &nbsp;</p>\n<p>while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.<br />Note:</p>\n<p>The size of the BST will be between 2 and 100.<br />The BST is always valid, each node's value is an integer, and each node's value is different.</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    int min=int.MaxValue;\n    int? prev = null;\n    public int MinDiffInBST(TreeNode root) {\n        Helper(root);\n        return min;\n    }\n    \n    private void Helper(TreeNode root){\n        if(root==null){\n            return;\n        }\n        \n        Helper(root.left);\n        if(prev!=null){\n            min = Math.Min(min,root.val-(int)prev);\n        }\n        prev = root.val;\n        Helper(root.right);\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1711,"title":"Count of Matches in Tournament - String - Easy - LeetCode","imageUrl":"icon_d4fba4b6-ab89-4548-aaf7-f9918522d7dd.jpg","dateCreated":"2020-12-28T14:11:46.984Z","dateModified":"2020-12-28T14:11:55.184Z","contributedBy":"sumitc91","content":"You are given an integer n, the number of teams in a tournament that has strange rules:\nIf the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.<br />If the current number of teams is od","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d4fba4b6-ab89-4548-aaf7-f9918522d7dd.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"count-of-matches-in-tournament-string-easy-leetcode","total":0},{"id":1682,"title":"Teemo Attacking - Array - Medium - LeetCode","imageUrl":"icon_03f183b7-2b4e-49b5-9009-249834a17a2e.jpg","dateCreated":"2020-11-20T03:15:55.545Z","dateModified":"2020-11-20T03:16:00.413Z","contributedBy":"sumitc91","content":"In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned cond","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/03f183b7-2b4e-49b5-9009-249834a17a2e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"teemo-attacking-array-medium-leetcode","total":0},{"id":1646,"title":"Merge Intervals - Array - Medium - LeetCode","imageUrl":"icon_a1913eb6-6b8f-4cbb-9c4e-096c9e76c6cd.jpg","dateCreated":"2020-10-30T13:34:51.72Z","dateModified":"2020-10-30T13:34:58.66Z","contributedBy":"sumitc91","content":"Given a collection of intervals, merge all overlapping intervals.\nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]<br />Output: [[1,6],[8,10],[15,18]]<br />Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].<br />Example 2:\nInput: intervals","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a1913eb6-6b8f-4cbb-9c4e-096c9e76c6cd.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"merge-intervals-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}