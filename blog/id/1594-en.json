{"id":1594,"title":"Univalued Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","dateCreated":"2020-10-09T08:57:56.154Z","dateModified":"2020-10-09T08:58:09.124Z","contributedBy":"sumitc91","content":"<p>A binary tree is univalued if every node in the tree has the same value.</p>\n<p>Return true if and only if the given tree is univalued.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p><br />Input: [1,1,1,1,1,null,1]<br />Output: true<br />Example 2:</p>\n<p><br />Input: [2,2,2,5,2]<br />Output: false<br />&nbsp;</p>\n<p>Note:</p>\n<p>The number of nodes in the given tree will be in the range [1, 100].<br />Each node's value will be an integer in the range [0, 99].<br /><br /></p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsUnivalTree(TreeNode root) {        \n        return Helper(root,null);\n    }\n    \n    private bool Helper(TreeNode root,TreeNode parent){\n        if(root == null){\n            return true;\n        }\n        \n        if(parent!=null &amp;&amp; root.val != parent.val){\n            return false;  \n        }\n                \n        return Helper(root.left,root) &amp;&amp; Helper(root.right,root);\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(height)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/932c5fe4-9686-4df3-9d52-28ee24f22cf5.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"univalued-binary-tree-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1658,"title":"Remove Duplicates from Sorted Array II - Array - Medium - LeetCode","imageUrl":"icon_354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","dateCreated":"2020-11-01T11:57:49.77Z","dateModified":"2020-11-01T11:57:54.983Z","contributedBy":"sumitc91","content":"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\nClarification:\nConfus","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"remove-duplicates-from-sorted-array-ii-array-medium-leetcode","total":0},{"id":1618,"title":"Big Countries - Sql - Easy - LeetCode","imageUrl":"icon_6ebd2b15-7c5c-49e4-8989-4100969f8797.jpg","dateCreated":"2020-10-17T05:34:51.754Z","dateModified":"2020-10-17T05:35:04.401Z","contributedBy":"sumitc91","content":"There is a table World\n+-----------------+------------+------------+--------------+---------------+<br />| name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| continent &nbsp;| area &nbsp; &nbsp; &nbsp; | population &nbsp; | gdp &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />+-----------------+----","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ebd2b15-7c5c-49e4-8989-4100969f8797.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"big-countries-sql-easy-leetcode","total":0},{"id":1612,"title":"Delete Duplicate Emails - SQL - Easy - LeetCode","imageUrl":"icon_a8c368b1-ddbd-45ca-96b4-7558b7166a74.jpg","dateCreated":"2020-10-16T11:31:27.16Z","dateModified":"2020-10-16T11:31:37.404Z","contributedBy":"sumitc91","content":"Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.\n+----+------------------+<br />| Id | Email &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />+----+------------------+<br />| 1 &nbsp;| john@example.com |<br","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a8c368b1-ddbd-45ca-96b4-7558b7166a74.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"delete-duplicate-emails-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}