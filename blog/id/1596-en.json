{"id":1596,"title":"Sum of Root To Leaf Binary Numbers - Tree - Easy - LeetCode","imageUrl":"icon_41e87329-1dad-4856-9c47-60b67b520656.jpg","dateCreated":"2020-10-09T09:37:18.648Z","dateModified":"2020-10-09T09:37:29.591Z","contributedBy":"sumitc91","content":"<p>You are given the root of a binary tree where each node has a value 0 or 1. &nbsp;Each root-to-leaf path represents a binary number starting with the most significant bit. &nbsp;For example, if the path is 0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1, then this could represent 01101 in binary, which is 13.</p>\n<p>For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.</p>\n<p>Return the sum of these numbers. The answer is guaranteed to fit in a 32-bits integer.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p><br />Input: root = [1,0,1,0,1,0,1]<br />Output: 22<br />Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22<br />Example 2:</p>\n<p>Input: root = [0]<br />Output: 0<br />Example 3:</p>\n<p>Input: root = [1]<br />Output: 1<br />Example 4:</p>\n<p>Input: root = [1,1]<br />Output: 3<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>The number of nodes in the tree is in the range [1, 1000].<br />Node.val is 0 or 1.</p>\n<pre class=\"language-csharp\"><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    int ans = 0;\n    public int SumRootToLeaf(TreeNode root) {        \n        Helper(root,0); \n        return ans;\n    }\n    \n    private void Helper(TreeNode root,int sum){\n        if(root==null){\n            return;\n        }\n        \n        int currVal = sum*2+root.val;\n        if(root.left==null &amp;&amp; root.right==null){\n            ans+=currVal;\n        }\n        \n        if(root.left!=null){\n            Helper(root.left,currVal);\n        }\n        \n        if(root.right!=null){\n            Helper(root.right,currVal);\n        }\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(height)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/41e87329-1dad-4856-9c47-60b67b520656.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"sum-of-root-to-leaf-binary-numbers-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1665,"title":"Subsets II - Array - Medium - LeetCode","imageUrl":"icon_aaa8f566-bd39-4867-a4ad-9d2ec8eb9fec.jpg","dateCreated":"2020-11-17T08:34:58.632Z","dateModified":"2020-11-17T08:35:04.765Z","contributedBy":"sumitc91","content":"Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: [1,2,2]<br />Output:<br />[<br />&nbsp; [2],<br />&nbsp; [1],<br />&nbsp; [1,2,2],<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/aaa8f566-bd39-4867-a4ad-9d2ec8eb9fec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"subsets-ii-array-medium-leetcode","total":0},{"id":1602,"title":"Nim Game - Brainteaser - Easy - LeetCode","imageUrl":"icon_2d168a53-ceb7-4679-bee4-38527d6e5223.jpg","dateCreated":"2020-10-15T09:30:33.368Z","dateModified":"2020-10-15T09:32:06.259Z","contributedBy":"sumitc91","content":"You are playing the following Nim Game with your friend:\nInitially, there is a heap of stones on the table.<br />You and your friend will alternate taking turns, and you go first.<br />On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.<br />The one who remov","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2d168a53-ceb7-4679-bee4-38527d6e5223.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"brainteaser","slug":"brainteaser"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"nim-game-brainteaser-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}