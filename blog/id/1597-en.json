{"id":1597,"title":"Flood Fill - Tree - Easy - LeetCode","imageUrl":"icon_0e3c9311-ee03-4845-8887-471eb8b67c05.jpg","dateCreated":"2020-10-09T13:26:25.345Z","dateModified":"2020-10-09T13:26:36.925Z","contributedBy":"sumitc91","content":"<p>An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).</p>\n<p>Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, \"flood fill\" the image.</p>\n<p>To perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.</p>\n<p>At the end, return the modified image.</p>\n<p>Example 1:<br />Input:&nbsp;<br />image = [[1,1,1],[1,1,0],[1,0,1]]<br />sr = 1, sc = 1, newColor = 2<br />Output: [[2,2,2],[2,2,0],[2,0,1]]<br />Explanation:&nbsp;<br />From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected&nbsp;<br />by a path of the same color as the starting pixel are colored with the new color.<br />Note the bottom corner is not colored 2, because it is not 4-directionally connected<br />to the starting pixel.<br />Note:</p>\n<p>The length of image and image[0] will be in the range [1, 50].<br />The given starting pixel will satisfy 0 &lt;= sr &lt; image.length and 0 &lt;= sc &lt; image[0].length.<br />The value of each color in image[i][j] and newColor will be an integer in [0, 65535].</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int[][] FloodFill(int[][] image, int sr, int sc, int newColor) {\n        var res = new int[image.Length][];\n        for(int i=0;i&lt;image.Length;i++){\n            res[i] = new int[image[0].Length];\n        }\n        \n        for(int i=0;i&lt;image.Length;i++){\n            for(int j=0;j&lt;image[0].Length;j++){\n                res[i][j]=image[i][j];\n            }\n        }\n        \n        var visited = new bool[image.Length,image[0].Length];\n        int prevColor = image[sr][sc];\n        Helper(image,res,sr,sc,prevColor,newColor,visited);\n        return res;\n    }\n    \n    int[] cx = new int[]{0,0,0,-1,1};\n    int[] cy = new int[]{0,-1,1,0,0};\n    private void Helper(int[][] image, int[][] res, int sr, int sc,int prevColor, int newColor,bool[,] visited){        \n        \n        for(int i=0;i&lt;cx.Length;i++){\n            int x = sr+cx[i];\n            int y = sc+cy[i];\n            if(x&lt;0 || x&gt;=image.Length){\n                continue;\n            }\n\n            if(y&lt;0 || y&gt;=image[0].Length){\n                continue;\n            }\n            \n            if(image[x][y]!=prevColor){\n                continue;\n            }\n            \n            if(visited[x,y]){\n                continue;\n            }\n            \n            visited[x,y]=true;\n            if(prevColor==image[x][y]){\n                res[x][y]=newColor;\n            }\n            Helper(image,res,x,y,prevColor,newColor,visited);\n        }\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n) in worst case</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0e3c9311-ee03-4845-8887-471eb8b67c05.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"flood-fill-tree-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"recommendations":[{"id":1671,"title":"Find Peak Element - Array - Medium - LeetCode","imageUrl":"icon_ddbfc17c-bd5c-47a2-8c7d-53508db12cab.jpg","dateCreated":"2020-11-18T07:03:05.436Z","dateModified":"2020-11-18T07:03:11.729Z","contributedBy":"sumitc91","content":"A peak element is an element that is greater than its neighbors.\nGiven an input array nums, where nums[i] &ne; nums[i+1], find a peak element and return its index.\nThe array may contain multiple peaks, in that case return the index to any one of the peaks is fine.\nYou may ima","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ddbfc17c-bd5c-47a2-8c7d-53508db12cab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"find-peak-element-array-medium-leetcode","total":0},{"id":1598,"title":"Find the Town Judge - Tree - Easy - LeetCode","imageUrl":"icon_2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","dateCreated":"2020-10-14T09:05:56.984Z","dateModified":"2020-10-14T09:06:09.069Z","contributedBy":"sumitc91","content":"In a town, there are N people labelled from 1 to N. &nbsp;There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody.<br />Everybody (except for the town judge) trusts the town judge.<br />There is exactly one p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f8d0898-e59c-49cd-b25f-5234ed605d94.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-town-judge-tree-easy-leetcode","total":0},{"id":1592,"title":"Increasing Order Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","dateCreated":"2020-10-09T07:45:00.338Z","dateModified":"2020-10-09T07:45:33.127Z","contributedBy":"sumitc91","content":"Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.\nExample 1:<br />Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]\n&nbsp; &nbsp; &nbsp; &nbsp;5<br />&nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32836fb6-9705-48a7-be70-4bd66b1c621e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"increasing-order-search-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}