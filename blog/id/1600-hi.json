{"id":1600,"title":"Design Parking System - Design - Easy - LeetCode","imageUrl":"icon_2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","dateCreated":"2020-10-15T05:28:49.957Z","dateModified":"2020-10-15T05:49:22.82Z","contributedBy":"sumitc91","content":"<p>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.</p>\n<p>Implement the ParkingSystem class:</p>\n<p>ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.<br />bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true.<br />&nbsp;</p>\n<p>Example 1:</p>\n<p>Input<br />[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]<br />[[1, 1, 0], [1], [2], [3], [1]]<br />Output<br />[null, true, true, false, false]</p>\n<p>Explanation<br />ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);<br />parkingSystem.addCar(1); // return true because there is 1 available slot for a big car<br />parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car<br />parkingSystem.addCar(3); // return false because there is no available slot for a small car<br />parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>0 &lt;= big, medium, small &lt;= 1000<br />carType is 1, 2, or 3<br />At most 1000 calls will be made to addCar</p>\n<pre class=\"language-csharp\"><code>public class ParkingSystem {\n\n    int bigRemaining = 0;\n    int mediumRemaining = 0;\n    int smallRemaining = 0;\n    public ParkingSystem(int big, int medium, int small) {\n        bigRemaining = big;\n        mediumRemaining = medium;\n        smallRemaining = small;\n    }\n    \n    public bool AddCar(int carType) {\n        switch(carType){\n            case 1:\n                if(bigRemaining == 0){\n                    return false;\n                }\n                bigRemaining--;\n                break;\n            case 2:\n                if(mediumRemaining == 0){\n                    return false;\n                }\n                mediumRemaining--;\n                break;\n            case 3:\n                if(smallRemaining == 0){\n                    return false;\n                }\n                smallRemaining--;\n                break;\n        }\n        \n        return true;\n    }\n}\n\n/**\n * Your ParkingSystem object will be instantiated and called as such:\n * ParkingSystem obj = new ParkingSystem(big, medium, small);\n * bool param_1 = obj.AddCar(carType);\n */</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"design-parking-system-design-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"डिज़ाइन","slug":"design"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1713,"title":"Reformat Phone Number - String - Easy - LeetCode","imageUrl":"icon_716c7816-48e6-45e6-840e-df068e41c6f6.jpg","dateCreated":"2021-01-05T04:21:52.889Z","dateModified":"2021-01-05T04:22:00.273Z","contributedBy":"sumitc91","content":"You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/716c7816-48e6-45e6-840e-df068e41c6f6.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"reformat-phone-number-string-easy-leetcode","total":0},{"id":1656,"title":"Subsets - Array - Medium - LeetCode","imageUrl":"icon_a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","dateCreated":"2020-10-31T16:06:14.288Z","dateModified":"2020-10-31T16:06:19.933Z","contributedBy":"sumitc91","content":"Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]<br />Output:<br />[<br />&nbsp; [3],<br />&nbsp; [1],<br />&nbsp; [2],<br />&nbsp; [1,2,3],<br />&nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a85784d1-277b-48bf-aca6-1481f4252c7a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"subsets-array-medium-leetcode","total":0},{"id":1635,"title":"New Year Chaos - Array - Medium - HackerRank","imageUrl":"icon_53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","dateCreated":"2020-10-24T07:14:47.121Z","dateModified":"2020-10-24T07:15:13.568Z","contributedBy":"sumitc91","content":"It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. Initial positions increment by &nbsp;from &nbsp;at the front of the line to &nbsp;at the back.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/53eb9e67-4065-4a48-af84-1ab48ec4ee5e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"hackerrank","slug":"hackerrank"},{"name":"मध्यम","slug":"medium"}],"slug":"new-year-chaos-array-medium-hackerrank","total":0},{"id":1599,"title":"Flower Planting With No Adjacent - Graph - Easy - LeetCode","imageUrl":"icon_db7a0ad4-994c-4a3a-a3c6-63035a00d2da.jpg","dateCreated":"2020-10-15T05:15:37.382Z","dateModified":"2020-10-15T05:15:47.948Z","contributedBy":"sumitc91","content":"You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes the existence of a bidirectional path from garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nThere is no garden that has more than three paths coming into or l","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/db7a0ad4-994c-4a3a-a3c6-63035a00d2da.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"graph","slug":"graph"},{"name":"leetcode","slug":"leetcode"}],"slug":"flower-planting-with-no-adjacent-graph-easy-leetcode","total":0}]}