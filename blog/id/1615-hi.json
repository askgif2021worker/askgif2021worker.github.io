{"id":1615,"title":"License Key Formatting - String - Easy - LeetCode","imageUrl":"icon_168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","dateCreated":"2020-10-17T04:06:23.384Z","dateModified":"2020-10-17T04:06:32.538Z","contributedBy":"sumitc91","content":"<p>You are given a license key represented as a string S which consists of only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.</p>\n<p>Given a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.</p>\n<p>Given a non-empty string S and a number K, format the string according to the rules described above.</p>\n<p>Example 1:<br />Input: S = \"5F3Z-2e-9-w\", K = 4</p>\n<p>Output: \"5F3Z-2E9W\"</p>\n<p>Explanation: The string S has been split into two parts, each part has 4 characters.<br />Note that the two extra dashes are not needed and can be removed.<br />Example 2:<br />Input: S = \"2-5g-3-J\", K = 2</p>\n<p>Output: \"2-5G-3J\"</p>\n<p>Explanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.<br />Note:<br />The length of string S will not exceed 12,000, and K is a positive integer.<br />String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).<br />String S is non-empty.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public string LicenseKeyFormatting(string S, int K) {\n        var sb = new StringBuilder();\n        for(int i=S.Length-1,j=0;i&gt;=0;i--){\n            if(S[i]!='-'){\n                if(j!=0 &amp;&amp; j%K==0){\n                    sb.Append(\"-\");\n                }\n                  \n                sb.Append(S[i]);       \n                j++;\n            }            \n                        \n        }        \n        return new string(sb.ToString().ToUpper().Reverse().ToArray());\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"license-key-formatting-string-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"recommendations":[{"id":1679,"title":"Insert Delete GetRandom O(1) - Array - Medium - LeetCode","imageUrl":"icon_8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","dateCreated":"2020-11-19T06:35:11.658Z","dateModified":"2020-11-19T06:35:19.394Z","contributedBy":"sumitc91","content":"Implement the RandomizedSet class:\nbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.<br />bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8589fcba-acbd-4690-8c6e-3f8e5511c176.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"insert-delete-getrandom-o1-array-medium-leetcode","total":0},{"id":1665,"title":"Subsets II - Array - Medium - LeetCode","imageUrl":"icon_aaa8f566-bd39-4867-a4ad-9d2ec8eb9fec.jpg","dateCreated":"2020-11-17T08:34:58.632Z","dateModified":"2020-11-17T08:35:04.765Z","contributedBy":"sumitc91","content":"Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: [1,2,2]<br />Output:<br />[<br />&nbsp; [2],<br />&nbsp; [1],<br />&nbsp; [1,2,2],<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/aaa8f566-bd39-4867-a4ad-9d2ec8eb9fec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"subsets-ii-array-medium-leetcode","total":0},{"id":1641,"title":"Combination Sum - Array - Medium - LeetCode","imageUrl":"icon_b42ea67c-de94-42f6-aa57-391837827a47.jpg","dateCreated":"2020-10-25T14:37:09.044Z","dateModified":"2020-10-25T14:37:53.305Z","contributedBy":"sumitc91","content":"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of time","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b42ea67c-de94-42f6-aa57-391837827a47.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"combination-sum-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}