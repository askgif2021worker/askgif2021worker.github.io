{"id":1624,"title":"Shortest Distance to a Character - Array - Easy - LeetCode","imageUrl":"icon_5ae5fc7c-ff85-4fa4-b353-2d4b89a92b76.jpg","dateCreated":"2020-10-18T03:37:10.612Z","dateModified":"2020-10-18T03:37:18.655Z","contributedBy":"sumitc91","content":"<p>Given a string S and a character C, return an array of integers representing the shortest distance from the character C in the string.</p>\n<p>Example 1:</p>\n<p>Input: S = \"loveleetcode\", C = 'e'<br />Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]<br />&nbsp;</p>\n<p>Note:</p>\n<p>S string length is in [1, 10000].<br />C is a single character, and guaranteed to be in string S.<br />All letters in S and C are lowercase.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int[] ShortestToChar(string S, char C) {\n        var left = new int[S.Length];\n        var right = new int[S.Length];\n        int j=int.MaxValue;\n        bool found = false;\n        for(int i=0;i&lt;S.Length;i++){\n            if(S[i]==C){\n                j=0;\n                found=true;\n            }\n            else if(found){                \n                j++;\n            }\n            left[i]=j;\n        }\n        \n        j = int.MaxValue;\n        found = false;\n        for(int i=S.Length-1;i&gt;=0;i--){\n            if(S[i]==C){\n                j=0;\n                found = true;\n            }\n            else if(found){\n                j++;\n            }\n            right[i]=Math.Min(left[i],j);\n        }\n        \n        var res = new int[S.Length];\n        for(int i=0;i&lt;S.Length;i++){\n            res[i]=Math.Min(left[i],right[i]);\n        }\n        \n        return res;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5ae5fc7c-ff85-4fa4-b353-2d4b89a92b76.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"shortest-distance-to-a-character-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1668,"title":"Triangle - Array - Medium - LeetCode","imageUrl":"icon_40571e99-73c8-48d0-aa94-4a53cb2adbce.jpg","dateCreated":"2020-11-17T12:18:25.997Z","dateModified":"2020-11-17T12:18:30.576Z","contributedBy":"sumitc91","content":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n[<br />&nbsp; &nbsp; &nbsp;[2],<br />&nbsp; &nbsp; [3,4],<br />&nbsp; &nbsp;[6,5,7],<br />&nbsp; [4,1,8,3]<br />]<br","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/40571e99-73c8-48d0-aa94-4a53cb2adbce.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"triangle-array-medium-leetcode","total":0},{"id":1653,"title":"Set Matrix Zeroes - Array - Medium - LeetCode","imageUrl":"icon_42006195-6b88-4b4d-a2d3-c695139d16b7.jpg","dateCreated":"2020-10-31T09:17:26.973Z","dateModified":"2020-10-31T09:17:33.085Z","contributedBy":"sumitc91","content":"Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.\nFollow up:\nA straight forward solution using O(mn) space is probably a bad idea.<br />A simple improvement uses O(m + n) space, but still not the best solution.<br />Could you devise a con","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/42006195-6b88-4b4d-a2d3-c695139d16b7.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"set-matrix-zeroes-array-medium-leetcode","total":0},{"id":1622,"title":"Rotate String - String - Easy - LeetCode","imageUrl":"icon_cfadbae1-5a57-4a8d-8e75-47f7f8493641.jpg","dateCreated":"2020-10-17T06:43:07.643Z","dateModified":"2020-10-17T06:43:14.01Z","contributedBy":"sumitc91","content":"We are given two strings, A and B.\nA shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/021208ce-72e5-4026-a526-0c8b482a8d72.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"rotate-string-string-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}