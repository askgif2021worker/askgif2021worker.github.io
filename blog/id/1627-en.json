{"id":1627,"title":"Number of Days Between Two Dates - Maths - Easy - LeetCode","imageUrl":"icon_c8c70ab5-92c2-4bfd-ad83-d0a6afbe3ded.jpg","dateCreated":"2020-10-18T06:18:04.266Z","dateModified":"2020-10-18T06:18:17.665Z","contributedBy":"sumitc91","content":"<p>Write a program to count the number of days between two dates.</p>\n<p>The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\"<br />Output: 1<br />Example 2:</p>\n<p>Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\"<br />Output: 15<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>The given dates are valid dates between the years 1971 and 2100.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int DaysBetweenDates(string date1, string date2) {\n        return Math.Abs(countSince1971(date1) - countSince1971(date2));\n    }\n    \n    public int countSince1971(String date) {\n        var monthDays = new int[]{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        var data = date.Split('-');\n        \n        int year = int.Parse(data[0]);\n        int month = int.Parse(data[1]);\n        int day = int.Parse(data[2]);\n        \n        for (int i = 1971; i &lt; year; i++) {\n            day += isALeapYear(i) ? 366 : 365;\n        }\n        for (int i = 1; i &lt; month; i++) {\n            if (isALeapYear(year) &amp;&amp; i == 2) {\n                day += 1;\n            } \n            day += monthDays[i];\n        }\n        return day;\n    }\n\n    public bool isALeapYear(int year) {\n        return (year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c8c70ab5-92c2-4bfd-ad83-d0a6afbe3ded.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"number-of-days-between-two-dates-maths-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"maths","slug":"maths"}],"recommendations":[{"id":1709,"title":"Goal Parser Interpretation - String - Easy - LeetCode","imageUrl":"icon_1a301e38-c33f-42ee-b91b-84f1471554f8.jpg","dateCreated":"2020-12-07T04:02:11.892Z","dateModified":"2020-12-07T04:02:17.242Z","contributedBy":"sumitc91","content":"You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1a301e38-c33f-42ee-b91b-84f1471554f8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"goal-parser-interpretation-string-easy-leetcode","total":0},{"id":1675,"title":"Majority Element II - Array - Medium - LeetCode","imageUrl":"icon_17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","dateCreated":"2020-11-18T12:22:28.829Z","dateModified":"2020-11-18T12:22:35.442Z","contributedBy":"sumitc91","content":"Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n&nbsp;\nExample 1:\nInput: nums = [3,2,3]<br />Output: [3]<br />Example 2:\nInput: nums =","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"majority-element-ii-array-medium-leetcode","total":0},{"id":1622,"title":"Rotate String - String - Easy - LeetCode","imageUrl":"icon_cfadbae1-5a57-4a8d-8e75-47f7f8493641.jpg","dateCreated":"2020-10-17T06:43:07.643Z","dateModified":"2020-10-17T06:43:14.01Z","contributedBy":"sumitc91","content":"We are given two strings, A and B.\nA shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/021208ce-72e5-4026-a526-0c8b482a8d72.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"rotate-string-string-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}