{"id":1638,"title":"Next Permutation - Array - Medium - LeetCode","imageUrl":"icon_467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","dateCreated":"2020-10-24T11:58:46.632Z","dateModified":"2020-10-24T11:59:00.039Z","contributedBy":"sumitc91","content":"<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n<p>If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).</p>\n<p>The replacement must be in place and use only constant extra memory.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: nums = [1,2,3]<br />Output: [1,3,2]<br />Example 2:</p>\n<p>Input: nums = [3,2,1]<br />Output: [1,2,3]<br />Example 3:</p>\n<p>Input: nums = [1,1,5]<br />Output: [1,5,1]<br />Example 4:</p>\n<p>Input: nums = [1]<br />Output: [1]<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= nums.length &lt;= 100<br />0 &lt;= nums[i] &lt;= 100</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public void NextPermutation(int[] nums) {\n             \n        int i=0;\n        for(i = nums.Length-2; i&gt;=0;i--){\n            if(nums[i]&lt;nums[i+1]){\n                break;\n            }\n        }\n        \n        if(i&lt;0){\n            reverse(nums,0,nums.Length-1);\n        }\n        else{\n            int j=0;\n            for(j = nums.Length-1;j&gt;=0;j--){\n                if(nums[i]&lt;nums[j]){\n                    break;\n                }\n            }\n            \n            swap(nums,i,j);\n            reverse(nums,i+1,nums.Length-1);\n        }\n                \n    }\n    \n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[j];\n        nums[j] = nums[i];\n        nums[i] = temp;\n    }\n    \n    private void reverse(int[] nums, int l, int r) {\n        while (l &lt; r) {\n            swap(nums, l++, r--);\n        }\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"next-permutation-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"recommendations":[{"id":1721,"title":"Find the Highest Altitude - Array - Easy - LeetCode","imageUrl":"icon_0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","dateCreated":"2021-01-26T09:15:18.731Z","dateModified":"2021-01-26T09:15:23.937Z","contributedBy":"sumitc91","content":"There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-highest-altitude-array-easy-leetcode","total":0},{"id":1650,"title":"Unique Paths - Array - Medium - LeetCode","imageUrl":"icon_7d520a0b-1d85-4323-8864-5769e8bcd088.jpg","dateCreated":"2020-10-31T08:21:35.294Z","dateModified":"2020-10-31T08:21:40.324Z","contributedBy":"sumitc91","content":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nHow many possi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7d520a0b-1d85-4323-8864-5769e8bcd088.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"unique-paths-array-medium-leetcode","total":0},{"id":1608,"title":"Duplicate Emails - Sql - Easy - LeetCode","imageUrl":"icon_bd99f209-a7f9-453d-9a5a-c63d4392098f.jpg","dateCreated":"2020-10-16T07:15:00.174Z","dateModified":"2020-10-16T07:15:10.2Z","contributedBy":"sumitc91","content":"Write a SQL query to find all duplicate emails in a table named Person.\n+----+---------+<br />| Id | Email &nbsp; |<br />+----+---------+<br />| 1 &nbsp;| a@b.com |<br />| 2 &nbsp;| c@d.com |<br />| 3 &nbsp;| a@b.com |<br />+----+---------+<br />For example, your query should return the fo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bd99f209-a7f9-453d-9a5a-c63d4392098f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"duplicate-emails-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}