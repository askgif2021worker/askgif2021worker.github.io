{"id":1639,"title":"Search in Rotated Sorted Array - Array - Medium - LeetCode","imageUrl":"icon_92804ec8-8b64-41e0-a4f4-89ed11e1a5e2.jpg","dateCreated":"2020-10-24T14:15:15.013Z","dateModified":"2020-10-24T14:15:23.602Z","contributedBy":"sumitc91","content":"<p>You are given an integer array nums sorted in ascending order, and an integer target.</p>\n<p>Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p>\n<p>If target is found in the array return its index, otherwise, return -1.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: nums = [4,5,6,7,0,1,2], target = 0<br />Output: 4<br />Example 2:</p>\n<p>Input: nums = [4,5,6,7,0,1,2], target = 3<br />Output: -1<br />Example 3:</p>\n<p>Input: nums = [1], target = 0<br />Output: -1<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= nums.length &lt;= 5000<br />-10^4 &lt;= nums[i] &lt;= 10^4<br />All values of nums are unique.<br />nums is guranteed to be rotated at some pivot.<br />-10^4 &lt;= target &lt;= 10^4</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int Search(int[] nums, int target) {\n        int low = 0;\n        int high = nums.Length-1;\n        int len = nums.Length;\n        while(low&lt;high){\n            int mid = low+(high-low)/2;\n            if(nums[mid]&gt;nums[high]){\n                low=mid+1;\n            }\n            else{\n                high=mid;\n            }\n        }\n        \n        int rotation = low;\n        \n        low=0;\n        high = nums.Length-1;\n        while(low&lt;=high){\n            int mid = low+(high-low)/2;\n            int actualMid = (mid + rotation)%len;\n            if(nums[actualMid]==target){\n                return actualMid;\n            }\n            else if(nums[actualMid]&lt;target){\n                low=mid+1;\n            }\n            else{\n                high=mid-1;\n            }                    \n        }\n        \n        return -1;\n    }\n        \n}</code></pre>\n<p>Time Complexity: O(logn)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/92804ec8-8b64-41e0-a4f4-89ed11e1a5e2.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"search-in-rotated-sorted-array-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1631,"title":"Largest Substring Between Two Equal Characters - Array - Easy - LeetCode","imageUrl":"icon_696afb81-fd63-43c4-a6e8-038e3152e83e.jpg","dateCreated":"2020-10-18T09:57:37.517Z","dateModified":"2020-10-18T09:57:48.765Z","contributedBy":"sumitc91","content":"Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\n&nbsp;\nExample 1:\nInput: s = \"aa\"<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/696afb81-fd63-43c4-a6e8-038e3152e83e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"largest-substring-between-two-equal-characters-array-easy-leetcode","total":0},{"id":1625,"title":"Print in Order - Multi Threading - Easy - LeetCode","imageUrl":"icon_3e17a90d-8d3d-4655-9ad5-34bee8157e21.jpg","dateCreated":"2020-10-18T04:04:15.138Z","dateModified":"2020-10-18T04:04:52.636Z","contributedBy":"sumitc91","content":"Suppose we have a class:\npublic class Foo {<br />&nbsp; public void first() { print(\"first\"); }<br />&nbsp; public void second() { print(\"second\"); }<br />&nbsp; public void third() { print(\"third\"); }<br />}<br />The same instance of Foo will be passed to three different threads. Thread A","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3e17a90d-8d3d-4655-9ad5-34bee8157e21.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"multi-threading","slug":"multi-threading"}],"slug":"print-in-order-multi-threading-easy-leetcode","total":0},{"id":1614,"title":"Fizz Buzz - List - Easy - LeetCode","imageUrl":"icon_6cbe0cee-fefe-40d0-8e0c-36270b4fa350.jpg","dateCreated":"2020-10-16T11:55:40.749Z","dateModified":"2020-10-16T11:55:50.939Z","contributedBy":"sumitc91","content":"Write a program that outputs the string representation of numbers from 1 to n.\nBut for multiples of three, it should output &ldquo;Fizz&rdquo; instead of the number and for the multiples of five output &ldquo;Buzz&rdquo;. For numbers which are multiples of both three and five output &ldquo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6cbe0cee-fefe-40d0-8e0c-36270b4fa350.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"fizz-buzz-list-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}