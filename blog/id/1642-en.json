{"id":1642,"title":"Combination Sum II - Array - Medium - LeetCode","imageUrl":"icon_134b4baa-680a-45e5-b0df-c627789e2d42.jpg","dateCreated":"2020-10-25T16:13:32.074Z","dateModified":"2020-10-25T16:13:43.44Z","contributedBy":"sumitc91","content":"<p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.</p>\n<p>Each number in candidates may only be used once in the combination.</p>\n<p>Note: The solution set must not contain duplicate combinations.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: candidates = [10,1,2,7,6,1,5], target = 8<br />Output:&nbsp;<br />[<br />[1,1,6],<br />[1,2,5],<br />[1,7],<br />[2,6]<br />]<br />Example 2:</p>\n<p>Input: candidates = [2,5,2,1,2], target = 5<br />Output:&nbsp;<br />[<br />[1,2,2],<br />[5]<br />]<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= candidates.length &lt;= 100<br />1 &lt;= candidates[i] &lt;= 50<br />1 &lt;= target &lt;= 30</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    IList&lt;IList&lt;int&gt;&gt; ans = new List&lt;IList&lt;int&gt;&gt;();    \n    HashSet&lt;string&gt; set = new HashSet&lt;string&gt;();\n    public IList&lt;IList&lt;int&gt;&gt; CombinationSum2(int[] candidates, int target) {\n        var res = new List&lt;int&gt;();        \n        Array.Sort(candidates);\n              \n        Helper(candidates, target, res, 0);\n        return ans;\n    }\n    \n    private void Helper(int[] candidates, int target, List&lt;int&gt; res, int start){\n        if(target == 0){           \n            var temp = new List&lt;int&gt;();\n            foreach(var item in res){\n                temp.Add(item);\n            }\n            ans.Add(temp);            \n            return;\n        }\n        \n        if(target &lt; 0)\n        {\n            return;\n        }\n        \n        for(int i=start;i&lt;candidates.Length;i++){ \n            if(i&gt;start &amp;&amp; candidates[i]==candidates[i-1]){\n                continue;\n            }            \n            res.Add(candidates[i]);            \n            Helper(candidates, target-candidates[i], res, i+1);\n            res.RemoveAt(res.Count()-1);          \n        }\n    }\n    \n}</code></pre>\n<p>Time Complexity: O(2^n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/134b4baa-680a-45e5-b0df-c627789e2d42.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"combination-sum-ii-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1673,"title":"Minimum Size Subarray Sum - Array - Medium - LeetCode","imageUrl":"icon_9cd5847f-8b41-455d-8ac3-9b66f2dcb47e.jpg","dateCreated":"2020-11-18T09:07:17.833Z","dateModified":"2020-11-18T09:07:23.659Z","contributedBy":"sumitc91","content":"Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum &ge; s. If there isn't one, return 0 instead.\nExample:&nbsp;\nInput: s = 7, nums = [2,3,1,2,4,3]<br />Output: 2<br />Explanation: the subarray [4,3] has t","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9cd5847f-8b41-455d-8ac3-9b66f2dcb47e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"minimum-size-subarray-sum-array-medium-leetcode","total":0},{"id":1645,"title":"Jump Game - Array - Medium - LeetCode","imageUrl":"icon_a22e7bed-85b5-4837-89ef-0da32c81085c.jpg","dateCreated":"2020-10-28T06:44:43.217Z","dateModified":"2020-10-28T06:44:52.67Z","contributedBy":"sumitc91","content":"Given an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\n&nbsp;\nExample 1:\nInput: num","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a22e7bed-85b5-4837-89ef-0da32c81085c.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"jump-game-array-medium-leetcode","total":0},{"id":1641,"title":"Combination Sum - Array - Medium - LeetCode","imageUrl":"icon_b42ea67c-de94-42f6-aa57-391837827a47.jpg","dateCreated":"2020-10-25T14:37:09.044Z","dateModified":"2020-10-25T14:37:53.305Z","contributedBy":"sumitc91","content":"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of time","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b42ea67c-de94-42f6-aa57-391837827a47.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"combination-sum-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}