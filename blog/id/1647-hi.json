{"id":1647,"title":"Slowest Key - Array - Easy - LeetCode","imageUrl":"icon_836f29a5-8a43-4160-b64a-fbf8416788bd.jpg","dateCreated":"2020-10-31T03:14:43.566Z","dateModified":"2020-10-31T03:14:48.648Z","contributedBy":"sumitc91","content":"<p>A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.</p>\n<p>You are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.</p>\n<p>The tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0].</p>\n<p>Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.</p>\n<p>Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"<br />Output: \"c\"<br />Explanation: The keypresses were as follows:<br />Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).<br />Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).<br />Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).<br />Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).<br />The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.<br />'c' is lexicographically larger than 'b', so the answer is 'c'.<br />Example 2:</p>\n<p>Input: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"<br />Output: \"a\"<br />Explanation: The keypresses were as follows:<br />Keypress for 's' had a duration of 12.<br />Keypress for 'p' had a duration of 23 - 12 = 11.<br />Keypress for 'u' had a duration of 36 - 23 = 13.<br />Keypress for 'd' had a duration of 46 - 36 = 10.<br />Keypress for 'a' had a duration of 62 - 46 = 16.<br />The longest of these was the keypress for 'a' with duration 16.<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>releaseTimes.length == n<br />keysPressed.length == n<br />2 &lt;= n &lt;= 1000<br />1 &lt;= releaseTimes[i] &lt;= 109<br />releaseTimes[i] &lt; releaseTimes[i+1]<br />keysPressed contains only lowercase English letters.</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public char SlowestKey(int[] releaseTimes, string keysPressed) {\n        if(releaseTimes.Length==0){\n            return new char();\n        }\n        \n        if(releaseTimes.Length==1){\n            return keysPressed[0];\n        }\n        \n        int max = releaseTimes[0];\n        char ch = keysPressed[0];\n        for(int i=1;i&lt;releaseTimes.Length;i++){\n            int diff = releaseTimes[i]-releaseTimes[i-1];            \n            if(max &lt; diff){                \n                ch = keysPressed[i];                \n                max = diff;\n            }\n            else if (max == diff){\n                if(ch&lt;keysPressed[i]){\n                    ch=keysPressed[i];\n                }\n            }\n        }\n        \n        return ch;\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/836f29a5-8a43-4160-b64a-fbf8416788bd.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"slowest-key-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1713,"title":"Reformat Phone Number - String - Easy - LeetCode","imageUrl":"icon_716c7816-48e6-45e6-840e-df068e41c6f6.jpg","dateCreated":"2021-01-05T04:21:52.889Z","dateModified":"2021-01-05T04:22:00.273Z","contributedBy":"sumitc91","content":"You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/716c7816-48e6-45e6-840e-df068e41c6f6.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"reformat-phone-number-string-easy-leetcode","total":0},{"id":1707,"title":"Maximum Repeating Substring - String - Easy - LeetCode","imageUrl":"icon_6c2a7180-5aaa-46ea-9f10-28d9ae8d0784.jpg","dateCreated":"2020-12-02T09:09:18.46Z","dateModified":"2020-12-02T09:09:24.372Z","contributedBy":"sumitc91","content":"For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiv","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6c2a7180-5aaa-46ea-9f10-28d9ae8d0784.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"maximum-repeating-substring-string-easy-leetcode","total":0},{"id":1593,"title":"Range Sum of BST - Tree - Easy - LeetCode","imageUrl":"icon_2d446765-9ada-4072-93c3-eedfb56f7794.jpg","dateCreated":"2020-10-09T08:49:41.585Z","dateModified":"2020-10-09T08:49:55.954Z","contributedBy":"sumitc91","content":"Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).\nThe binary search tree is guaranteed to have unique values.\n&nbsp;\nExample 1:\nInput: root = [10,5,15,3,7,null,18], L = 7, R = 15<br />Output: 32<b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2d446765-9ada-4072-93c3-eedfb56f7794.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"range-sum-of-bst-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}