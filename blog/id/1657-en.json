{"id":1657,"title":"Word Search - Array - Medium - LeetCode","imageUrl":"icon_20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","dateCreated":"2020-11-01T06:18:06.031Z","dateModified":"2020-11-01T06:18:12.117Z","contributedBy":"sumitc91","content":"<p>Given a 2D board and a word, find if the word exists in the grid.</p>\n<p>The word can be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p><br />Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"<br />Output: true<br />Example 2:</p>\n<p><br />Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"<br />Output: true<br />Example 3:</p>\n<p><br />Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"<br />Output: false<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>board and word consists only of lowercase and uppercase English letters.<br />1 &lt;= board.length &lt;= 200<br />1 &lt;= board[i].length &lt;= 200<br />1 &lt;= word.length &lt;= 10^3</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public bool Exist(char[][] board, string word) {\n        \n        var used = new HashSet&lt;string&gt;();\n        for(int i=0;i&lt;board.Length;i++){\n            for(int j=0;j&lt;board[0].Length;j++){\n                if(board[i][j]==word[0]){                                     \n                    var res = Helper(board,i,j, word, 0, used);  \n                    if(res){\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private bool Helper(char[][] board, int x, int y, string word,int start, HashSet&lt;string&gt; used){\n                \n        if(start == word.Length &amp;&amp; used.Count()==word.Length){                      \n            return true;\n        }   \n        \n        if(x&lt;0 || x&gt;board.Length-1){\n            return false;\n        }\n        \n        if(y&lt;0 || y &gt; board[0].Length-1){\n            return false;\n        }\n        \n        if(start&gt; word.Length-1){\n            return false;\n        }\n        \n        if(board[x][y]!=word[start]){\n            return false;\n        }\n        \n        if(used.Contains(GetKey(x,y))){\n            return false;\n        }\n        \n        used.Add(GetKey(x,y));\n        \n        bool result = false;        \n        \n        int x1 = x-1;\n        int y1 = y;        \n        result = result || Helper(board, x1, y1, word, start+1, used);\n        \n        x1 = x+1;\n        y1 = y;        \n        result = result || Helper(board, x1, y1, word, start+1, used);\n        \n        x1 = x;\n        y1 = y-1;        \n        result = result || Helper(board, x1, y1, word, start+1, used);\n        \n        x1 = x;\n        y1 = y+1;        \n        result = result || Helper(board, x1, y1, word, start+1, used);\n        \n        used.Remove(GetKey(x, y));\n        return result;\n    }\n    \n    private string GetKey(int x, int y){\n        return x+\":\"+y;\n    }\n}</code></pre>\n<p>Time Complexity: O(2^n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"word-search-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1721,"title":"Find the Highest Altitude - Array - Easy - LeetCode","imageUrl":"icon_0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","dateCreated":"2021-01-26T09:15:18.731Z","dateModified":"2021-01-26T09:15:23.937Z","contributedBy":"sumitc91","content":"There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0cd60e05-bb63-481c-ac68-c3417eabb1cb.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"find-the-highest-altitude-array-easy-leetcode","total":0},{"id":1681,"title":"Circular Array Loop - Array - Medium - LeetCode","imageUrl":"icon_32298a91-8bd5-4e63-872d-105103726a20.jpg","dateCreated":"2020-11-19T09:05:08.281Z","dateModified":"2020-11-19T09:05:14.582Z","contributedBy":"sumitc91","content":"You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32298a91-8bd5-4e63-872d-105103726a20.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"circular-array-loop-array-medium-leetcode","total":0},{"id":1668,"title":"Triangle - Array - Medium - LeetCode","imageUrl":"icon_40571e99-73c8-48d0-aa94-4a53cb2adbce.jpg","dateCreated":"2020-11-17T12:18:25.997Z","dateModified":"2020-11-17T12:18:30.576Z","contributedBy":"sumitc91","content":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n[<br />&nbsp; &nbsp; &nbsp;[2],<br />&nbsp; &nbsp; [3,4],<br />&nbsp; &nbsp;[6,5,7],<br />&nbsp; [4,1,8,3]<br />]<br","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/40571e99-73c8-48d0-aa94-4a53cb2adbce.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"triangle-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}