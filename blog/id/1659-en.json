{"id":1659,"title":"Sort Array by Increasing Frequency - Array - Medium - LeetCode","imageUrl":"icon_0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","dateCreated":"2020-11-03T05:02:58.417Z","dateModified":"2020-11-03T05:10:52.862Z","contributedBy":"sumitc91","content":"<p>Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p>\n<p>Return the sorted array.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: nums = [1,1,2,2,2,3]<br />Output: [3,1,1,2,2,2]<br />Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.<br />Example 2:</p>\n<p>Input: nums = [2,3,1,3,2]<br />Output: [1,3,3,2,2]<br />Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.<br />Example 3:</p>\n<p>Input: nums = [-1,1,-6,4,5,-6,1,4,1]<br />Output: [5,-1,4,4,-6,-6,1,1,1]<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= nums.length &lt;= 100<br />-100 &lt;= nums[i] &lt;= 100</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int[] FrequencySort(int[] nums) {\n        var map = new Dictionary&lt;int,int&gt;();\n        var res = new int[nums.Length];\n        for(int i=0;i&lt;nums.Length;i++){            \n            if(map.ContainsKey(nums[i])){\n                map[nums[i]]++;            \n            }\n            else{\n                map.Add(nums[i],1);\n            }\n        }\n        \n        map = map.OrderBy(x=&gt;x.Value).ThenByDescending(x=&gt;x.Key).ToDictionary(x=&gt; x.Key, x=&gt;x.Value);\n        int index=0;\n        foreach(var item in map){            \n            for(int i=0;i&lt;item.Value;i++){\n                res[index]=item.Key;\n                index++;\n            }\n        }\n        \n        return res;\n    }\n}</code></pre>\n<p>Time Complexity: O(nlogn)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"sort-array-by-increasing-frequency-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1637,"title":"4Sum - Array - Medium - LeetCode","imageUrl":"icon_dadac4de-7510-4859-a826-eab8fa2011e3.jpg","dateCreated":"2020-10-24T10:17:11.757Z","dateModified":"2020-10-24T10:17:18.465Z","contributedBy":"sumitc91","content":"Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\nNotice that the solution set must not contain duplicate quadruplets.\n&nbsp;</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/dadac4de-7510-4859-a826-eab8fa2011e3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"4sum-array-medium-leetcode","total":0},{"id":1615,"title":"License Key Formatting - String - Easy - LeetCode","imageUrl":"icon_168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","dateCreated":"2020-10-17T04:06:23.384Z","dateModified":"2020-10-17T04:06:32.538Z","contributedBy":"sumitc91","content":"You are given a license key represented as a string S which consists of only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the fi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"license-key-formatting-string-easy-leetcode","total":0},{"id":1600,"title":"Design Parking System - Design - Easy - LeetCode","imageUrl":"icon_2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","dateCreated":"2020-10-15T05:28:49.957Z","dateModified":"2020-10-15T05:49:22.82Z","contributedBy":"sumitc91","content":"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:\nParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c48fcf9-50ff-4bd1-9d59-5a5807a0e9ab.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"design","slug":"design"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-parking-system-design-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}