{"id":1664,"title":"Design an Ordered Stream - Array - Easy - LeetCode","imageUrl":"icon_ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","dateCreated":"2020-11-16T03:10:10.642Z","dateModified":"2020-11-16T03:10:15.886Z","contributedBy":"sumitc91","content":"<p>There are n (id, value) pairs, where id is an integer between 1 and n and value is a string. No two pairs have the same id.</p>\n<p>Design a stream that takes the n pairs in an arbitrary order, and returns the values over several calls in increasing order of their ids.</p>\n<p>Implement the OrderedStream class:</p>\n<p>OrderedStream(int n) Constructs the stream to take n values and sets a current ptr to 1.<br />String[] insert(int id, String value) Stores the new (id, value) pair in the stream. After storing the pair:<br />If the stream has stored a pair with id = ptr, then find the longest contiguous incrementing sequence of ids starting with id = ptr and return a list of the values associated with those ids in order. Then, update ptr to the last id + 1.<br />Otherwise, return an empty list.<br />&nbsp;</p>\n<p>Example:</p>\n<p>&nbsp;</p>\n<p>Input<br />[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]<br />[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]<br />Output<br />[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]</p>\n<p>Explanation<br />OrderedStream os= new OrderedStream(5);<br />os.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].<br />os.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].<br />os.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].<br />os.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].<br />os.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= n &lt;= 1000<br />1 &lt;= id &lt;= n<br />value.length == 5<br />value consists only of lowercase letters.<br />Each call to insert will have a unique id.<br />Exactly n calls will be made to insert.</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class OrderedStream {\n    string[] strArr;\n    int ptr = 0;\n    public OrderedStream(int n) {\n        strArr = new string[n];\n    }\n    \n    public IList&lt;string&gt; Insert(int id, string value) {\n        id = id-1;\n        strArr[id]=value;\n        var result = new List&lt;string&gt;();\n        if(ptr==id){\n            while(ptr &lt; strArr.Length &amp;&amp; strArr[ptr]!=null){\n                result.Add(strArr[ptr]);\n                ptr++;\n            }\n        }\n        \n        return result;\n    }\n}\n\n/**\n * Your OrderedStream object will be instantiated and called as such:\n * OrderedStream obj = new OrderedStream(n);\n * IList&lt;string&gt; param_1 = obj.Insert(id,value);\n */</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"design-an-ordered-stream-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1638,"title":"Next Permutation - Array - Medium - LeetCode","imageUrl":"icon_467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","dateCreated":"2020-10-24T11:58:46.632Z","dateModified":"2020-10-24T11:59:00.039Z","contributedBy":"sumitc91","content":"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\nThe replacement must be in place and use ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"next-permutation-array-medium-leetcode","total":0},{"id":1625,"title":"Print in Order - Multi Threading - Easy - LeetCode","imageUrl":"icon_3e17a90d-8d3d-4655-9ad5-34bee8157e21.jpg","dateCreated":"2020-10-18T04:04:15.138Z","dateModified":"2020-10-18T04:04:52.636Z","contributedBy":"sumitc91","content":"Suppose we have a class:\npublic class Foo {<br />&nbsp; public void first() { print(\"first\"); }<br />&nbsp; public void second() { print(\"second\"); }<br />&nbsp; public void third() { print(\"third\"); }<br />}<br />The same instance of Foo will be passed to three different threads. Thread A","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3e17a90d-8d3d-4655-9ad5-34bee8157e21.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"multi-threading","slug":"multi-threading"}],"slug":"print-in-order-multi-threading-easy-leetcode","total":0},{"id":1591,"title":"Leaf-Similar Trees - Tree - Easy - LeetCode","imageUrl":"icon_db0b4415-6ae2-4e32-b111-ad26e1d99874.jpg","dateCreated":"2020-10-09T05:05:38.157Z","dateModified":"2020-10-09T05:05:50.02Z","contributedBy":"sumitc91","content":"Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar if their leaf value sequence is t","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/db0b4415-6ae2-4e32-b111-ad26e1d99874.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"leaf-similar-trees-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}