{"id":1674,"title":"Combination Sum III - Array - Medium - LeetCode","imageUrl":"icon_becf4b84-69f9-4582-a8d7-d32b8422353a.jpg","dateCreated":"2020-11-18T11:38:07.946Z","dateModified":"2020-11-18T11:38:14.249Z","contributedBy":"sumitc91","content":"<p>Find all valid combinations of k numbers that sum up to n such that the following conditions are true:</p>\n<p>Only numbers 1 through 9 are used.<br />Each number is used at most once.<br />Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: k = 3, n = 7<br />Output: [[1,2,4]]<br />Explanation:<br />1 + 2 + 4 = 7<br />There are no other valid combinations.<br />Example 2:</p>\n<p>Input: k = 3, n = 9<br />Output: [[1,2,6],[1,3,5],[2,3,4]]<br />Explanation:<br />1 + 2 + 6 = 9<br />1 + 3 + 5 = 9<br />2 + 3 + 4 = 9<br />There are no other valid combinations.<br />Example 3:</p>\n<p>Input: k = 4, n = 1<br />Output: []<br />Explanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.<br />Example 4:</p>\n<p>Input: k = 3, n = 2<br />Output: []<br />Explanation: There are no valid combinations.<br />Example 5:</p>\n<p>Input: k = 9, n = 45<br />Output: [[1,2,3,4,5,6,7,8,9]]<br />Explanation:<br />1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45<br />​​​​​​​There are no other valid combinations.<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>2 &lt;= k &lt;= 9<br />1 &lt;= n &lt;= 60</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    IList&lt;IList&lt;int&gt;&gt; result = new List&lt;IList&lt;int&gt;&gt;();\n    public IList&lt;IList&lt;int&gt;&gt; CombinationSum3(int k, int n) {\n        var list = new List&lt;int&gt;();\n        Helper(k,n,9,1, list);\n        \n        return result;\n    }\n    \n    private void Helper(int k, int sum, int n, int start, List&lt;int&gt; list){\n        if(k==0){\n            if(sum==0){\n                var temp = new List&lt;int&gt;(list);\n                result.Add(temp);\n            }\n            return;            \n        }\n        \n        if(sum&lt;0){\n            return;\n        }\n        \n        for(int i=start;i&lt;=n;i++){\n            list.Add(i);\n            Helper(k-1,sum-i,n,i+1,list);\n            list.RemoveAt(list.Count()-1);\n        }\n                \n    }\n}</code></pre>\n<p>Time Complexity: O(2^n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/becf4b84-69f9-4582-a8d7-d32b8422353a.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"combination-sum-iii-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1666,"title":"Construct Binary Tree from Preorder and Inorder Traversal - Array - Medium - LeetCode","imageUrl":"icon_af4cfea8-d43c-4a5f-aded-bc8e7ebfe296.jpg","dateCreated":"2020-11-17T10:00:03.216Z","dateModified":"2020-11-17T10:00:07.655Z","contributedBy":"sumitc91","content":"Given preorder and inorder traversal of a tree, construct the binary tree.\nNote:<br />You may assume that duplicates do not exist in the tree.\nFor example, given\npreorder = [3,9,20,15,7]<br />inorder = [9,3,15,20,7]<br />Return the following binary tree:\n&nbsp; &nbsp; ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/af4cfea8-d43c-4a5f-aded-bc8e7ebfe296.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"construct-binary-tree-from-preorder-and-inorder-traversal-array-medium-leetcode","total":0},{"id":1614,"title":"Fizz Buzz - List - Easy - LeetCode","imageUrl":"icon_6cbe0cee-fefe-40d0-8e0c-36270b4fa350.jpg","dateCreated":"2020-10-16T11:55:40.749Z","dateModified":"2020-10-16T11:55:50.939Z","contributedBy":"sumitc91","content":"Write a program that outputs the string representation of numbers from 1 to n.\nBut for multiples of three, it should output &ldquo;Fizz&rdquo; instead of the number and for the multiples of five output &ldquo;Buzz&rdquo;. For numbers which are multiples of both three and five output &ldquo","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6cbe0cee-fefe-40d0-8e0c-36270b4fa350.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"fizz-buzz-list-easy-leetcode","total":0},{"id":1604,"title":"Second Highest Salary - Sql - Easy - LeetCode","imageUrl":"icon_cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","dateCreated":"2020-10-16T06:01:26.855Z","dateModified":"2020-10-16T06:01:35.503Z","contributedBy":"sumitc91","content":"Write a SQL query to get the second highest salary from the Employee table.\n+----+--------+<br />| Id | Salary |<br />+----+--------+<br />| 1 &nbsp;| 100 &nbsp; &nbsp;|<br />| 2 &nbsp;| 200 &nbsp; &nbsp;|<br />| 3 &nbsp;| 300 &nbsp; &nbsp;|<br />+----+--------+<br />For example, given the","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cbe876f9-f816-4e65-800b-bbc50dec92d4.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"second-highest-salary-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}