{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"<p>According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"</p>\n<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>\n<p>Any live cell with fewer than two live neighbors dies, as if caused by under-population.<br />Any live cell with two or three live neighbors lives on to the next generation.<br />Any live cell with more than three live neighbors dies, as if by over-population..<br />Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.<br />Write a function to compute the next state (after one update) of the board given its current state. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously.</p>\n<p>Example:</p>\n<p>Input:&nbsp;<br />[<br />&nbsp; [0,1,0],<br />&nbsp; [0,0,1],<br />&nbsp; [1,1,1],<br />&nbsp; [0,0,0]<br />]<br />Output:&nbsp;<br />[<br />&nbsp; [0,0,0],<br />&nbsp; [1,0,1],<br />&nbsp; [0,1,1],<br />&nbsp; [0,1,0]<br />]<br />Follow up:</p>\n<p>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.<br />In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    const int die = 2;\n    const int live = 3;\n    public void GameOfLife(int[][] board) {\n        int row = board.Length;\n        int column = board[0].Length;\n        \n        for(int i=0;i&lt;row;i++){\n            for(int j=0;j&lt;column;j++){\n                var countLive = CountLive(board,i,j);\n                if(countLive&lt;2 &amp;&amp; board[i][j]==1){\n                    board[i][j]=die;\n                }\n                else if(board[i][j]==0 &amp;&amp; countLive==3){\n                    board[i][j]=live;\n                }\n                else if(countLive==2 || countLive==3){\n                    continue;\n                }\n                else if(countLive&gt;3 &amp;&amp; board[i][j]==1){\n                    board[i][j]=die;\n                }\n            }\n        }\n        \n        for(int i=0;i&lt;row;i++){\n            for(int j=0;j&lt;column;j++){\n                if(board[i][j]==die){\n                    board[i][j]=0;\n                }\n                else if(board[i][j]==live){\n                    board[i][j]=1;\n                }\n            }\n        }\n    }\n    \n    private int CountLive(int[][] board, int i, int j){\n        int count = 0;\n        var dirx = new int[] {1 ,-1 ,0 , 0 ,1 , 1 ,-1,-1};\n        var diry = new int[] {0 , 0 ,1 ,-1 ,1 ,-1 , 1,-1};\n        \n        for(int k=0;k&lt;dirx.Length;k++){\n            int x = i + dirx[k];\n            int y = j + diry[k];\n            \n            if(x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;board.Length &amp;&amp; y&lt;board[0].Length){\n                if(board[x][y]==1 || board[x][y]==die){\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}</code></pre>\n<p>Time Complexity: O(m*n)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"game-of-life-array-medium-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"recommendations":[{"id":1658,"title":"Remove Duplicates from Sorted Array II - Array - Medium - LeetCode","imageUrl":"icon_354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","dateCreated":"2020-11-01T11:57:49.77Z","dateModified":"2020-11-01T11:57:54.983Z","contributedBy":"sumitc91","content":"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\nClarification:\nConfus","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/354cc221-dcd4-4077-91b3-0f1bd91088b2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"remove-duplicates-from-sorted-array-ii-array-medium-leetcode","total":0},{"id":1647,"title":"Slowest Key - Array - Easy - LeetCode","imageUrl":"icon_836f29a5-8a43-4160-b64a-fbf8416788bd.jpg","dateCreated":"2020-10-31T03:14:43.566Z","dateModified":"2020-10-31T03:14:48.648Z","contributedBy":"sumitc91","content":"A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.\nYou are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith k","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/836f29a5-8a43-4160-b64a-fbf8416788bd.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"slowest-key-array-easy-leetcode","total":0},{"id":1628,"title":"Special Array With X Elements Greater Than or Equal X - Array - Easy - LeetCode","imageUrl":"icon_8f426000-750a-4ff1-bb71-5a34851ae354.jpg","dateCreated":"2020-10-18T06:57:23.217Z","dateModified":"2020-10-18T06:57:30.65Z","contributedBy":"sumitc91","content":"You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, othe","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8f426000-750a-4ff1-bb71-5a34851ae354.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"special-array-with-x-elements-greater-than-or-equal-x-array-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}