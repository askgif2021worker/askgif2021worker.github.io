{"id":1683,"title":"How to approach a system design interview question?","imageUrl":"icon_fbaef721-6795-45be-bd0a-7e132d4a2788.jpg","dateCreated":"2020-11-20T04:35:47.854Z","dateModified":"2020-11-20T04:36:13.542Z","contributedBy":"sumitc91","content":"<p>The system design interview is an open-ended conversation. You are expected to lead it.</p>\n<p>You can use the following steps to guide the discussion. To help solidify this process, work through the System design interview questions with the solutions section using the following steps.</p>\n<p>Step 1: Outline use cases, constraints, and assumptions<br />Gather requirements and scope the problem. Ask questions to clarify use cases and constraints. Discuss assumptions.</p>\n<p>Who is going to use it?<br />How are they going to use it?<br />How many users are there?<br />What does the system do?<br />What are the inputs and outputs of the system?<br />How much data do we expect to handle?<br />How many requests per second do we expect?<br />What is the expected read to write ratio?<br />Step 2: Create a high-level design<br />Outline a high-level design with all important components.</p>\n<p>Sketch the main components and connections<br />Justify your ideas<br />Step 3: Design core components<br />Dive into details for each core component. For example, if you were asked to design a URL shortening service, discuss:</p>\n<p>Generating and storing a hash of the full URL<br />MD5 and Base62<br />Hash collisions<br />SQL or NoSQL<br />Database schema<br />Translating a hashed URL to the full URL<br />Database lookup<br />API and object-oriented design<br />Step 4: Scale the design<br />Identify and address bottlenecks, given the constraints. For example, do you need the following to address scalability issues?</p>\n<p>Load balancer<br />Horizontal scaling<br />Caching<br />Database sharding<br />Discuss potential solutions and trade-offs. Everything is a trade-off. Address bottlenecks using principles of scalable system design.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fbaef721-6795-45be-bd0a-7e132d4a2788.jpg","subContents":[],"category":{"name":"tutorials","slug":"tutorials"},"slug":"how-to-approach-a-system-design-interview-question","tags":[{"name":"design","slug":"design"},{"name":"interview","slug":"interview"},{"name":"system-design","slug":"system-design"}],"recommendations":[{"id":92,"title":"How will you find the middle of the Linked List?","imageUrl":"12b10340-a78f-4996-82b0-fc004964bbed_middle-element-linkedlist.png","dateCreated":"2018-08-07T15:12:05.744Z","dateModified":"2018-08-07T15:22:17.513Z","contributedBy":"AskGif","content":"To find the middle of a linked list we can use many approaches. let's discuss our first approach having O(n) time complexity with 2 passes.\r\nWe will be calculating the length n of the linked list in the first iteration and in second iteration we will be traversing to n/2 length to get the ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/12b10340-a78f-4996-82b0-fc004964bbed_middle-element-linkedlist.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"},{"name":"java","slug":"java"},{"name":"questions","slug":"questions"}],"slug":"how-will-you-find-the-middle-of-the-linked-list","total":0},{"id":65,"title":"What is Strategy pattern?","imageUrl":"ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","dateCreated":"2018-08-01T12:05:22.176Z","dateModified":"2018-08-01T17:24:43.716Z","contributedBy":"AskGif","content":"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which is a family of algorithms ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-strategy-pattern","total":0},{"id":26,"title":"Cutting Rod Problem to get maximum profit","imageUrl":"9e5dad83-cf44-4cbb-802a-d2b361487079_cutting-rod.png","dateCreated":"2018-07-13T13:29:30.675Z","dateModified":"2018-07-14T04:10:50.978Z","contributedBy":"AskGif","content":"You are given a rod of a particular length and prices at which those different lengths of this rod can be sell, how will you cut this rod to maximize your profit?&nbsp;\r\nWe will be using dynamic programming to solve this problem. Java Solution for the problem is given below:\r\n&nbsp;","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e5dad83-cf44-4cbb-802a-d2b361487079_cutting-rod.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"cutting-rod-problem-to-get-maximum-profit","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}