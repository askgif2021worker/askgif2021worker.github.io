{"id":1686,"title":"How to Design a web crawler","imageUrl":"icon_f983d8a0-6ee2-4024-8702-47973c582627.png","dateCreated":"2020-11-20T06:47:56.023Z","dateModified":"2020-11-20T06:48:08.443Z","contributedBy":"sumitc91","content":"<p>Step 1: Outline use cases and constraints<br />Gather requirements and scope the problem. Ask questions to clarify use cases and constraints. Discuss assumptions.</p>\n<p>Without an interviewer to address clarifying questions, we'll define some use cases and constraints.</p>\n<p>Use cases<br />We'll scope the problem to handle only the following use cases<br />Service crawls a list of urls:<br />Generates reverse index of words to pages containing the search terms<br />Generates titles and snippets for pages<br />Title and snippets are static, they do not change based on search query<br />User inputs a search term and sees a list of relevant pages with titles and snippets the crawler generated<br />Only sketch high level components and interactions for this use case, no need to go into depth<br />Service has high availability</p>\n<p><br />Out of scope<br />Search analytics<br />Personalized search results<br />Page rank<br />Constraints and assumptions</p>\n<p><br />State assumptions<br />Traffic is not evenly distributed<br />Some searches are very popular, while others are only executed once<br />Support only anonymous users<br />Generating search results should be fast<br />The web crawler should not get stuck in an infinite loop<br />We get stuck in an infinite loop if the graph contains a cycle<br />1 billion links to crawl<br />Pages need to be crawled regularly to ensure freshness<br />Average refresh rate of about once per week, more frequent for popular sites<br />4 billion links crawled each month<br />Average stored size per web page: 500 KB<br />For simplicity, count changes the same as new pages<br />100 billion searches per month<br />Exercise the use of more traditional systems - don't use existing systems such as solr or nutch.</p>\n<p>Calculate usage<br />Clarify with your interviewer if you should run back-of-the-envelope usage calculations.</p>\n<p>2 PB of stored page content per month<br />500 KB per page * 4 billion links crawled per month<br />72 PB of stored page content in 3 years<br />1,600 write requests per second<br />40,000 search requests per second<br />Handy conversion guide:</p>\n<p>2.5 million seconds per month<br />1 request per second = 2.5 million requests per month<br />40 requests per second = 100 million requests per month<br />400 requests per second = 1 billion requests per month<br />Step 2: Create a high level design<br />Outline a high level design with all important components.</p>\n<p>Imgur</p>\n<p>Step 3: Design core components<br />Dive into details for each core component.</p>\n<p>Use case: Service crawls a list of urls<br />We'll assume we have an initial list of links_to_crawl ranked initially based on overall site popularity. If this is not a reasonable assumption, we can seed the crawler with popular sites that link to outside content such as Yahoo, DMOZ, etc.</p>\n<p>We'll use a table crawled_links to store processed links and their page signatures.</p>\n<p>We could store links_to_crawl and crawled_links in a key-value NoSQL Database. For the ranked links in links_to_crawl, we could use Redis with sorted sets to maintain a ranking of page links. We should discuss the use cases and tradeoffs between choosing SQL or NoSQL.</p>\n<p>The Crawler Service processes each page link by doing the following in a loop:<br />Takes the top ranked page link to crawl<br />Checks crawled_links in the NoSQL Database for an entry with a similar page signature<br />If we have a similar page, reduces the priority of the page link<br />This prevents us from getting into a cycle<br />Continue<br />Else, crawls the link<br />Adds a job to the Reverse Index Service queue to generate a reverse index<br />Adds a job to the Document Service queue to generate a static title and snippet<br />Generates the page signature<br />Removes the link from links_to_crawl in the NoSQL Database<br />Inserts the page link and signature to crawled_links in the NoSQL Database<br />Clarify with your interviewer how much code you are expected to write.</p>\n<p>PagesDataStore is an abstraction within the Crawler Service that uses the NoSQL Database:</p>\n<p>class PagesDataStore(object):</p>\n<p>&nbsp; &nbsp; def __init__(self, db);<br />&nbsp; &nbsp; &nbsp; &nbsp; self.db = db<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def add_link_to_crawl(self, url):<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Add the given link to `links_to_crawl`.\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def remove_link_to_crawl(self, url):<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Remove the given link from `links_to_crawl`.\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def reduce_priority_link_to_crawl(self, url)<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def extract_max_priority_page(self):<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def insert_crawled_link(self, url, signature):<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Add the given link to `crawled_links`.\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def crawled_similar(self, signature):<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />Page is an abstraction within the Crawler Service that encapsulates a page, its contents, child urls, and signature:</p>\n<p>class Page(object):</p>\n<p>&nbsp; &nbsp; def __init__(self, url, contents, child_urls, signature):<br />&nbsp; &nbsp; &nbsp; &nbsp; self.url = url<br />&nbsp; &nbsp; &nbsp; &nbsp; self.contents = contents<br />&nbsp; &nbsp; &nbsp; &nbsp; self.child_urls = child_urls<br />&nbsp; &nbsp; &nbsp; &nbsp; self.signature = signature<br />Crawler is the main class within Crawler Service, composed of Page and PagesDataStore.</p>\n<p>class Crawler(object):</p>\n<p>&nbsp; &nbsp; def __init__(self, data_store, reverse_index_queue, doc_index_queue):<br />&nbsp; &nbsp; &nbsp; &nbsp; self.data_store = data_store<br />&nbsp; &nbsp; &nbsp; &nbsp; self.reverse_index_queue = reverse_index_queue<br />&nbsp; &nbsp; &nbsp; &nbsp; self.doc_index_queue = doc_index_queue</p>\n<p>&nbsp; &nbsp; def create_signature(self, page):<br />&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Create signature based on url and contents.\"\"\"<br />&nbsp; &nbsp; &nbsp; &nbsp; ...</p>\n<p>&nbsp; &nbsp; def crawl_page(self, page):<br />&nbsp; &nbsp; &nbsp; &nbsp; for url in page.child_urls:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data_store.add_link_to_crawl(url)<br />&nbsp; &nbsp; &nbsp; &nbsp; page.signature = self.create_signature(page)<br />&nbsp; &nbsp; &nbsp; &nbsp; self.data_store.remove_link_to_crawl(page.url)<br />&nbsp; &nbsp; &nbsp; &nbsp; self.data_store.insert_crawled_link(page.url, page.signature)</p>\n<p>&nbsp; &nbsp; def crawl(self):<br />&nbsp; &nbsp; &nbsp; &nbsp; while True:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; page = self.data_store.extract_max_priority_page()<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if page is None:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if self.data_store.crawled_similar(page.signature):<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data_store.reduce_priority_link_to_crawl(page.url)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.crawl_page(page)<br />Handling duplicates<br />We need to be careful the web crawler doesn't get stuck in an infinite loop, which happens when the graph contains a cycle.</p>\n<p>Clarify with your interviewer how much code you are expected to write.</p>\n<p>We'll want to remove duplicate urls:</p>\n<p>For smaller lists we could use something like sort | unique<br />With 1 billion links to crawl, we could use MapReduce to output only entries that have a frequency of 1<br />class RemoveDuplicateUrls(MRJob):</p>\n<p>&nbsp; &nbsp; def mapper(self, _, line):<br />&nbsp; &nbsp; &nbsp; &nbsp; yield line, 1</p>\n<p>&nbsp; &nbsp; def reducer(self, key, values):<br />&nbsp; &nbsp; &nbsp; &nbsp; total = sum(values)<br />&nbsp; &nbsp; &nbsp; &nbsp; if total == 1:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yield key, total<br />Detecting duplicate content is more complex. We could generate a signature based on the contents of the page and compare those two signatures for similarity. Some potential algorithms are Jaccard index and cosine similarity.</p>\n<p>Determining when to update the crawl results<br />Pages need to be crawled regularly to ensure freshness. Crawl results could have a timestamp field that indicates the last time a page was crawled. After a default time period, say one week, all pages should be refreshed. Frequently updated or more popular sites could be refreshed in shorter intervals.</p>\n<p>Although we won't dive into details on analytics, we could do some data mining to determine the mean time before a particular page is updated, and use that statistic to determine how often to re-crawl the page.</p>\n<p>We might also choose to support a Robots.txt file that gives webmasters control of crawl frequency.</p>\n<p>Use case: User inputs a search term and sees a list of relevant pages with titles and snippets<br />The Client sends a request to the Web Server, running as a reverse proxy<br />The Web Server forwards the request to the Query API server<br />The Query API server does the following:<br />Parses the query<br />Removes markup<br />Breaks up the text into terms<br />Fixes typos<br />Normalizes capitalization<br />Converts the query to use boolean operations<br />Uses the Reverse Index Service to find documents matching the query<br />The Reverse Index Service ranks the matching results and returns the top ones<br />Uses the Document Service to return titles and snippets<br />We'll use a public REST API:</p>\n<p>$ curl https://search.com/api/v1/search?query=hello+world<br />Response:</p>\n<p>{<br />&nbsp; &nbsp; \"title\": \"foo's title\",<br />&nbsp; &nbsp; \"snippet\": \"foo's snippet\",<br />&nbsp; &nbsp; \"link\": \"https://foo.com\",<br />},<br />{<br />&nbsp; &nbsp; \"title\": \"bar's title\",<br />&nbsp; &nbsp; \"snippet\": \"bar's snippet\",<br />&nbsp; &nbsp; \"link\": \"https://bar.com\",<br />},<br />{<br />&nbsp; &nbsp; \"title\": \"baz's title\",<br />&nbsp; &nbsp; \"snippet\": \"baz's snippet\",<br />&nbsp; &nbsp; \"link\": \"https://baz.com\",<br />},<br />For internal communications, we could use Remote Procedure Calls.</p>\n<p>Step 4: Scale the design<br />Identify and address bottlenecks, given the constraints.</p>\n<p>Imgur</p>\n<p>Important: Do not simply jump right into the final design from the initial design!</p>\n<p>State you would 1) Benchmark/Load Test, 2) Profile for bottlenecks 3) address bottlenecks while evaluating alternatives and trade-offs, and 4) repeat. See Design a system that scales to millions of users on AWS as a sample on how to iteratively scale the initial design.</p>\n<p>It's important to discuss what bottlenecks you might encounter with the initial design and how you might address each of them. For example, what issues are addressed by adding a Load Balancer with multiple Web Servers? CDN? Master-Slave Replicas? What are the alternatives and Trade-Offs for each?</p>\n<p>We'll introduce some components to complete the design and to address scalability issues. Internal load balancers are not shown to reduce clutter.</p>\n<p>To avoid repeating discussions, refer to the following system design topics for main talking points, tradeoffs, and alternatives:</p>\n<p>DNS<br />Load balancer<br />Horizontal scaling<br />Web server (reverse proxy)<br />API server (application layer)<br />Cache<br />NoSQL<br />Consistency patterns<br />Availability patterns<br />Some searches are very popular, while others are only executed once. Popular queries can be served from a Memory Cache such as Redis or Memcached to reduce response times and to avoid overloading the Reverse Index Service and Document Service. The Memory Cache is also useful for handling the unevenly distributed traffic and traffic spikes. Reading 1 MB sequentially from memory takes about 250 microseconds, while reading from SSD takes 4x and from disk takes 80x longer.1</p>\n<p>Below are a few other optimizations to the Crawling Service:</p>\n<p>To handle the data size and request load, the Reverse Index Service and Document Service will likely need to make heavy use sharding and federation.<br />DNS lookup can be a bottleneck, the Crawler Service can keep its own DNS lookup that is refreshed periodically<br />The Crawler Service can improve performance and reduce memory usage by keeping many open connections at a time, referred to as connection pooling<br />Switching to UDP could also boost performance<br />Web crawling is bandwidth-intensive, ensure there is enough bandwidth to sustain high throughput</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f983d8a0-6ee2-4024-8702-47973c582627.png","subContents":[],"category":{"name":"tutorials","slug":"tutorials"},"slug":"how-to-design-a-web-crawler","tags":[{"name":"design","slug":"design"},{"name":"interview","slug":"interview"},{"name":"system-design","slug":"system-design"}],"recommendations":[{"id":1690,"title":"How to Design a system that scales to millions of users on AWS","imageUrl":"icon_c4c206e1-63c2-46f8-a9b3-076b94e481a7.png","dateCreated":"2020-11-20T07:07:56.332Z","dateModified":"2020-11-20T07:08:06.04Z","contributedBy":"sumitc91","content":"Step 1: Outline use cases and constraints<br />Gather requirements and scope the problem. Ask questions to clarify use cases and constraints. Discuss assumptions.\nWithout an interviewer to address clarifying questions, we'll define some use cases and constraints.\nUse cases<br />Solv","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c4c206e1-63c2-46f8-a9b3-076b94e481a7.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"design","slug":"design"},{"name":"interview","slug":"interview"},{"name":"system-design","slug":"system-design"}],"slug":"how-to-design-a-system-that-scales-to-millions-of-users-on-aws","total":0},{"id":99,"title":"How can we get Minimum of Stack in a Constant Time O(1).","imageUrl":"77f6c59d-6a61-4c58-891d-d667885d9d48_min-stack.jpg","dateCreated":"2018-08-08T10:08:59.278Z","dateModified":"2018-08-08T10:09:16.991Z","contributedBy":"AskGif","content":"It is required to create a method getMinimum() which will give us the minimum in the current stack in O(1) time complexity. we will be using another stack for this to store the minimum at any particular point in time.\r\nWe will take an auxiliary stack that maintains the minimum of all value","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/77f6c59d-6a61-4c58-891d-d667885d9d48_min-stack.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"stack","slug":"stack"},{"name":"questions","slug":"questions"}],"slug":"how-can-we-get-minimum-of-stack-in-a-constant-time-o1","total":0},{"id":54,"title":"How to find Nth Number in Catalan Numbers?","imageUrl":"2ed2105f-3361-4721-9bdc-473619371a14_catalan-numbers.jpg","dateCreated":"2018-07-30T10:37:06.172Z","dateModified":"2018-07-30T10:38:35.824Z","contributedBy":"AskGif","content":"In combinatorial mathematics, the Catalan numbers form a sequence of natural numbers that occur in various counting problems, often involving recursively-defined objects. They are named after the Belgian mathematician Eug&egrave;ne Charles Catalan (1814&ndash;1894).\r\nThe first Catalan numb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2ed2105f-3361-4721-9bdc-473619371a14_catalan-numbers.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"recursion","slug":"recursion"},{"name":"java","slug":"java"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"dynamic-programming","slug":"dynamic-programming"}],"slug":"how-to-find-nth-number-in-catalan-numbers","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}