{"id":1699,"title":"डेटाबेस ट्यूटोरियल","imageUrl":"icon_c7cd88d2-763e-4ef9-9beb-362cd1bf07b7.jpg","dateCreated":"2020-11-20T07:41:52.695Z","dateModified":"2020-11-20T07:42:01.215Z","contributedBy":"sumitc91","content":"<p>रिलेशनल डेटाबेस मैनेजमेंट सिस्टम (RDBMS)<br />एसक्यूएल जैसा एक संबंधपरक डेटाबेस तालिकाओं में आयोजित डेटा आइटम का एक संग्रह है।</p>\n<p>ACID संबंधपरक डेटाबेस लेनदेन के गुणों का एक समूह है।</p>\n<p>एटोमिसिटी - प्रत्येक लेनदेन सभी या कुछ भी नहीं है<br />संगति - कोई भी लेनदेन डेटाबेस को एक वैध स्थिति से दूसरे में लाएगा<br />अलगाव - समवर्ती लेनदेन को निष्पादित करने के समान परिणाम होते हैं जैसे कि लेनदेन को क्रमिक रूप से निष्पादित किया गया था<br />स्थायित्व - एक बार लेनदेन हो जाने के बाद, यह ऐसा ही रहेगा<br />रिलेशनल डेटाबेस को स्केल करने के लिए कई तकनीकें हैं: मास्टर-स्लेव प्रतिकृति, मास्टर-मास्टर प्रतिकृति, फेडरेशन, शार्डिंग, डीमर्निलाइजेशन और एसक्यूएल ट्यूनिंग।</p>\n<p>मास्टर-दास प्रतिकृति<br />मास्टर पढ़ता है और लिखता है, एक या अधिक दासों को लिखता है, जो केवल पढ़ता है। दास भी एक पेड़ की तरह फैशन में अतिरिक्त दासों को दोहरा सकते हैं। यदि मास्टर ऑफ़लाइन हो जाता है, तो सिस्टम रीड-ओनली मोड में काम करना जारी रख सकता है जब तक कि एक दास को एक मास्टर को पदोन्नत नहीं किया जाता है या एक नए मास्टर का प्रावधान नहीं किया जाता है।</p>\n<p><br />स्रोत: स्केलेबिलिटी, उपलब्धता, स्थिरता, पैटर्न</p>\n<p>नुकसान (ओं): मास्टर-दास प्रतिकृति<br />एक स्वामी को दास को बढ़ावा देने के लिए अतिरिक्त तर्क की आवश्यकता होती है।<br />नुकसान देखें: मास्टर-स्लेव और मास्टर-मास्टर दोनों से संबंधित बिंदुओं के लिए प्रतिकृति।<br />गुरु-गुरु की प्रतिकृति<br />दोनों स्वामी पढ़ते हैं और लिखते हैं और लेखन पर एक दूसरे के साथ समन्वय करते हैं। यदि या तो मास्टर नीचे जाता है, तो सिस्टम रीड और राइट दोनों के साथ काम करना जारी रख सकता है।</p>\n<p><br />स्रोत: स्केलेबिलिटी, उपलब्धता, स्थिरता, पैटर्न</p>\n<p>नुकसान (ओं): मास्टर-मास्टर प्रतिकृति<br />आपको एक लोड बैलेंसर की आवश्यकता होगी या आपको यह निर्धारित करने के लिए अपने एप्लिकेशन तर्क में परिवर्तन करने की आवश्यकता होगी कि कहां लिखना है।<br />अधिकांश मास्टर-मास्टर सिस्टम या तो शिथिल सुसंगत हैं (ACID का उल्लंघन करते हैं) या सिंक्रनाइज़ेशन के कारण लेखन विलंबता बढ़ गई है।<br />संघर्ष रिज़ॉल्यूशन खेलने में अधिक आता है क्योंकि अधिक लिखने के नोड जोड़े जाते हैं और जैसे ही विलंबता बढ़ती है।<br />नुकसान देखें: मास्टर-स्लेव और मास्टर-मास्टर दोनों से संबंधित बिंदुओं के लिए प्रतिकृति।<br />नुकसान (ओं): प्रतिकृति<br />यदि किसी नए लिखित डेटा को अन्य नोड्स में दोहराया जा सकता है, तो मास्टर विफल होने पर डेटा के नुकसान की संभावना है।<br />पढ़ी गई प्रतिकृतियों को फिर से लिखा जाता है। यदि बहुत सारे लिखते हैं, तो पढ़ा हुआ प्रतिकृतियां फिर से लिखने के साथ छेड़छाड़ कर सकती हैं और बहुत से पढ़ नहीं सकते हैं।<br />जितना अधिक पढ़ा जाता है दास, उतने अधिक आपको दोहराए जाते हैं, जिससे अधिक से अधिक प्रतिकृति अंतराल होता है।<br />कुछ प्रणालियों पर, मास्टर को लिखने के लिए समानांतर में लिखने के लिए कई धागे हो सकते हैं, जबकि प्रतिकृतियां केवल एक ही धागे के साथ क्रमिक रूप से लिखने का समर्थन करती हैं।<br />प्रतिकृति अधिक हार्डवेयर और अतिरिक्त जटिलता जोड़ता है।<br />स्रोत (ओं) और आगे पढ़ने: प्रतिकृति<br />स्केलेबिलिटी, उपलब्धता, स्थिरता, पैटर्न<br />मल्टी-मास्टर प्रतिकृति<br />फेडरेशन</p>\n<p>स्रोत: अपने पहले 10 मिलियन उपयोगकर्ताओं के लिए स्केलिंग</p>\n<p>फेडरेशन (या कार्यात्मक विभाजन) फ़ंक्शन द्वारा डेटाबेस को विभाजित करता है। उदाहरण के लिए, एकल, अखंड डेटाबेस के बजाय, आपके पास तीन डेटाबेस हो सकते हैं: फ़ोरम, उपयोगकर्ता, और उत्पाद, जिसके परिणामस्वरूप प्रत्येक डेटाबेस में ट्रैफ़िक कम पढ़ा और लिखा जाता है और इसलिए कम प्रतिकृति अंतराल होता है। छोटे डेटाबेस में अधिक डेटा होता है जो मेमोरी में फिट हो सकता है, जिसके परिणामस्वरूप कैश कैश में सुधार के कारण अधिक कैश हिट होता है। एक भी केंद्रीय मास्टर क्रमबद्ध लेखन के साथ आप समानांतर, बढ़ते हुए थ्रूपुट में लिख सकते हैं।</p>\n<p>नुकसान (ओं): महासंघ<br />यदि आपके स्कीमा को भारी कार्यों या तालिकाओं की आवश्यकता है, तो फेडरेशन प्रभावी नहीं है।<br />किस डेटाबेस को पढ़ना और लिखना है, यह निर्धारित करने के लिए आपको अपने एप्लिकेशन लॉजिक को अपडेट करना होगा।<br />दो डेटाबेस से डेटा जुड़ना सर्वर लिंक के साथ अधिक जटिल है।<br />फेडरेशन अधिक हार्डवेयर और अतिरिक्त जटिलता जोड़ता है।<br />स्रोत (ओं) और आगे पढ़ने: महासंघ<br />अपने पहले 10 मिलियन उपयोगकर्ताओं को स्केलिंग<br />Sharding</p>\n<p>स्रोत: स्केलेबिलिटी, उपलब्धता, स्थिरता, पैटर्न</p>\n<p>साझाकरण विभिन्न डेटाबेस में डेटा वितरित करता है जैसे कि प्रत्येक डेटाबेस केवल डेटा के सबसेट को प्रबंधित कर सकता है। उपयोगकर्ताओं के डेटाबेस को एक उदाहरण के रूप में लेते हुए, जैसे ही उपयोगकर्ताओं की संख्या बढ़ती है, क्लस्टर में और अधिक धारें जोड़ी जाती हैं।</p>\n<p>महासंघ के फायदों के समान, पैनापन कम पढ़ने और लिखने के लिए ट्रैफ़िक, कम प्रतिकृति, और अधिक कैश हिट होता है। इंडेक्स का आकार भी कम हो गया है, जो आम तौर पर तेज प्रश्नों के साथ प्रदर्शन में सुधार करता है। यदि एक शार्प नीचे जाता है, तो दूसरी शर्ड्स अभी भी चालू हैं, हालांकि आप डेटा हानि से बचने के लिए प्रतिकृति के कुछ रूप जोड़ना चाहते हैं। महासंघ की तरह, एक भी केंद्रीय मास्टर क्रमबद्ध लेखन नहीं है, जो आपको बढ़ी हुई थ्रूपुट के साथ समानांतर में लिखने की अनुमति देता है।</p>\n<p>उपयोगकर्ताओं की तालिका को साझा करने के सामान्य तरीके उपयोगकर्ता के अंतिम नाम प्रारंभिक या उपयोगकर्ता की भौगोलिक स्थिति के माध्यम से होते हैं।</p>\n<p>नुकसान:<br />आपको शार्क के साथ काम करने के लिए अपने एप्लिकेशन लॉजिक को अपडेट करना होगा, जिसके परिणामस्वरूप जटिल SQL क्वेरी हो सकती हैं।<br />डेटा वितरण एक शार्क में लोपेज बन सकता है। उदाहरण के लिए, एक शार्क पर बिजली उपयोगकर्ताओं का एक सेट दूसरों की तुलना में उस शार्क के लिए बढ़ा हुआ लोड हो सकता है।<br />असंतुलन अतिरिक्त जटिलता जोड़ता है। एक शार्किंग फ़ंक्शन आधारित</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c7cd88d2-763e-4ef9-9beb-362cd1bf07b7.jpg","subContents":[],"category":{"name":"शिक्षण","slug":"tutorials"},"slug":"database-tutorial","tags":[{"name":"interview","slug":"interview"}],"recommendations":[{"id":1685,"title":"ट्विटर टाइमलाइन कैसे डिजाइन करें और सर्च करें","imageUrl":"icon_4cffb0b1-c317-4027-9ff2-188ac3240e74.jpg","dateCreated":"2020-11-20T06:38:46.064Z","dateModified":"2020-11-20T06:39:08.542Z","contributedBy":"sumitc91","content":"Facebook फ़ीड डिज़ाइन करें और डिज़ाइन Facebook खोज समान प्रश्न हैं।\nचरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4cffb0b1-c317-4027-9ff2-188ac3240e74.jpg","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"डिज़ाइन","slug":"design"},{"name":"interview","slug":"interview"},{"name":"प्रणाली-की-रूपरेखा","slug":"system-design"},{"name":"ट्विटर","slug":"twitter"}],"slug":"how-to-design-the-twitter-timeline-and-search","total":0},{"id":68,"title":"फैक्टरी पैटर्न क्या है?","imageUrl":"e2172f61-aced-4a65-a785-9978cd5ffdb7_factory-pattern.jpg","dateCreated":"2018-08-01T12:47:00.64Z","dateModified":"2018-08-01T17:19:17.793Z","contributedBy":"AskGif","content":"In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method&mdash;ei","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e2172f61-aced-4a65-a785-9978cd5ffdb7_factory-pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"creational-pattern","slug":"creational-pattern"},{"name":"design-patterns","slug":"design-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-factory-pattern","total":0},{"id":50,"title":"मशाल और पुल पहेली","imageUrl":"303f3817-358f-471c-bd00-e6c4e01bfc0b_bridge-riddle.jpg","dateCreated":"2018-07-29T07:15:58.406Z","dateModified":"2018-07-29T07:30:35.968Z","contributedBy":"AskGif","content":"पुल और मशाल की समस्या (जिसे मिडनाइट ट्रेन और खतरनाक क्रॉसिंग भी कहा जाता है) एक तर्क पहेली है जो चार लोगों, पुल और मशाल से संबंधित है। यह क्रॉसिंग पहेली नदी की श्रेणियों में से एक है, जहां कुछ बाधाओं के साथ कई वस्तुओं को नदी में ले जाना चाहिए।\r\n&nbsp;\r\nचार लोग रात में एक नदी में आते","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/303f3817-358f-471c-bd00-e6c4e01bfc0b_bridge-riddle.jpg","category":{"name":"पहेली","slug":"puzzles"},"tags":[{"name":"interview","slug":"interview"},{"name":"पहेली","slug":"riddle"},{"name":"प्रशन","slug":"questions"},{"name":"दिमागी-कसरत","slug":"brain-teaser"}],"slug":"torch-and-bridge-puzzle","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}