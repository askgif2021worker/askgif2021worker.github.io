{"id":1710,"title":"Count the Number of Consistent Strings - String - Easy - LeetCode","imageUrl":"icon_6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","dateCreated":"2020-12-28T13:45:06.506Z","dateModified":"2020-12-28T13:45:12.666Z","contributedBy":"sumitc91","content":"<p>You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.</p>\n<p>Return the number of consistent strings in the array words.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]<br />Output: 2<br />Explanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.<br />Example 2:</p>\n<p>Input: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]<br />Output: 7<br />Explanation: All strings are consistent.<br />Example 3:</p>\n<p>Input: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]<br />Output: 4<br />Explanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= words.length &lt;= 104<br />1 &lt;= allowed.length &lt;= 26<br />1 &lt;= words[i].length &lt;= 10<br />The characters in allowed are distinct.<br />words[i] and allowed contain only lowercase English letters.</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int CountConsistentStrings(string allowed, string[] words) {\n        var set = new HashSet&lt;char&gt;();\n        for(int i=0;i&lt;allowed.Length;i++){\n            set.Add(allowed[i]);\n        }\n        \n        int count = 0;\n        for(int i=0;i&lt;words.Length;i++){\n            bool found = true;\n            for(int j=0;j&lt;words[i].Length;j++){\n                if(!set.Contains(words[i][j])){\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<p>Time Complexity: O(n*m)</p>\n<p>Space Complexity: O(l)</p>\n<p>Where n is the number of words, and m is the length of each word, while l is the length of the allowed word.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"count-the-number-of-consistent-strings-string-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"recommendations":[{"id":1727,"title":"Check if Array Is Sorted and Rotated - Array - Easy - LeetCode","imageUrl":"icon_2110d383-81cb-448a-8e4f-3773ff37294d.jpg","dateCreated":"2021-03-31T05:53:14.382Z","dateModified":"2021-03-31T05:53:27.431Z","contributedBy":"sumitc91","content":"Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.\nThere may be duplicates in the original array.\nNote: An array A rotated by x positions results in an array B ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2110d383-81cb-448a-8e4f-3773ff37294d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"check-if-array-is-sorted-and-rotated-array-easy-leetcode","total":0},{"id":1657,"title":"Word Search - Array - Medium - LeetCode","imageUrl":"icon_20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","dateCreated":"2020-11-01T06:18:06.031Z","dateModified":"2020-11-01T06:18:12.117Z","contributedBy":"sumitc91","content":"Given a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n&nbsp;\nExample 1:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20ea8361-3e30-4ec3-92da-00e3f7512213.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"word-search-array-medium-leetcode","total":0},{"id":1652,"title":"Minimum Path Sum - Array - Medium - LeetCode","imageUrl":"icon_d9f5ff7a-791f-41b0-89b0-f12760706d99.jpg","dateCreated":"2020-10-31T09:04:08.041Z","dateModified":"2020-10-31T09:04:16.725Z","contributedBy":"sumitc91","content":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample:\nInput:<br />[<br />&nbsp; [1,3,1],<br />&nbsp; [1,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d9f5ff7a-791f-41b0-89b0-f12760706d99.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"minimum-path-sum-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}