{"id":1713,"title":"Reformat Phone Number - String - Easy - LeetCode","imageUrl":"icon_716c7816-48e6-45e6-840e-df068e41c6f6.jpg","dateCreated":"2021-01-05T04:21:52.889Z","dateModified":"2021-01-05T04:22:00.273Z","contributedBy":"sumitc91","content":"<p>You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.</p>\n<p>You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:</p>\n<p>2 digits: A single block of length 2.<br />3 digits: A single block of length 3.<br />4 digits: Two blocks of length 2 each.<br />The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.</p>\n<p>Return the phone number after formatting.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: number = \"1-23-45 6\"<br />Output: \"123-456\"<br />Explanation: The digits are \"123456\".<br />Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".<br />Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".<br />Joining the blocks gives \"123-456\".<br />Example 2:</p>\n<p>Input: number = \"123 4-567\"<br />Output: \"123-45-67\"<br />Explanation: The digits are \"1234567\".<br />Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".<br />Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".<br />Joining the blocks gives \"123-45-67\".<br />Example 3:</p>\n<p>Input: number = \"123 4-5678\"<br />Output: \"123-456-78\"<br />Explanation: The digits are \"12345678\".<br />Step 1: The 1st block is \"123\".<br />Step 2: The 2nd block is \"456\".<br />Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".<br />Joining the blocks gives \"123-456-78\".<br />Example 4:</p>\n<p>Input: number = \"12\"<br />Output: \"12\"<br />Example 5:</p>\n<p>Input: number = \"--17-5 229 35-39475 \"<br />Output: \"175-229-353-94-75\"<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>2 &lt;= number.length &lt;= 100<br />number consists of digits and the characters '-' and ' '.<br />There are at least two digits in number.</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public string ReformatNumber(string number) {\n        number = number.Replace(\"-\", \"\"); \n        number = number.Replace(\" \", \"\");        \n        StringBuilder sb = new StringBuilder();\n        int index = 0;\n        int count = number.Length;\n        while (count &gt; 4) { // as long as there are more than 4 left characters, we add 3 of them and a '-' for each time.\n            for (int i=0; i&lt;3; i++) {\n                sb.Append(number[index++]);\n                count--;\n            }\n            sb.Append('-');\n        }\n        if (count &lt; 4) { // less than 4 characters, add them directly.\n            for (int i=0; i&lt;count; i++) {\n                sb.Append(number[index++]);\n            }\n        } else { // When there are exact 4 characters left, we split them by groups of size 2.\n            for (int i=0; i&lt;2; i++) {\n                sb.Append(number[index++]);\n            }\n            sb.Append('-');\n            for (int i=0; i&lt;2; i++) {\n                sb.Append(number[index++]);\n            }\n        }\n        return sb.ToString();\n    }\n}</code></pre>\n<p>Time Complexity: O(n)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/716c7816-48e6-45e6-840e-df068e41c6f6.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"reformat-phone-number-string-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"recommendations":[{"id":1710,"title":"Count the Number of Consistent Strings - String - Easy - LeetCode","imageUrl":"icon_6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","dateCreated":"2020-12-28T13:45:06.506Z","dateModified":"2020-12-28T13:45:12.666Z","contributedBy":"sumitc91","content":"You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.\n&nbsp;\nExample 1:\nInput: all","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6dacc55b-f13f-4e2c-a0ff-d00050cfb65a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"count-the-number-of-consistent-strings-string-easy-leetcode","total":0},{"id":1659,"title":"Sort Array by Increasing Frequency - Array - Medium - LeetCode","imageUrl":"icon_0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","dateCreated":"2020-11-03T05:02:58.417Z","dateModified":"2020-11-03T05:10:52.862Z","contributedBy":"sumitc91","content":"Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.\n&nbsp;\nExample 1:\nInput: nums = [1,1,2,2,2,3]<br />Output: [3,1","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0607b46b-96fe-470e-a316-ee8bf5aeee8e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"sort-array-by-increasing-frequency-array-medium-leetcode","total":0},{"id":1595,"title":"Cousins in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","dateCreated":"2020-10-09T09:24:10.362Z","dateModified":"2020-10-09T09:24:23.315Z","contributedBy":"sumitc91","content":"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\nWe are given the root of a binary tree with unique values, and the values x and y of two","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/249b4ce9-a2e8-4b2a-a369-264d0c802503.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"cousins-in-binary-tree-tree-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}