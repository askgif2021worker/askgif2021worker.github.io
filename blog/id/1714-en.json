{"id":1714,"title":"Number of Students Unable to Eat Lunch - String - Easy - LeetCode","imageUrl":"icon_dad639fe-8bb2-4bcd-ba3d-af4e7cb5299b.jpg","dateCreated":"2021-01-06T10:28:07.741Z","dateModified":"2021-01-06T10:28:12.288Z","contributedBy":"sumitc91","content":"<p>The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.</p>\n<p>The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:</p>\n<p>If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.<br />Otherwise, they will leave it and go to the queue's end.<br />This continues until none of the queue students want to take the top sandwich and are thus unable to eat.</p>\n<p>You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: students = [1,1,0,0], sandwiches = [0,1,0,1]<br />Output: 0&nbsp;<br />Explanation:<br />- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].<br />- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].<br />- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].<br />- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].<br />- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].<br />- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].<br />- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].<br />- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].<br />Hence all students are able to eat.<br />Example 2:</p>\n<p>Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]<br />Output: 3<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= students.length, sandwiches.length &lt;= 100<br />students.length == sandwiches.length<br />sandwiches[i] is 0 or 1.<br />students[i] is 0 or 1.</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int CountStudents(int[] students, int[] sandwiches) {\n        int index = 0;\n        Queue&lt;int&gt; q = new Queue&lt;int&gt;();\n\n        foreach(var s in students)\n        {\n            q.Enqueue(s);\n        }\n\n        while(q.Count &gt; 0 &amp;&amp; index &lt; sandwiches.Length)\n        {\n            int count = q.Count;\n            bool isAnyMatch = false;\n\n            for(int i = 0; i &lt; count; i++)\n            {\n                int next = q.Dequeue();\n\n                if(next == sandwiches[index])\n                {\n                    isAnyMatch = true;\n                    index++;\n                }\n\n                else                \n                {\n                    q.Enqueue(next);    \n                }            \n            }\n\n            if(!isAnyMatch)\n            {\n                break;\n            }\n        }\n\n        return q.Count;\n    }\n}</code></pre>\n<p>Time Complexity: O(n*m)</p>\n<p>Space Complexity: O(n)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/dad639fe-8bb2-4bcd-ba3d-af4e7cb5299b.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"number-of-students-unable-to-eat-lunch-string-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"recommendations":[{"id":1649,"title":"Spiral Matrix II - Array - Medium - LeetCode","imageUrl":"icon_6df8412b-55e5-4d25-9094-489e2623ffe0.jpg","dateCreated":"2020-10-31T08:11:06.067Z","dateModified":"2020-10-31T08:11:30.766Z","contributedBy":"sumitc91","content":"Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.\nExample:\nInput: 3<br />Output:<br />[<br />&nbsp;[ 1, 2, 3 ],<br />&nbsp;[ 8, 9, 4 ],<br />&nbsp;[ 7, 6, 5 ]<br />]\n&nbsp;\n<pre class=\"language-csharp\"><code>public cla","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6df8412b-55e5-4d25-9094-489e2623ffe0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"spiral-matrix-ii-array-medium-leetcode","total":0},{"id":1642,"title":"Combination Sum II - Array - Medium - LeetCode","imageUrl":"icon_134b4baa-680a-45e5-b0df-c627789e2d42.jpg","dateCreated":"2020-10-25T16:13:32.074Z","dateModified":"2020-10-25T16:13:43.44Z","contributedBy":"sumitc91","content":"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\nEach number in candidates may only be used once in the combination.\nNote: The solution set must not contain duplic","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/134b4baa-680a-45e5-b0df-c627789e2d42.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"combination-sum-ii-array-medium-leetcode","total":0},{"id":1609,"title":"Customers Who Never Order - Sql - Easy - LeetCode","imageUrl":"icon_3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","dateCreated":"2020-10-16T07:20:40.745Z","dateModified":"2020-10-16T07:20:46.124Z","contributedBy":"sumitc91","content":"Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.\nTable: Customers.\n+----+-------+<br />| Id | Name &nbsp;|<br />+----+-------+<br />| 1 &nbsp;| Joe &nbsp; |<br />| 2 &nbsp;| Henry ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"customers-who-never-order-sql-easy-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}