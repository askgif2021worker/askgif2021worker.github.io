{"id":1716,"title":"Maximum Units on a Truck - Array - Easy - LeetCode","imageUrl":"icon_3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","dateCreated":"2021-01-08T09:45:52.965Z","dateModified":"2021-01-08T09:46:00.078Z","contributedBy":"sumitc91","content":"<p>You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:</p>\n<p>numberOfBoxesi is the number of boxes of type i.<br />numberOfUnitsPerBoxi is the number of units in each box of the type i.<br />You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.</p>\n<p>Return the maximum total number of units that can be put on the truck.</p>\n<p>&nbsp;</p>\n<p>Example 1:</p>\n<p>Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4<br />Output: 8<br />Explanation: There are:<br />- 1 box of the first type that contains 3 units.<br />- 2 boxes of the second type that contain 2 units each.<br />- 3 boxes of the third type that contain 1 unit each.<br />You can take all the boxes of the first and second types, and one box of the third type.<br />The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.<br />Example 2:</p>\n<p>Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10<br />Output: 91<br />&nbsp;</p>\n<p>Constraints:</p>\n<p>1 &lt;= boxTypes.length &lt;= 1000<br />1 &lt;= numberOfBoxesi, numberOfUnitsPerBoxi &lt;= 1000<br />1 &lt;= truckSize &lt;= 106</p>\n<p>&nbsp;</p>\n<pre class=\"language-csharp\"><code>public class Solution {\n    public int MaximumUnits(int[][] boxTypes, int truckSize) {\n        Array.Sort(boxTypes, (a, b) =&gt; {return b[1] - a[1];});\n        int count = 0;\n        \n        foreach(var type in boxTypes)\n        {\n            int num = Math.Min(type[0], truckSize);            \n            count += num*type[1];\n            \n            if(truckSize &lt; num)\n                break;\n            truckSize -= num;            \n        } \n        return count;\n    }\n}</code></pre>\n<p>Time Complexity: O(nlogn)</p>\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3aedf9be-e325-4d16-b5ad-e180a12291dc.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"maximum-units-on-a-truck-array-easy-leetcode","tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"recommendations":[{"id":1675,"title":"Majority Element II - Array - Medium - LeetCode","imageUrl":"icon_17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","dateCreated":"2020-11-18T12:22:28.829Z","dateModified":"2020-11-18T12:22:35.442Z","contributedBy":"sumitc91","content":"Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n&nbsp;\nExample 1:\nInput: nums = [3,2,3]<br />Output: [3]<br />Example 2:\nInput: nums =","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/17b104bf-91b6-48b5-a7b8-2d58b5ba4b4e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"majority-element-ii-array-medium-leetcode","total":0},{"id":1649,"title":"Spiral Matrix II - Array - Medium - LeetCode","imageUrl":"icon_6df8412b-55e5-4d25-9094-489e2623ffe0.jpg","dateCreated":"2020-10-31T08:11:06.067Z","dateModified":"2020-10-31T08:11:30.766Z","contributedBy":"sumitc91","content":"Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.\nExample:\nInput: 3<br />Output:<br />[<br />&nbsp;[ 1, 2, 3 ],<br />&nbsp;[ 8, 9, 4 ],<br />&nbsp;[ 7, 6, 5 ]<br />]\n&nbsp;\n<pre class=\"language-csharp\"><code>public cla","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6df8412b-55e5-4d25-9094-489e2623ffe0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"spiral-matrix-ii-array-medium-leetcode","total":0},{"id":1648,"title":"Insert Interval - Array - Medium - LeetCode","imageUrl":"icon_5a35d970-95af-493c-9aca-0b4bed037719.jpg","dateCreated":"2020-10-31T06:40:08.43Z","dateModified":"2020-10-31T06:40:18.214Z","contributedBy":"sumitc91","content":"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\nYou may assume that the intervals were initially sorted according to their start times.\n&nbsp;\nExample 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]<br /","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5a35d970-95af-493c-9aca-0b4bed037719.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"insert-interval-array-medium-leetcode","total":0},{"id":1590,"title":"Minimum Distance Between BST Nodes - Tree - Easy - LeetCode","imageUrl":"icon_a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","dateCreated":"2020-10-09T04:46:13.287Z","dateModified":"2020-10-09T04:46:30.726Z","contributedBy":"sumitc91","content":"Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.\nExample :\nInput: root = [4,2,6,1,3,null,null]<br />Output: 1<br />Explanation:<br />Note that root is a TreeNode object, not an array.</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a016ac3e-361e-465e-ae63-03484dbf5a66.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-distance-between-bst-nodes-tree-easy-leetcode","total":0}]}