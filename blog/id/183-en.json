{"id":183,"title":"What is the difference between .NET Core and .NET Standard Class Library project types?","imageUrl":"45fbb4c6-4033-4912-ba36-20ef79898f70_netcore-vs-netstandard.png","dateCreated":"2018-12-24T09:11:03.982Z","dateModified":"2018-12-24T09:11:14.257Z","contributedBy":"AskGif","content":"<p>Question:</p>\r\n<p>In Visual Studio, there are at least 3 different types of class library you can create:</p>\r\n<p>&nbsp;</p>\r\n<p>Class Library (.NET Framework)</p>\r\n<p>Class Library (.NET Standard)</p>\r\n<p>Class Library (.NET Core)</p>\r\n<p>While the first is what we've been using for years, a major point of confusion I've been having is when to use the .NET Standard and .NET Core class library types. I've been bitten by this recently when attempting to multi-target different framework versions, and creating a unit test project.</p>\r\n<p>&nbsp;</p>\r\n<p>So, what is the difference between Class Library (.NET Standard) and Class Library (.NET Core), why do both exist, and when should we use one over the other?</p>\r\n<p>&nbsp;</p>\r\n<p>solution</p>\r\n<p>When should we use one over the other?</p>\r\n<p>&nbsp;</p>\r\n<p>The decision is a trade-off between compatibility and API access.</p>\r\n<p>&nbsp;</p>\r\n<p>Use a .NET Standard library when you want to increase the number of apps that will be compatible with your library, and you are okay with a decrease in the .NET API surface area your library can access.</p>\r\n<p>&nbsp;</p>\r\n<p>Use a .NET Core library when you want to increase the .NET API surface area your library can access, and you are okay with allowing only .NET Core apps to be compatible with your library.</p>\r\n<p>&nbsp;</p>\r\n<p>For example, a library that targets .NET Standard 1.3 will be compatible with apps that target .NET Framework 4.6, .NET Core 1.0, Universal Windows Platform 10.0, and any other platform that supports .NET Standard 1.3. The library will not have access to some parts of the .NET API, though. For instance, the&nbsp; Microsoft.NETCore.CoreCLR package is compatible with .NET Core but not with .NET Standard.</p>\r\n<p>&nbsp;</p>\r\n<p>What is the difference between Class Library (.NET Standard) and Class Library (.NET Core)?</p>\r\n<p>&nbsp;</p>\r\n<p>The Package-based frameworks section here describes the difference.</p>\r\n<p>&nbsp;</p>\r\n<p>Compatibility: Libraries that target .NET Standard will run on any .NET Standard compliant runtime, such as .NET Core, .NET Framework, Mono/Xamarin. On the other hand, libraries that target .NET Core can only run on the .NET Core runtime.</p>\r\n<p>&nbsp;</p>\r\n<p>API Surface Area: .NET Standard libraries come with everything in NETStandard.Library whereas .NET Core libraries come with everything in Microsoft.NETCore.App. The latter includes approximately 20 additional libraries, some of which we can add manually to our .NET Standard library (such as System.Threading.Thread) and some of which are not compatible with the .NET Standard (such as Microsoft.NETCore.CoreCLR).</p>\r\n<p>&nbsp;</p>\r\n<p>Also, .NET Core libraries specify a runtime and come with an application model. That's important, for instance, to make unit test class libraries runnable.</p>\r\n<p>&nbsp;</p>\r\n<p>Why do both exist?</p>\r\n<p>&nbsp;</p>\r\n<p>Ignoring libraries for a moment, the reason that .NET Standard exists is for portability; it defines a set of APIs that .NET platforms agree to implement. Any platform that implements a .NET Standard is compatible with libraries that target that .NET Standard. One of those compatible platforms is .NET Core.</p>\r\n<p>&nbsp;</p>\r\n<p>Coming back to libraries, the .NET Standard library templates exist to run on multiple runtimes (at the expense of API surface area). Obversely, the .NET Core library templates exist to access more API surface area (at the expense of compatibility) and to specify a platform against which to build an executable.</p>\r\n<p>source: https://stackoverflow.com/questions/42939454/what-is-the-difference-between-net-core-and-net-standard-class-library-project?rq=1:</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/45fbb4c6-4033-4912-ba36-20ef79898f70_netcore-vs-netstandard.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-the-difference-between-.net-core-and-.net-standard-class-library-project-types","tags":[{"name":"dot-net-standard","slug":"dot-net-standard"},{"name":"dot-net","slug":"dot-net"},{"name":"class-library","slug":"class-library"},{"name":"dotnet-core","slug":"dotnet-core"}],"recommendations":[{"id":416,"title":"Implementing .NET Core Logging Levels and Categories","imageUrl":"29427d9e-f158-40f8-ae73-be3429828ba1_NET-Core-Log-Factory.jpg","dateCreated":"2019-08-05T11:33:46.631Z","dateModified":"2019-08-05T11:34:06.076Z","contributedBy":"AskGif","content":"In .NET Core. One thing that I never implemented was granular control of logging specific levels by category. It turns out that it&rsquo;s pretty easy to do, though. Logging in .NET Core passes LogLevel and Category whenever something is to be logged. Category corresponds, afaik, to namespaces. Y","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/29427d9e-f158-40f8-ae73-be3429828ba1_NET-Core-Log-Factory.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"dot-net","slug":"dot-net"},{"name":"dotnet-core","slug":"dotnet-core"}],"slug":"implementing-.net-core-logging-levels-and-categories","total":0},{"id":152,"title":"How to Install dotnet core on Ubuntu 16.04.5 ?","imageUrl":"4d91ad1c-621d-4436-9e47-27903f5297a4_dotnetcore.jpg","dateCreated":"2018-11-22T11:34:33.518Z","dateModified":"2018-11-22T11:34:41.347Z","contributedBy":"AskGif","content":"Before installing .NET, you'll need to register the Microsoft key, register the product repository, and install required dependencies. This only needs to be done once per machine.\r\nOpen a command prompt and run the following commands:\r\n<pre class=\"language-markup\"><code>wget -qO- https","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4d91ad1c-621d-4436-9e47-27903f5297a4_dotnetcore.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"ubuntu","slug":"ubuntu"},{"name":"dot-net","slug":"dot-net"},{"name":"dotnet-core","slug":"dotnet-core"}],"slug":"how-to-install-dotnet-core-on-ubuntu-16.04.5-","total":0},{"id":148,"title":"I'm getting Error “Server Application Unavailable” in IIS","imageUrl":"b3873410-9b55-4241-bf6f-9793dd3451b2_server-app-unavailable.png","dateCreated":"2018-11-06T06:06:17.034Z","dateModified":"2018-11-06T06:06:24.804Z","contributedBy":"AskGif","content":"The web service is throwing the following error when I browse from IIS:\r\nServer Application Unavailable\r\nThe web application you are attempting to access on this web server is currently unavailable. Please hit the \"Refresh\" button in your web browser to retry your request.\r\nA","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b3873410-9b55-4241-bf6f-9793dd3451b2_server-app-unavailable.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dot-net","slug":"dot-net"},{"name":"c-sharp","slug":"c-sharp"},{"name":"web-services","slug":"web-services"},{"name":"iis","slug":"iis"}],"slug":"im-getting-error-server-application-unavailable-in-iis","total":0},{"id":122,"title":"Sending email using Gmail SMTP in asp.net mvc application?","imageUrl":"9314a749-f567-4f1c-8619-0d55ecfe29d3_gmail-smtp.jpg","dateCreated":"2018-08-27T12:20:43.031Z","dateModified":"2018-08-29T07:46:58.801Z","contributedBy":"AskGif","content":"You can use GMAIL SMTP service to send emails using c# .net MVC. You can specify the property constants in a config file for easy alteration.\r\nCreate Gmail Class comprises of all needed data type and member function as below.\r\n<pre class=\"language-csharp\"><code>public class GMailer\r\n{\r","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9314a749-f567-4f1c-8619-0d55ecfe29d3_gmail-smtp.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"dot-net","slug":"dot-net"},{"name":"gmail","slug":"gmail"},{"name":"smtp","slug":"smtp"}],"slug":"sending-email-using-gmail-smtp-in-asp.net-mvc-application","total":0}]}