{"id":214,"title":"How can I log .net events and exceptions in google analytics?","imageUrl":"e5703eab-1bbc-45a4-9669-ce91127de128_GA-with-C.png","dateCreated":"2019-01-04T07:32:05.062Z","dateModified":"2019-01-04T07:32:36.873Z","contributedBy":"AskGif","content":"<p>How to log .net events and exceptions in google analytics?</p>\r\n<p>I am having a requirement of logging the events as well as exceptions in my dot net application. I tried so many ways but none is working in dot net. I want to implement the same way am using in my javascript application.&nbsp;</p>\r\n<p>I'm using the following code for tracking my event using javascript :</p>\r\n<pre class=\"language-markup\"><code>(function () {\r\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\nga('create', googleAnalyticsAppID, 'auto', { 'cookieDomain': 'none' });\r\nga('require', 'displayfeatures');\r\nga('send', 'pageview');\r\n})();\r\n\r\nwindow.onload = function () {\r\n$('.googleAnalytics').click(function () {\r\n    var event = this.getAttribute(\"ga-event\");\r\n    var category = this.getAttribute(\"ga-category\");\r\n    var label = this.getAttribute(\"ga-label\");        \r\n    gaWeb(category, event, label);        \r\n});\r\n};\r\n\r\n\r\nfunction gaWeb(category, event, label) {\r\n   ga('send', 'event', category, event, label);\r\n}\r\n\r\nfunction gaPageView(page, title) {\r\n   ga('send', 'pageview', {\r\n    'page': page,\r\n    'title': title\r\n});\r\n}</code></pre>\r\n<p>&nbsp;</p>\r\n<p>The same implementation I want to do in my C# coding, where I can log my exception in google events. is there any prebuild library available in .net?</p>\r\n<p>Solution:</p>\r\n<p>I've extended my own class over Logger.Net to log in both file system and google analytics.</p>\r\n<p>you can use following class :</p>\r\n<pre class=\"language-csharp\"><code>namespace M2E.Common.Logger\r\n{\r\npublic class Logger : ILogger\r\n{\r\n    private string _currentClassName;        \r\n    bool GALoggin;\r\n    ILog logger = null;\r\n    public Logger(string currentClassName)\r\n    {\r\n        this._currentClassName = currentClassName;\r\n        GALoggin = Convert.ToBoolean(ConfigurationManager.AppSettings[\"GALogging\"]);\r\n\r\n        logger = LogManager.GetLogger(_currentClassName);\r\n        BasicConfigurator.Configure();\r\n        log4net.Config.XmlConfigurator.Configure();\r\n\r\n\r\n    }\r\n\r\n    public void Info(string message)\r\n    {\r\n        if (GALoggin &amp;&amp; Convert.ToBoolean(ConfigurationManager.AppSettings[\"GAInfoLogging\"]))\r\n        {                \r\n            TrackGoogleEvents(\"Logger-Info\", \"Info\", message);               \r\n        }\r\n        else\r\n        {\r\n            logger.Info(message);\r\n        }\r\n    }\r\n\r\n    public void Error(string message, Exception ex)\r\n    {\r\n        if (GALoggin)\r\n        {\r\n            TrackGoogleEvents(\"Logger-Error\", message, ex.Message.ToString(CultureInfo.InvariantCulture));\r\n        }\r\n        else\r\n        {\r\n            logger.Error(message, ex);\r\n        }\r\n        try\r\n        {\r\n            SendAccountCreationValidationEmail.SendExceptionEmailMessage(\r\n                ConfigurationManager.AppSettings[\"ExceptionsSendToEmail\"].ToString(CultureInfo.InvariantCulture),ex.Message);\r\n        }\r\n        catch (Exception)\r\n        {\r\n\r\n        }\r\n    }\r\n\r\n    public void Debug(string message, Exception ex)\r\n    {\r\n        if (GALoggin)\r\n        {\r\n            TrackGoogleEvents(\"Logger-Debug\", message, ex.Message.ToString(CultureInfo.InvariantCulture));\r\n        }\r\n        else\r\n        {\r\n            logger.Debug(message, ex);\r\n        }                  \r\n    }\r\n\r\n    public void Fatal(string message, Exception ex)\r\n    {\r\n        if (GALoggin)\r\n        {\r\n            TrackGoogleEvents(\"Logger-Fatal\", message, ex.Message.ToString(CultureInfo.InvariantCulture));\r\n        }\r\n        else\r\n        {\r\n            logger.Fatal(message, ex);\r\n        }              \r\n    }\r\n\r\n    private void TrackGoogleEvents(string category, string action, string label)\r\n    {\r\n        try\r\n        {\r\n            AsyncTrackGoogleEvents(category, action, label); // to make it async call if required..\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            logger.Fatal(\"Google Analytics Event Tracking Exception\", ex);\r\n        }\r\n\r\n    }\r\n\r\n    public void AsyncTrackGoogleEvents(string category, string action, string label)\r\n    {\r\n        var googleEvent = new GoogleEvent(\"MadeToEarn.com\", category, action, label, 1);\r\n        var requestEvent = new RequestFactory().BuildRequest(googleEvent);\r\n        GoogleTracking.FireTrackingEvent(requestEvent);\r\n    }\r\n}\r\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e5703eab-1bbc-45a4-9669-ce91127de128_GA-with-C.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-can-i-log-.net-events-and-exceptions-in-google-analytics","tags":[{"name":"dot-net","slug":"dot-net"},{"name":"c-sharp","slug":"c-sharp"},{"name":"google-analytics","slug":"google-analytics"}],"recommendations":[{"id":1383,"title":"XOR Operation in an Array - Easy - LeetCode","imageUrl":"c648c730-32ca-4880-bb05-4558e95221ef-array.png","dateCreated":"2020-06-21T05:19:05.159Z","dateModified":"2020-06-21T05:19:19.27Z","contributedBy":"AskGif","content":"Given an integer n and an integer start.\r\nDefine an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.length.\r\nReturn the bitwise XOR of all elements of nums.\r\n&nbsp;\r\nExample 1:\r\nInput: n = 5, start = 0\r\nOutput: 8\r\nExplanation: Arra","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c648c730-32ca-4880-bb05-4558e95221ef-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"algorithm","slug":"algorithm"},{"name":"easy","slug":"easy"}],"slug":"xor-operation-in-an-array-easy-leetcode","total":0},{"id":1326,"title":"Longest Common Prefix - String - Easy - LeetCode","imageUrl":"6f4c5669-a9f1-4bbb-8f5e-ecb1dddcb00b-q3.jpg","dateCreated":"2020-06-05T07:23:55.909Z","dateModified":"2020-06-05T07:24:42.622Z","contributedBy":"AskGif","content":"Write a function to find the longest common prefix string amongst an array of strings.\r\nIf there is no common prefix, return an empty string \"\".\r\n&nbsp;\r\nExample 1:\r\nInput: [\"flower\",\"flow\",\"flight\"]\r\nOutput: \"fl\"\r\n&nbsp;\r\nExample 2:\r\nInput:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6f4c5669-a9f1-4bbb-8f5e-ecb1dddcb00b-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"longest-common-prefix-string-easy-leetcode","total":0},{"id":300,"title":"ASP.NET Core 2.0 Google OAuth Redirection with Add Hosted Domain and other parameters","imageUrl":"b58e46eb-d9dc-4ca9-94c8-f3d0a57bb3eb_dotnetcore-oauth.jpg","dateCreated":"2019-03-20T17:49:53.165Z","dateModified":"2019-03-22T09:18:27.165Z","contributedBy":"AskGif","content":"Adding a hosted domain parameter is not directly supposed through the GoogleOptions class, unfortunately &ndash; however with a few (not obvious) tweaks, you can easily add the parameter!\r\n&nbsp;\r\nIn your Startup.cs, set up a new Events parameter as such:\r\n<pre class=\"language-c","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b58e46eb-d9dc-4ca9-94c8-f3d0a57bb3eb_dotnetcore-oauth.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-core","slug":"mvc-core"},{"name":"c-sharp","slug":"c-sharp"}],"slug":"asp.net-core-2.0-google-oauth-redirection-with-add-hosted-domain-and-other-parameters","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}