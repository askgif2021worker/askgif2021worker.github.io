{"id":22,"title":"Find all possible palindromic partitions in a given string","imageUrl":"7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","dateCreated":"2018-07-13T06:11:22.557Z","dateModified":"2018-07-13T06:51:51.236Z","contributedBy":"AskGif","content":"<p>We will be using recursion for solving this problem.&nbsp;<span style=\"font-family: 'Open Sans', Helvetica, Arial, Verdana, sans-serif; font-size: 15px; text-align: justify;\">The idea is to navigate through each substring starting from first character and to check if it is a palindrome. If it is, then add the substring to solution list and do recur for remaining part. Below is code for solution in JAVA.</span></p>\r\n<pre class=\"language-markup\"><code>Example :\r\n\r\nInput - \"askgifiga\"\r\n\r\nOutput - [[a, s, k, g, i, f, i, g, a], [a, s, k, g, ifi, g, a], [a, s, k, gifig, a]]\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<pre class=\"language-java\"><code>import java.util.Stack;\r\n\r\npublic class PallindromicPartition2 {\r\n\r\n\tstatic Stack&lt;String&gt; currList;\r\n\tstatic Stack&lt;Stack&gt; fullList;\r\n\t\r\n\tprivate static Boolean isPallindrom(String str,int start,int end) {\r\n\t\twhile(start&lt;=end) {\r\n\t\t\tif(str.charAt(start)!=str.charAt(end))\r\n\t\t\t\treturn false;\r\n\t\t\tstart++;\r\n\t\t\tend--;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tprivate static void FindSubPalPartition(Stack&lt;Stack&gt; fullList, Stack&lt;String&gt; currList, int start, int end, String str) {\r\n\t\tif(start&gt;=end) {\r\n\t\t\tStack&lt;String&gt; currListClone = (Stack&lt;String&gt;) currList.clone();\r\n\t\t\tfullList.push(currListClone);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i=start;i&lt;end;i++) {\r\n\t\t\tif(isPallindrom(str,start,i)) {\r\n\t\t\t\tcurrList.push(str.substring(start, i+1));\r\n\t\t\t\tFindSubPalPartition(fullList, currList, i+1, end, str);\r\n\t\t\t\tcurrList.pop();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static void FindAllPalPartition(String str) {\r\n\t\tint len = str.length();\r\n\t\tcurrList = new Stack&lt;String&gt;();\r\n\t\tfullList = new Stack&lt;Stack&gt;();\r\n\t\t\r\n\t\tFindSubPalPartition(fullList, currList, 0, len, str);\r\n\t\tSystem.out.println(fullList);\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tString str = \"askgifiga\";\r\n\t\tFindAllPalPartition(str);\r\n\t}\r\n\r\n}\r\n</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"find-all-possible-palindromic-partitions-in-a-given-string","tags":[{"name":"string","slug":"string"},{"name":"recursion","slug":"recursion"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"array","slug":"array"},{"name":"java","slug":"java"}],"recommendations":[{"id":1678,"title":"Game of Life - Array - Medium - LeetCode","imageUrl":"icon_67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","dateCreated":"2020-11-19T03:57:26.799Z","dateModified":"2020-11-19T03:57:33.216Z","contributedBy":"sumitc91","content":"According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nGiven a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its e","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67a9ece8-2eeb-48f8-8881-4af10f198260.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"मध्यम","slug":"medium"}],"slug":"game-of-life-array-medium-leetcode","total":0},{"id":1618,"title":"Big Countries - Sql - Easy - LeetCode","imageUrl":"icon_6ebd2b15-7c5c-49e4-8989-4100969f8797.jpg","dateCreated":"2020-10-17T05:34:51.754Z","dateModified":"2020-10-17T05:35:04.401Z","contributedBy":"sumitc91","content":"There is a table World\n+-----------------+------------+------------+--------------+---------------+<br />| name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| continent &nbsp;| area &nbsp; &nbsp; &nbsp; | population &nbsp; | gdp &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />+-----------------+----","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ebd2b15-7c5c-49e4-8989-4100969f8797.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"big-countries-sql-easy-leetcode","total":0},{"id":1610,"title":"Valid Phone Numbers - Bash - Easy - LeetCode","imageUrl":"icon_903f4733-4a8e-4987-9d87-0e0feefd9f8e.jpg","dateCreated":"2020-10-16T07:46:02.223Z","dateModified":"2020-10-16T07:46:13.79Z","contributedBy":"sumitc91","content":"Given a text file file.txt that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/903f4733-4a8e-4987-9d87-0e0feefd9f8e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"valid-phone-numbers-bash-easy-leetcode","total":0},{"id":1609,"title":"Customers Who Never Order - Sql - Easy - LeetCode","imageUrl":"icon_3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","dateCreated":"2020-10-16T07:20:40.745Z","dateModified":"2020-10-16T07:20:46.124Z","contributedBy":"sumitc91","content":"Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.\nTable: Customers.\n+----+-------+<br />| Id | Name &nbsp;|<br />+----+-------+<br />| 1 &nbsp;| Joe &nbsp; |<br />| 2 &nbsp;| Henry ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"customers-who-never-order-sql-easy-leetcode","total":0}]}