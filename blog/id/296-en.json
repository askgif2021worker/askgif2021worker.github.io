{"id":296,"title":"What are Angular TypeScript Decorators in object-oriented front-end applications ?","imageUrl":"78201682-3caa-41be-accf-af9179653c34_angular-decorators.jpg","dateCreated":"2019-03-20T15:50:07.168Z","dateModified":"2019-03-22T05:16:15.61Z","contributedBy":"AskGif","content":"<p>I've taken up TypeScript over the last few months, and it is such a breath of fresh air. TypeScript has quickly become one of my favorite languages to develop in, especially on the front-end. One of my favorite features is TypeScript Decorators, and I&rsquo;ve been taking advantage of them to trim down my AngularJS code and enable me to create small components with limited overhead. I have published some of these decorators to my NPM package &ldquo;angular-future&rdquo;, which you can view the source for on GitHub.</p>\r\n<p>&nbsp;</p>\r\n<p>Decorators</p>\r\n<p>Decorators are similar in syntax to Java annotations and C# attributes. For example:</p>\r\n<pre class=\"language-javascript\"><code>@Component({\r\n    name: \"home\",\r\n    template: `{{$ctrl.message}}`\r\n})\r\n@State({\r\n    url: \"/\",\r\n    params: {}\r\n})\r\nexport class LoginPage {\r\n    public message: string = \"Hello world!\";\r\n    \r\n    public constructor(\r\n        @Inject(\"$http\") private _httpService: ng.IHttpService\r\n    ) {\r\n    }\r\n}</code></pre>\r\n<p>These three decorators do a lot when working with my @Module decorator. It turns this simple class into a component registered in Angular and also configures a State for Angular UI Router, all right next to the component itself. The @Inject attribute manages the static $inject property Angular needs for injection post-minification. These decorators speed up development because no longer will you run into issues like mistyping the component name in the State or forgetting to add value to $inject (or putting them out of order!). In addition, we now have a nice class-based component without any of the overhead like registering the component to the app module by hand or referencing an external template file (sidenote, there is HTML syntax highlighting extensions for VS Code that make editing the template string in-code fantastic!).</p>\r\n<p>&nbsp;</p>\r\n<p>I have also created a decorator to initialize the model in an object-oriented fashion:</p>\r\n<pre class=\"language-javascript\"><code>@Module({\r\n    name: \"app\",\r\n    imports: [\"ui.router\"],\r\n    declarations: [\r\n        LoginPage\r\n    ],\r\n    bootstrap: LoginPage\r\n})\r\nclass MyModule {\r\n    @Config()\r\n    public config(\r\n        @Inject(\"$provide\") provide: any\r\n    ) {\r\n        // Config!\r\n    } \r\n\r\n    @Value(\"baseUrl\")\r\n    public baseUrl(): string {\r\n        return \"http://myserver/api/\";\r\n    }\r\n}</code></pre>\r\n<p>This decorator takes obvious inspiration from the Angular2 NgModule. This allows developers to quickly see all of the components, services, and controllers registered to the Angular application via class reference. It also allows all of your app configuration to be added to a single location, simplifying the code organization.</p>\r\n<p>&nbsp;</p>\r\n<p>I have been using this architecture and design for my latest Angular and Ionic Framework projects and couldn&rsquo;t be happier. Prior to these decorators, TypeScript and Angular were great. However, there were a lot of hang-ups due to type-safety and module references. These decorators eliminate all of the pain points I was dealing with. Now, TypeScript and Angular are amazing. With this limited overhead, creating small, React-style components is a breeze!</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/78201682-3caa-41be-accf-af9179653c34_angular-decorators.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-are-angular-typescript-decorators-in-object-oriented-front-end-applications-","tags":[{"name":"typescript","slug":"typescript"},{"name":"c-sharp","slug":"c-sharp"},{"name":"javascript","slug":"javascript"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"ionic-framework","slug":"ionic-framework"},{"name":"angular-js","slug":"angular-js"}],"recommendations":[{"id":1333,"title":"Count Largest Group - Array - Easy - LeetCode","imageUrl":"5e00719d-3ec7-4c42-a7d9-91d121aef6f0-array.png","dateCreated":"2020-06-06T07:56:00.212Z","dateModified":"2020-06-06T07:56:16.556Z","contributedBy":"AskGif","content":"Given an integer n. Each number from 1 to n is grouped according to the sum of its digits.&nbsp;\r\nReturn how many groups have the largest size.\r\n&nbsp;\r\nExample 1:\r\nInput: n = 13\r\nOutput: 4\r\nExplanation: There are 9 groups in total, they are grouped accor","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5e00719d-3ec7-4c42-a7d9-91d121aef6f0-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"array","slug":"array"},{"name":"algorithm","slug":"algorithm"},{"name":"easy","slug":"easy"},{"name":"c-sharp","slug":"c-sharp"}],"slug":"count-largest-group-array-easy-leetcode","total":0},{"id":1317,"title":"First Unique Character in a String","imageUrl":"fe6beb75-473d-41f1-b436-40069b02b138-q3.jpg","dateCreated":"2020-06-04T06:02:49.879Z","dateModified":"2020-06-04T06:03:02.587Z","contributedBy":"AskGif","content":"Given a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\r\nExamples:\r\ns = \"leetcode\"\r\nreturn 0.\r\ns = \"loveleetcode\",\r\nreturn 2.&nbsp;\r\nNote: You may assume the string contains only lowercase English","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fe6beb75-473d-41f1-b436-40069b02b138-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"data-structure","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"first-unique-character-in-a-string","total":0},{"id":1314,"title":"Consecutive Characters","imageUrl":"27ae34b5-a24e-4c78-a9f8-819f317e7b67-q3.jpg","dateCreated":"2020-05-31T06:01:12.379Z","dateModified":"2020-05-31T06:01:25.529Z","contributedBy":"AskGif","content":"Given a string s, the power of the string is the maximum length of a non-empty substring that contains only one unique character.\r\nReturn the power of the string.\r\n&nbsp;\r\nExample 1:\r\nInput: s = \"leetcode\"\r\nOutput: 2\r\nExplanation: The substring \"ee\" is of","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/27ae34b5-a24e-4c78-a9f8-819f317e7b67-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"algorithm","slug":"algorithm"},{"name":"easy","slug":"easy"},{"name":"data-structure","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"}],"slug":"consecutive-characters","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}