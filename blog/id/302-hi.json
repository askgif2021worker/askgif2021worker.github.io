{"id":302,"title":"Authorize .NET MVC Core API requests with OpenIddict and Identity","imageUrl":"9e3a5c90-baba-4d5b-88b1-3d354e200ce7_oidc-debugger.png","dateCreated":"2019-03-21T03:58:16.695Z","dateModified":"2019-03-21T03:58:16.695Z","contributedBy":"AskGif","content":"<p>OpenIddict is an excellent open-source library for dealing with OAuth and OpenID in the new MVC Core (previously known as MVC6) for .NET Core. At first, I dreaded having to relearn this process; OAuth Bearer Tokens in MVC5 was dicey and kind of annoying to get the hang of. But, OpenIddict is pretty straight forward.</p>\r\n<p>&nbsp;</p>\r\n<p>Note that out-of-the-box, OpenIddict returns opaque/encrypted tokens, not JWT. However, you can enable JWT very simply shown in an example below.</p>\r\n<p>&nbsp;</p>\r\n<p>If you want to skip to the end, here is a Gist of my Startup.cs file with CORS and OpenID enabled.</p>\r\n<p>&nbsp;</p>\r\n<p>Setup OpenIddict-Core</p>\r\n<p>&nbsp;</p>\r\n<p>Install Package</p>\r\n<p>To use OpenIddict, the first thing you need to install is the OpenIddict Core package and the AspNet.Security.OAuth.Validation:</p>\r\n<pre class=\"language-markup\"><code>{\r\n  \"dependencies\": {\r\n    ...\r\n    \"OpenIddict\": \"1.0.0-*\",\r\n    \"AspNet.Security.OAuth.Validation\": \"1.0.0-alpha1-final\",\r\n    ...\r\n  },\r\n}</code></pre>\r\n<p>Setup Middleware</p>\r\n<p>Then, we need to modify our startup to hook OpenIddict into our middleware pipeline. In your Startup.cs, you should see something like this in the ConfigureServices(IServiceCollection services) method:</p>\r\n<pre class=\"language-markup\"><code>services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()\r\n    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();</code></pre>\r\n<p>This is the first spot we hook into to give OpenIddict Identity resources. Update to the following:</p>\r\n<pre class=\"language-markup\"><code>services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()\r\n    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()\r\n    .AddDefaultTokenProviders()\r\n    .AddOpenIddict();</code></pre>\r\n<p>Next, we need to add OpenIddict to the HTTP pipeline. Again in Startup.cs, you should see something like this:</p>\r\n<pre class=\"language-markup\"><code> public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n    {\r\n        loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n        loggerFactory.AddDebug();\r\n\r\n        app.UseMvc();\r\n    }</code></pre>\r\n<p>After &ldquo;app.UseMvc()&rdquo;, we are going to add &ldquo;app.UseOpenIddict()&rdquo; to add OpenIddict to the pipeline, and &ldquo;app.UseOAuthValidation()&rdquo; to enable validation of the bearer token. Ordering matters! When first trying this, I put UseOpenIddict first and nothing worked. So, your new method should look something like this:</p>\r\n<pre class=\"language-markup\"><code> // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n    {\r\n        loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n        loggerFactory.AddDebug();\r\n        \r\n        app.UseOAuthValidation(); // enabled auth through bearer tokens\r\n\r\n        app.UseMvc();\r\n\r\n        app.UseOpenIddict(builder =&gt;\r\n        {\r\n            // Lots of configuration options on builder.Options. \r\n            // For example, you can enable JWT tokens with:\r\n            //    b.Options.UseJwtTokens();\r\n            // We will stick with defaults for this tutorial, however.\r\n        });\r\n    }</code></pre>\r\n<p>Requesting tokens</p>\r\n<p>Now try using Postman or a similar HTTP request tool. Here&rsquo;s how to get your tokens.</p>\r\n<p>&nbsp;</p>\r\n<p>The base URL for getting tokens is:</p>\r\n<pre class=\"language-markup\"><code>http://__yourdomain__/connect/token</code></pre>\r\n<p>Keep in mind, your request MUST be with the Content-Type &ldquo;application/x-www-form-urlencoded&rdquo;. As such, you will need to send a URL encoded request body if you&rsquo;re using a JavaScript XHR request &ndash; but we&rsquo;ll get this. For now, let&rsquo;s just use Postman or your tool of preference.</p>\r\n<p>&nbsp;</p>\r\n<p>Getting access token</p>\r\n<p>To get an access token, you need to send the following data to \"/connect/token\":</p>\r\n<pre class=\"language-markup\"><code>{\r\n    username: \"\",\r\n    password: \"\",\r\n    grant_type: \"password\"\r\n}</code></pre>\r\n<p>The response match this interface:</p>\r\n<pre class=\"language-markup\"><code>interface IOpenIdToken {\r\n    access_token: string;\r\n    scope: string;\r\n    refresh_token: string;\r\n    expires_in: number;\r\n    expires_at: number;\r\n\r\n    // if bad request\r\n    error: string;\r\n    error_description: string;\r\n}</code></pre>\r\n<p>You can now add the access_token to your &ldquo;Authorization&rdquo; header, with the value prefixed by &ldquo;Bearer &ldquo;. I.E:</p>\r\n<pre class=\"language-markup\"><code>Authorization: Bearer PasteAuthCodeHere</code></pre>\r\n<p>Now your API requests will be authorized and your static User will be retrieved using the bearer token.</p>\r\n<p>&nbsp;</p>\r\n<p>Getting a new access token using the refresh token</p>\r\n<p>Did you notice the &ldquo;refresh token&rdquo;? If you&rsquo;re not familiar with the idea of a refresh token, it is simply a way for the application to get a new access token after expiration without requiring the username and password. To get a new access token with the refresh token, the request is similar and also to &ldquo;/connect/token&rdquo;.</p>\r\n<p>&nbsp;</p>\r\n<p>Now we have a new access token! Note that the refresh token is long-living, so it should be treated securely.</p>\r\n<p>&nbsp;</p>\r\n<p>Setup cross-origin requests with the new AspNetCore.CORS</p>\r\n<p>Install package</p>\r\n<p>If you&rsquo;re trying to make these requests through a different site, you&rsquo;ll need to enable CORS, or you&rsquo;ll see the always-fun &ldquo;no &lsquo;access-control-allow-___&rsquo; header is present on the requested resource&rdquo; error. To do this, we need to install the new CORS package.</p>\r\n<pre class=\"language-markup\"><code>{\r\n  \"dependencies\": {\r\n    ...\r\n    \"Microsoft.AspNetCore.Cors\": \"1.0.0-rc2-final\"\r\n    ...\r\n  },\r\n}</code></pre>\r\n<p>Adding CORS middleware</p>\r\n<p>Again in the startup, find the ConfigureServices(IServiceCollection services) method. At the top of the method, add the following:</p>\r\n<pre class=\"language-markup\"><code>public void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddCors();\r\n    ...</code></pre>\r\n<p>Now in Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory), add app.UseCors. For example:</p>\r\n<pre class=\"language-markup\"><code> public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n    {\r\n        loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n        loggerFactory.AddDebug();\r\n\r\n        app.UseCors(builder =&gt;\r\n            // This will allow any request from any server. Tweak to fit your needs!\r\n            // The fluent API is pretty pleasant to work with.\r\n            builder.AllowAnyHeader()\r\n                    .AllowAnyMethod()\r\n                    .AllowAnyOrigin()\r\n        );\r\n\r\n        app.UseOAuthValidation();\r\n        app.UseMvc();\r\n        app.UseOpenIddict();\r\n    }</code></pre>\r\n<p>Keep in mind that ordering matters when setting up the HTTP Request pipeline.</p>\r\n<p>&nbsp;</p>\r\n<p>JavaScript requests</p>\r\n<p>Requesting tokens through JavaScript XHR</p>\r\n<p>When requesting for tokens, you must use the content-type header of &ldquo;application/x-www-form-urlencoded&rdquo;. OpenIddict will reject the request if you don&rsquo;t, with a friendly error message (yay for that!). You must also encode your data into a form string. For example:</p>\r\n<pre class=\"language-markup\"><code>{\r\n    \"grant_type\": \"password\",\r\n    \"username\": username,\r\n    \"password\": password,\r\n    \"scope\": \"offline_access profile email\"\r\n}</code></pre>\r\n<p><span style=\"color: #3d3833; font-family: 'Open Sans', Arial, sans-serif; font-size: 18px; text-align: justify;\">Should be sent a string value of:</span></p>\r\n<pre class=\"language-markup\"><code>grant_type=password&amp;username=myusername&amp;password=mypassword&amp;scope=offline_access profile email</code></pre>\r\n<p>I wrote a small, probably not ready for production, the method to do this conversion for me (in TypeScript):</p>\r\n<pre class=\"language-markup\"><code>private urlEncodeValues(data: any) {\r\n    var str = \"\";\r\n    for (var key in data) {\r\n        if (data.hasOwnProperty(key)) {\r\n            str += `${key}=${data[key]}&amp;`;\r\n        }\r\n    }\r\n    return str;\r\n}</code></pre>\r\n<p>Requesting API data through JavaScript XHR</p>\r\n<p>When making authorized API requests, you need to make sure to add the authorization header mentioned earlier in the post.</p>\r\n<p>&nbsp;</p>\r\n<p>Creating user accounts through Web API</p>\r\n<p>This is not OpenIddict&rsquo;s responsibility, so you need to create your own controller to handle creating users. After the user is created, you can request tokens immediately. Here&rsquo;s a quick example of my AccountController WebAPI:</p>\r\n<pre class=\"language-markup\"><code>[Route(\"api/account\")]\r\npublic class AccountController : Controller\r\n{\r\n    private readonly UserManager&lt;ApplicationUser&gt; _userManager;\r\n\r\n    public AccountController(UserManager&lt;ApplicationUser&gt; userManager)\r\n    {\r\n        _userManager = userManager;\r\n    }\r\n\r\n    [HttpPost]\r\n    public async Task&lt;IdentityResult&gt; Register([FromBody]ApplicationUserDto dto)\r\n    {\r\n        var user = new ApplicationUser { UserName = dto.Username, Email = dto.Email };\r\n        var result = await _userManager.CreateAsync(user, dto.Password);\r\n        return result;\r\n    }\r\n}</code></pre>\r\n<p>An example request to this would be to the &ldquo;/api/account&rdquo; resource:</p>\r\n<pre class=\"language-markup\"><code>{\r\n    \"Username\": \"sumit\",\r\n    \"Email\": \"support@askgif.com\",\r\n    \"Password\": \"mygoodpassword\"\r\n}</code></pre>\r\n<p>All set!</p>\r\n<p>You should now be able to register users, authorize users, make authorized requests to your web API.</p>\r\n<p>&nbsp;</p>\r\n<p>If you have questions, please use OpenIddict-core&rsquo;s Gitter chat. I, unfortunately, have not had time to keep up with OpenIddict releases and will not be of too much help.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e3a5c90-baba-4d5b-88b1-3d354e200ce7_oidc-debugger.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"authorize-.net-mvc-core-api-requests-with-openiddict-and-identity","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-core","slug":"mvc-core"}],"recommendations":[{"id":1375,"title":"Binary Prefix Divisible By 5 - Array - Easy - LeetCode","imageUrl":"4f3aed77-fe8b-4c51-a1d4-c52db0694eca-array.png","dateCreated":"2020-06-19T10:04:59.867Z","dateModified":"2020-06-19T10:05:13.253Z","contributedBy":"AskGif","content":"Given an array A of 0s and 1s, consider N_i: the i-th subarray from A[0] to A[i] interpreted as a binary number (from most-significant-bit to least-significant-bit.)\r\nReturn a list of booleans answer, where answer[i] is true if and only if N_i is divisible by 5.\r\n&nbsp;\r\nExam","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4f3aed77-fe8b-4c51-a1d4-c52db0694eca-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"आसान","slug":"easy"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"algorithm","slug":"algorithm"}],"slug":"binary-prefix-divisible-by-5-array-easy-leetcode","total":0},{"id":300,"title":"ASP.NET Core 2.0 Google OAuth Redirection with Add Hosted Domain and other parameters","imageUrl":"b58e46eb-d9dc-4ca9-94c8-f3d0a57bb3eb_dotnetcore-oauth.jpg","dateCreated":"2019-03-20T17:49:53.165Z","dateModified":"2019-03-22T09:18:27.165Z","contributedBy":"AskGif","content":"Adding a hosted domain parameter is not directly supposed through the GoogleOptions class, unfortunately &ndash; however with a few (not obvious) tweaks, you can easily add the parameter!\r\n&nbsp;\r\nIn your Startup.cs, set up a new Events parameter as such:\r\n<pre class=\"language-c","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b58e46eb-d9dc-4ca9-94c8-f3d0a57bb3eb_dotnetcore-oauth.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-core","slug":"mvc-core"},{"name":"c-sharp","slug":"c-sharp"}],"slug":"asp.net-core-2.0-google-oauth-redirection-with-add-hosted-domain-and-other-parameters","total":0},{"id":298,"title":"How to use ASP.NET Web API cross-origin with ASP.NET Identity ?","imageUrl":"de304292-ed2e-4e28-8b7f-2cc5898f57ac_cross-origin.jpg","dateCreated":"2019-03-20T16:50:35.577Z","dateModified":"2019-03-20T16:54:16.861Z","contributedBy":"AskGif","content":"ASP.NET Web API is a fantastic piece of the .NET family (there is certainly some weirdness since we now have MVC and Web API with nearly identical methods, but ASP.NET MVC 6 is coming :)). However, getting a SPA or mobile hybrid (Ionic!) app working isn&rsquo;t the most pleasant experience.\r\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/de304292-ed2e-4e28-8b7f-2cc5898f57ac_cross-origin.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"mvc-5","slug":"mvc-5"},{"name":"Angular-JS","slug":"angular-js"},{"name":"javascript","slug":"javascript"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"how-to-use-asp.net-web-api-cross-origin-with-asp.net-identity-","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}