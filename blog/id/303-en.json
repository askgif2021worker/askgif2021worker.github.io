{"id":303,"title":"Best way to Update or Replace Entities in Entity Framework 6","imageUrl":"c5dd46a9-091f-4d7a-ad21-a567ce42d24e_entity-framework-6.jpg","dateCreated":"2019-03-21T15:25:15.365Z","dateModified":"2019-03-22T09:15:39.015Z","contributedBy":"AskGif","content":"<p>I&rsquo;ve been working with Entity Framework for a few years and one pain-point for me was updating existing data entities. It typically ended up being tedious property replacement that made the code look nasty, and caused the risk of mismatching property assignments or missing a property assignment completely. For instance:</p>\r\n<pre class=\"language-csharp\"><code>public class MyEntityRepository\r\n{\r\n    public MyEntity UpdateTheOldWay(int id, MyEntity newEntityValues)\r\n    {\r\n        using (var context = new MyDbContext())\r\n        {\r\n            var entity = context.MyEntities.Find(id);\r\n            \r\n            entity.MyProperty = newEntityValues.MyProperty;\r\n            entity.MyAProperty = newEntityValues.MyAProperty;\r\n            entity.MyBProperty = newEntityValues.MyBProperty;\r\n            entity.MyCProperty = newEntityValues.MyBProperty;\r\n            entity.MyDProperty = newEntityValues.MyDProperty;\r\n            entity.MyEProperty = newEntityValues.MyEProperty;\r\n\r\n            return entity;\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>Spot the error? These things happen. Sometimes they get caught quick, sometimes they slip by. It also took 6 lines for this fairly small model; over time that starts to get a little nastier.</p>\r\n<p>&nbsp;</p>\r\n<p>DbEntityEntry to the rescue!</p>\r\n<p>I&rsquo;m not sure how this alluded me for so long because it&rsquo;s such a nice solution in my opinion.</p>\r\n<pre class=\"language-csharp\"><code>public class MyEntityRepository\r\n{\r\n    public MyEntity Update(int id, MyEntity newEntityValues)\r\n    {\r\n        using (var context = new MyDbContext())\r\n        {\r\n            var entity = context.MyEntities.Find(id);\r\n            context.Entry(entity).CurrentValues.SetValues(newEntityValues);\r\n            context.SaveChanges();\r\n\r\n            return entity;\r\n        }\r\n    }\r\n\r\n    public MyEntity Update(int id, MyEntityViewModel viewModel)\r\n    {\r\n        using (var context = new MyDbContext())\r\n        {\r\n            var entity = context.MyEntities.Find(id);\r\n            context.Entry(entity).CurrentValues.SetValues(viewModel);\r\n            context.SaveChanges();\r\n\r\n            return entity;\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>In the first method, we are replacing a MyEntity with a new MyEntity completely. Pretty cool! However, in the second method, we&rsquo;re using a MyEntityViewModel. This is interesting to note; the SetValues method takes in a generic object and will update all the properties that match on both the entity and the object you pass into the SetValues method. You can also use Dictionaries with property keys as the tuple key</p>\r\n<p>source:&nbsp;https://docs.microsoft.com/en-us/ef/ef6/saving/change-tracking/property-values</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c5dd46a9-091f-4d7a-ad21-a567ce42d24e_entity-framework-6.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"best-way-to-update-or-replace-entities-in-entity-framework-6","tags":[{"name":"entity-framework","slug":"entity-framework"},{"name":"c-sharp","slug":"c-sharp"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"recommendations":[{"id":1386,"title":"Add to Array-Form of Integer - Easy - LeetCode","imageUrl":"b1f31204-fff3-4b3b-bdbf-ed63f1f0a11d-array.png","dateCreated":"2020-06-21T15:25:19.108Z","dateModified":"2020-06-21T15:25:32.991Z","contributedBy":"AskGif","content":"For a non-negative integer X, the array-form of X is an array of its digits in left to right order.&nbsp; For example, if X = 1231, then the array form is [1,2,3,1].\r\nGiven the array-form A of a non-negative integer X, return the array-form of the integer X+K.\r\n&nbsp;\r\nExampl","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b1f31204-fff3-4b3b-bdbf-ed63f1f0a11d-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"easy","slug":"easy"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"algorithm","slug":"algorithm"}],"slug":"add-to-array-form-of-integer-easy-leetcode","total":0},{"id":1317,"title":"First Unique Character in a String","imageUrl":"fe6beb75-473d-41f1-b436-40069b02b138-q3.jpg","dateCreated":"2020-06-04T06:02:49.879Z","dateModified":"2020-06-04T06:03:02.587Z","contributedBy":"AskGif","content":"Given a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\r\nExamples:\r\ns = \"leetcode\"\r\nreturn 0.\r\ns = \"loveleetcode\",\r\nreturn 2.&nbsp;\r\nNote: You may assume the string contains only lowercase English","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fe6beb75-473d-41f1-b436-40069b02b138-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"data-structure","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"first-unique-character-in-a-string","total":0},{"id":315,"title":"How to Replace child collections in Entity Framework?","imageUrl":"d08846e7-db0b-4aff-8f1c-9980e99d0f0d_ef-delete-child.jpg","dateCreated":"2019-03-23T16:06:31.244Z","dateModified":"2019-03-23T16:06:51.168Z","contributedBy":"AskGif","content":"ORMs are nice. Usually. That is until you hit a mostly unhelpful exception like &ldquo;An object with the same key already exists in the ObjectStateManager&rdquo;. I ran into this problem by trying to do a complete replacement of an entity&rsquo;s child entity collection (i.e. a Products&rsquo;s ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d08846e7-db0b-4aff-8f1c-9980e99d0f0d_ef-delete-child.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"entity-framework","slug":"entity-framework"}],"slug":"how-to-replace-child-collections-in-entity-framework","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}