{"id":304,"title":"Ninjecting in App_Start classes and static classes","imageUrl":"ed92c0eb-fd29-40e4-b0c9-6401f9dcb75a_ninject-logo.jpg","dateCreated":"2019-03-21T15:40:22.829Z","dateModified":"2019-03-21T16:03:44.549Z","contributedBy":"AskGif","content":"<p>Let's say you are doing some work on your AuthConfig class, in your Global.asax, or maybe a static class. You can&rsquo;t property-inject, and generally, it&rsquo;s a pain to get this to work.</p>\r\n<p>&nbsp;</p>\r\n<p>However, if you&rsquo;re using Ninject for ASP.NET MVC, you can use the following call:</p>\r\n<pre class=\"language-markup\"><code>var myInjectedService = DependencyResolver.Current.GetService&lt;IMyInjectedService&gt;();</code></pre>\r\n<p>The performance impact of this is pretty low (i.e. &lt; 0.001) and it&rsquo;s a pretty simple fix.</p>\r\n<p>&nbsp;</p>\r\n<p>But what about unit testing? Fortunately, there is a solution. Check out Max Vasilyev&rsquo;s blog on Mocking Dependency Injection where he provides a MockDependencyResolver class and allows you to do the following (if you use Moq):</p>\r\n<pre class=\"language-markup\"><code>var myInjectedService = new Mock&lt;IMyInjectedService&gt;();\r\nmyInjectedService.Setup(e =&gt; e.MyBooleanMethod()).Returns(true);\r\n\r\nvar dependencyResolver = new MockDependencyResolver();\r\ndependencyResolver.Freeze&lt;IMyInjectedService&gt;(environment.Object);\r\nDependencyResolver.SetResolver(dependencyResolver);</code></pre>\r\n<p>Please keep in mind, you probably don&rsquo;t want to use dependency injection in static classes. However there are times you want to unit test something in AuthConfig, RouteConfig, Global.asax, or Startup, and this is method is relatively painless</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ed92c0eb-fd29-40e4-b0c9-6401f9dcb75a_ninject-logo.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"ninjecting-in-app_start-classes-and-static-classes","tags":[{"name":"mvc-5","slug":"mvc-5"},{"name":"c-sharp","slug":"c-sharp"},{"name":"ninject","slug":"ninject"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"recommendations":[{"id":1381,"title":"Find Common Characters - Array - Easy - LeetCode","imageUrl":"b81f63a8-c0b3-4aca-8e54-24e8ca5d19e4-array.png","dateCreated":"2020-06-20T17:06:51.132Z","dateModified":"2020-06-20T17:07:05.825Z","contributedBy":"AskGif","content":"Given an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).&nbsp; For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b81f63a8-c0b3-4aca-8e54-24e8ca5d19e4-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"leetcode","slug":"leetcode"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"आसान","slug":"easy"}],"slug":"find-common-characters-array-easy-leetcode","total":0},{"id":1316,"title":"Add Strings","imageUrl":"aa48a98e-318a-4781-a71f-d662a241209a-q3.jpg","dateCreated":"2020-06-04T05:18:37.529Z","dateModified":"2020-06-04T05:19:03.505Z","contributedBy":"AskGif","content":"Given two non-negative integers, num1 and num2 represented as a string, return the sum of num1 and num2.\r\n&nbsp;\r\nNote:\r\nThe length of both num1 and num2 is &lt; 5100.\r\nBoth num1 and num2 contains only digits 0-9.\r\nBoth num1 and num2 does not contain any leading","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/aa48a98e-318a-4781-a71f-d662a241209a-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"algorithm","slug":"algorithm"},{"name":"आसान","slug":"easy"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"string","slug":"string"}],"slug":"add-strings","total":0},{"id":36,"title":"Implement Quick Sort Using C-Sharp.","imageUrl":"ac952349-b324-4976-91ac-a217eabcde0f_Sorting_quicksort_anim.gif","dateCreated":"2018-07-19T07:01:11.967Z","dateModified":"2018-07-19T07:01:25.109Z","contributedBy":"AskGif","content":"Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm, serving as a systematic method for placing the elements of an array in order. Developed by Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ac952349-b324-4976-91ac-a217eabcde0f_Sorting_quicksort_anim.gif","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"},{"name":"sorting","slug":"sorting"}],"slug":"implement-quick-sort-using-c-sharp","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}