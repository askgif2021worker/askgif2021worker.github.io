{"id":309,"title":"Listening to IIS Application pool recycle events in ASP.NET","imageUrl":"ab60056b-3b7a-498c-8801-22be557ee7f1_iis.jpg","dateCreated":"2019-03-23T13:27:22.297Z","dateModified":"2019-03-23T14:13:05.405Z","contributedBy":"AskGif","content":"<p>One of my .NET apps was having some strange issues. It was attached to an IIS app pool, so it was possible that the app pool was recycling due to some other application&rsquo;s events or otherwise. I decided to create a listener to detect whenever the app pool was recycling and log what was causing it.</p>\r\n<p>Here&rsquo;s the class created to listen for recycling events:</p>\r\n<pre class=\"language-csharp\"><code>public class ApplicationPoolRecycleListener\r\n{\r\n    public enum RecycleReason\r\n    {\r\n        IisReset = 3202,\r\n        ReachedProcessingTimeLimit = 5074,\r\n        ReachedAllowedRequestLimit = 5075,\r\n        ReachedScheduledRecycleTime = 5076,\r\n        ReachedVirtualMemoryLimit = 5077,\r\n        ReachedPrivateBytesMemoryLimit = 5117,\r\n        AdministratorRequest = 5079,\r\n        AppPoolConfigurationChange = 5080,\r\n        IisConfigurationError = 5081\r\n    }\r\n\r\n    private readonly string _targetApplicationPoolName;\r\n    private bool _stopListening;\r\n\r\n    public Func&lt;EntryWrittenEventArgs, RecycleReason, bool&gt; OnTargetApplicationRecycled { get; set; }\r\n    public Func&lt;EntryWrittenEventArgs, RecycleReason, bool&gt; OnNonTargetApplicationRecycled { get; set; }\r\n\r\n    public ApplicationPoolRecycleListener(string targetApplicationPoolName)\r\n    {\r\n        _targetApplicationPoolName = targetApplicationPoolName;\r\n        _stopListening = false;\r\n    }\r\n\r\n    public void StartListening()\r\n    {\r\n        var eventLog = new EventLog { Log = \"System\", EnableRaisingEvents = true };\r\n        eventLog.EntryWritten += EventWrittenCallback;\r\n\r\n        var eventLog2 = new EventLog { Log = \"Application\", EnableRaisingEvents = true };\r\n        eventLog2.EntryWritten += EventWrittenCallback;\r\n        while (_stopListening == false) { }\r\n    }\r\n\r\n    private void EventWrittenCallback(object sender, EntryWrittenEventArgs e)\r\n    {\r\n        var eventId = e.Entry.EventID;\r\n\r\n        if (Enum.IsDefined(typeof (RecycleReason), eventId))\r\n        {\r\n            var recycleReason = (RecycleReason)eventId;\r\n\r\n            if (recycleReason == RecycleReason.IisReset)\r\n            {\r\n                _stopListening = OnTargetApplicationRecycled?.Invoke(e, recycleReason) ?? false;\r\n            }\r\n            else\r\n            {\r\n                if (e.Entry.Message.ToLower().Contains($\"serving application pool '{_targetApplicationPoolName.ToLower()}'\"))\r\n                {\r\n                    _stopListening = OnTargetApplicationRecycled?.Invoke(e, recycleReason) ?? false;\r\n                }\r\n                else\r\n                {\r\n                    _stopListening = OnNonTargetApplicationRecycled?.Invoke(e, recycleReason) ?? false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>Now I was able to debug or log to detect why the recycling was occurring.</p>\r\n<p>Example use:</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.Diagnostics;\r\nusing System.Net;\r\n\r\nnamespace EventLogListener\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var listener = new ApplicationPoolRecycleListener(\"StreamingServer\")\r\n            {\r\n                OnTargetApplicationRecycled = (entry, recycleReason) =&gt;\r\n                {\r\n                    // do something\r\n                    return true;\r\n                },\r\n\r\n                OnNonTargetApplicationRecycled = (entry, recycleReason) =&gt;\r\n                {\r\n                    // do something\r\n                    return true;\r\n                }\r\n            };\r\n\r\n            listener.StartListening();\r\n        }\r\n    }\r\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ab60056b-3b7a-498c-8801-22be557ee7f1_iis.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"listening-to-iis-application-pool-recycle-events-in-asp.net","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"recommendations":[{"id":1371,"title":"Duplicate Zeros - Array - Easy - LeetCode","imageUrl":"b359ca85-da77-4b27-8532-9f648fb33824-array.png","dateCreated":"2020-06-19T03:25:21.546Z","dateModified":"2020-06-19T03:25:34.284Z","contributedBy":"AskGif","content":"Given a fixed length array arr of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.\r\nNote that elements beyond the length of the original array are not written.\r\nDo the above modifications to the input array in place, do not return anything f","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b359ca85-da77-4b27-8532-9f648fb33824-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"data-structure","slug":"data-structure"},{"name":"array","slug":"array"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"}],"slug":"duplicate-zeros-array-easy-leetcode","total":0},{"id":1353,"title":"Cells with Odd Values in a Matrix - Array - Easy - LeetCode","imageUrl":"62e28ac4-2f10-4ba3-b380-0f9f97176f55-array.png","dateCreated":"2020-06-11T10:55:05.085Z","dateModified":"2020-06-11T10:55:18.401Z","contributedBy":"AskGif","content":"Given n and m which are the dimensions of a matrix initialized by zeros and given an array indices where indices[i] = [ri, ci]. For each pair of [ri, ci] you have to increment all cells in row ri and column ci by 1.\r\nReturn the number of cells with odd values in the matrix after applying t","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/62e28ac4-2f10-4ba3-b380-0f9f97176f55-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"}],"slug":"cells-with-odd-values-in-a-matrix-array-easy-leetcode","total":0},{"id":1352,"title":"Shift 2D Grid - Array - Easy - LeetCode","imageUrl":"396f6cfc-2966-4853-8c2c-4c293c9d49cf-array.png","dateCreated":"2020-06-11T07:25:28.679Z","dateModified":"2020-06-11T07:25:42.604Z","contributedBy":"AskGif","content":"Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.\r\nIn one shift operation:\r\nElement at grid[i][j] moves to grid[i][j + 1].\r\nElement at grid[i][n - 1] moves to grid[i + 1][0].\r\nElement at grid[m - 1][n - 1] moves to grid[0][0].\r\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/396f6cfc-2966-4853-8c2c-4c293c9d49cf-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"data-structure","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"}],"slug":"shift-2d-grid-array-easy-leetcode","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}