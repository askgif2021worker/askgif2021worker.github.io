{"id":310,"title":"How to use libgit2sharp to commit to Git repositories in C# ?","imageUrl":"b4e62e07-7a40-4a5b-ab48-d4eb84907166_libgit2sharp.png","dateCreated":"2019-03-23T13:40:52.753Z","dateModified":"2019-03-23T14:13:33.03Z","contributedBy":"AskGif","content":"<p>I helped design an interesting deployment strategy for an Azure application. For one of our projects, we have an existing upgrade solution that will distribute new versions of our ASP.NET application to our clients. One of our clients runs in the app in Azure. To support this automated distribution, we use Azure&rsquo;s Git Repository Deploy feature to push up the new code to a staging environment. We can then manually swap the staging environment with our production environment after a smoke test, completing the deployment.</p>\r\n<p>&nbsp;</p>\r\n<p>One step to this process is committing the web app to the Azure Git repository. To do this, I took advantage of the Nuget package LibGit2Sharp.</p>\r\n<pre class=\"language-markup\"><code>Install-Package LibGit2Sharp -Version 0.21.0.176</code></pre>\r\n<p>I abstracted some of the code used to do this Git repository push into the following GitRepositoryManager class.</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing LibGit2Sharp;\r\n\r\nnamespace GitDeploy\r\n{\r\n    public class GitRepositoryManager\r\n    {\r\n        private readonly string _repoSource;\r\n        private readonly UsernamePasswordCredentials _credentials;\r\n        private readonly DirectoryInfo _localFolder;\r\n\r\n        /// &lt;summary&gt;\r\n        /// Initializes a new instance of the &lt;see cref=\"GitRepositoryManager\" /&gt; class.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"username\"&gt;The Git credentials username.&lt;/param&gt;\r\n        /// &lt;param name=\"password\"&gt;The Git credentials password.&lt;/param&gt;\r\n        /// &lt;param name=\"gitRepoUrl\"&gt;The Git repo URL.&lt;/param&gt;\r\n        /// &lt;param name=\"localFolder\"&gt;The full path to local folder.&lt;/param&gt;\r\n        public GitRepositoryManager(string username, string password, string gitRepoUrl, string localFolder)\r\n        {\r\n            var folder = new DirectoryInfo(localFolder);\r\n\r\n            if (!folder.Exists)\r\n            {\r\n                throw new Exception(string.Format(\"Source folder '{0}' does not exist.\", _localFolder));\r\n            }\r\n\r\n            _localFolder = folder;\r\n\r\n            _credentials = new UsernamePasswordCredentials\r\n            {\r\n                Username = username,\r\n                Password = password\r\n            };\r\n\r\n            _repoSource = gitRepoUrl;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Commits all changes.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"message\"&gt;The message.&lt;/param&gt;\r\n        /// &lt;exception cref=\"System.Exception\"&gt;&lt;/exception&gt;\r\n        public void CommitAllChanges(string message)\r\n        {\r\n            using (var repo = new Repository(_localFolder.FullName))\r\n            {\r\n                var files = _localFolder.GetFiles(\"*\", SearchOption.AllDirectories).Select(f =&gt; f.FullName);\r\n                repo.Stage(files);\r\n\r\n                repo.Commit(message);\r\n            }\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Pushes all commits.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"remoteName\"&gt;Name of the remote server.&lt;/param&gt;\r\n        /// &lt;param name=\"branchName\"&gt;Name of the remote branch.&lt;/param&gt;\r\n        /// &lt;exception cref=\"System.Exception\"&gt;&lt;/exception&gt;\r\n        public void PushCommits(string remoteName, string branchName)\r\n        {\r\n            using (var repo = new Repository(_localFolder.FullName))\r\n            {\r\n                var remote = repo.Network.Remotes.FirstOrDefault(r =&gt; r.Name == remoteName);\r\n                if (remote == null)\r\n                {\r\n                    repo.Network.Remotes.Add(remoteName, _repoSource);\r\n                    remote = repo.Network.Remotes.FirstOrDefault(r =&gt; r.Name == remoteName);\r\n                }\r\n\r\n                var options = new PushOptions\r\n                {\r\n                    CredentialsProvider = (url, usernameFromUrl, types) =&gt; _credentials\r\n                };\r\n\r\n                repo.Network.Push(remote, branchName, options);\r\n            }\r\n        }\r\n    }\r\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b4e62e07-7a40-4a5b-ab48-d4eb84907166_libgit2sharp.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-use-libgit2sharp-to-commit-to-git-repositories-in-c-","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"azure","slug":"azure"},{"name":"mvc-5","slug":"mvc-5"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"recommendations":[{"id":1323,"title":"Count and Say - String - Easy - LeetCode","imageUrl":"d6045af8-06de-409d-816f-5c3c7692668f-q3.jpg","dateCreated":"2020-06-04T11:13:21.151Z","dateModified":"2020-06-04T11:13:34.298Z","contributedBy":"AskGif","content":"The count-and-say sequence is the sequence of integers with the first five terms as following:\r\n1.&nbsp; &nbsp; &nbsp;1\r\n2.&nbsp; &nbsp; &nbsp;11\r\n3.&nbsp; &nbsp; &nbsp;21\r\n4.&nbsp; &nbsp; &nbsp;1211\r\n5.&nbsp; &nbsp; &nbsp;111221\r\n1 is read off as \"one 1\"","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d6045af8-06de-409d-816f-5c3c7692668f-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"count-and-say-string-easy-leetcode","total":0},{"id":158,"title":"Exception Handling in ASP.NET Core Web API","imageUrl":"5bbe12c4-9545-4bf7-97a6-0a16bd888dac_error-handling.jpg","dateCreated":"2018-11-28T10:55:40.625Z","dateModified":"2018-11-28T10:55:52.68Z","contributedBy":"AskGif","content":"Question:\r\nI started using ASP.NET Core for my new REST API project after using regular ASP.NET Web API for many years. I don't see a good way to handle exceptions in ASP.NET Core Web API. I tried to implement exception handling filter/attribute:\r\n<pre class=\"language-csharp\"><code>pub","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5bbe12c4-9545-4bf7-97a6-0a16bd888dac_error-handling.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"exception","slug":"exception"},{"name":"web-services","slug":"web-services"},{"name":"web-api","slug":"web-api"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"dotnet-core","slug":"dotnet-core"}],"slug":"exception-handling-in-asp.net-core-web-api","total":0},{"id":122,"title":"Sending email using Gmail SMTP in asp.net mvc application?","imageUrl":"9314a749-f567-4f1c-8619-0d55ecfe29d3_gmail-smtp.jpg","dateCreated":"2018-08-27T12:20:43.031Z","dateModified":"2018-08-29T07:46:58.801Z","contributedBy":"AskGif","content":"You can use GMAIL SMTP service to send emails using c# .net MVC. You can specify the property constants in a config file for easy alteration.\r\nCreate Gmail Class comprises of all needed data type and member function as below.\r\n<pre class=\"language-csharp\"><code>public class GMailer\r\n{\r","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9314a749-f567-4f1c-8619-0d55ecfe29d3_gmail-smtp.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"dot-net","slug":"dot-net"},{"name":"जीमेल","slug":"gmail"},{"name":"smtp","slug":"smtp"}],"slug":"sending-email-using-gmail-smtp-in-asp.net-mvc-application","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}