{"id":312,"title":"New features about ASP.NET and C#","imageUrl":"23a73932-d77d-4bd4-b4ab-06ea4d5183d3_c-sharp-dotnet.jpg","dateCreated":"2019-03-23T14:12:39.969Z","dateModified":"2019-03-23T14:30:23.06Z","contributedBy":"AskGif","content":"<p>Microsoft is coming out with a bunch of new features that make me very glad to be a .NET-oriented developer. The ASP.NET vNext platform looks like it is going to be a solid improvement to the environment; no longer will users be tied to IIS or Visual Studio and I anticipate some strong VS competitors coming out with these additions and the official support of Mono. Additionally, the C# 6.0 features are going to make some small changes that will make big impacts.</p>\r\n<p>&nbsp;</p>\r\n<p>Roslyn</p>\r\n<p>Roslyn is an open-source .NET compiler platform that will be allowing a ton of language updates that will be coming around with C# 6.0. Since it is also cross-platform, can run using Mono (the open-source implementation of .NET), and will be working side-by-side with the self-server ASP.NET offers, running a .NET web app on a Linux or Mac server is reasonably possible.</p>\r\n<p>&nbsp;</p>\r\n<p>Language Change: Null propagation operator</p>\r\n<p>This change adds the operator &lsquo;?.&rsquo; in place of &lsquo;.&rsquo; to access properties that could possibly be null. So for example, instead of doing this:</p>\r\n<pre class=\"language-markup\"><code>if (person != null &amp;&amp; person.Address != null &amp;&amp; person.Address.City != null) { &hellip; }</code></pre>\r\n<p>you can simply do&hellip;</p>\r\n<pre class=\"language-markup\"><code>if (person?.Address?.City != null) { &hellip; }</code></pre>\r\n<p>Since I use Entity Framework relationships a lot, I am really excited about this feature. I am tired of writing null check and null check&hellip;</p>\r\n<p>&nbsp;</p>\r\n<p>Language Change: Primary constructors and Auto-property initializers</p>\r\n<p>These two features will allow you to setup basic class construction simpler than before. So for example, when we currently do the following:</p>\r\n<pre class=\"language-csharp\"><code>public class Person {\r\n public string FirstName { get; set; }\r\n public string LastName { get; set; }\r\n public Address Address { get; set; }\r\n\r\n public Person(string firstName, string lastName) {\r\n  FirstName = firstName;\r\n  LastName = lastName;\r\n }\r\n public Person(string firstName, string lastName, string city, string state) {\r\n  FirstName = firstName;\r\n  LastName = lastName;\r\n  Address = new Address(city, state);\r\n }\r\n}</code></pre>\r\n<p>Instead, you can do this now:</p>\r\n<pre class=\"language-csharp\"><code>public class Person(string firstName, string lastName) {\r\n public string FirstName { get; set; } = firstName;\r\n public string LastName { get; set; } = lastName;\r\n public Address Address { get; set; }\r\n\r\n public Person(string city, string state) : this(firstName, lastName) {\r\n  Address = new Address(city, state);\r\n }\r\n}</code></pre>\r\n<p>RyuJIT</p>\r\n<p>RyuJIT is a just-in-time compiler that will allow developers to no longer have to stop debugging and re-build; instead, you simply save and refresh. At last, the workflow I love with dynamic languages like Python and PHP (though it already exists with Java, such as in Java Play) is now in ASP.NET. Stopping and rebuilding is, what, a 3 second process? That happens constantly, and builds up to plenty of time and blown concentration.</p>\r\n<p>&nbsp;</p>\r\n<p>Self-hosting Applications</p>\r\n<p>No longer are ASP.NET applications confined to IIS and Windows Servers. Now, ASP.NET MVC has a self-hosting tool. This is done using a new Startup.cs file, and will boot up the service:</p>\r\n<pre class=\"language-csharp\"><code>using Microsoft.AspNet.Routing;\r\nusing Microsoft.AspNet.Builder;\r\nusing Microsoft.Framework.DependencyInjection;\r\n\r\npublic class Startup\r\n{\r\n public void Configure(IBuilder app)\r\n {\r\n  app.UseServices(services =&gt;\r\n  {\r\n   services.AddMvc();\r\n  });\r\n\r\n  app.UseMvc(routes =&gt;\r\n  {\r\n   routes.MapRoute(\r\n   name: \"Default\",\r\n   template: \"{controller=Home}/{action=Index}/{id?}\");\r\n  });\r\n }\r\n}</code></pre>\r\n<p>There are a ton of more features in the new ASP.NET MVC framework and C# language that will make developers (well, me, anyways) much more productive.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/23a73932-d77d-4bd4-b4ab-06ea4d5183d3_c-sharp-dotnet.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"new-features-about-asp.net-and-c","tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-core","slug":"mvc-core"},{"name":"c-sharp","slug":"c-sharp"}],"recommendations":[{"id":1355,"title":"Play with Chips - Array - Easy - LeetCode","imageUrl":"7a812179-4971-4b5f-abe5-1f767eeb1eba-array.png","dateCreated":"2020-06-12T12:30:51.67Z","dateModified":"2020-06-12T12:31:03.556Z","contributedBy":"AskGif","content":"There are some chips, and the i-th chip is at position chips[i].\r\nYou can perform any of the two following types of moves any number of times (possibly zero) on any chip:\r\nMove the i-th chip by 2 units to the left or to the right with a cost of 0.\r\nMove the i-th chip by 1 uni","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7a812179-4971-4b5f-abe5-1f767eeb1eba-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"}],"slug":"play-with-chips-array-easy-leetcode","total":0},{"id":1327,"title":"Roman to Integer - String - Easy - LeetCode","imageUrl":"93e09f6e-55eb-446e-82ce-d203e4d9f0ac-q3.jpg","dateCreated":"2020-06-05T08:31:38.75Z","dateModified":"2020-06-05T08:31:55.304Z","contributedBy":"AskGif","content":"Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\r\n&nbsp;\r\nSymbol&nbsp; &nbsp; &nbsp; &nbsp;Value\r\nI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1\r\nV&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5\r\nX&nbsp; &nbsp; &nbsp; &nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/93e09f6e-55eb-446e-82ce-d203e4d9f0ac-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"roman-to-integer-string-easy-leetcode","total":0},{"id":1318,"title":"Ransom Note","imageUrl":"8c033b7a-afd0-49d1-8cfe-da7217b7e5f5-q3.jpg","dateCreated":"2020-06-04T06:25:46.127Z","dateModified":"2020-06-04T06:25:59.781Z","contributedBy":"AskGif","content":"Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines; otherwise, it will return false.\r\nEach letter in the magazine string can only be used once in","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8c033b7a-afd0-49d1-8cfe-da7217b7e5f5-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"easy","slug":"easy"},{"name":"data-structure","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"},{"name":"algorithm","slug":"algorithm"}],"slug":"ransom-note","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}