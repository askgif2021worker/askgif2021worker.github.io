{"id":314,"title":"Uploading streaming media content to Azure","imageUrl":"ab0a0a7a-6776-4482-a691-cde8bb8165a1_azure-media-services.jpg","dateCreated":"2019-03-23T14:39:59.484Z","dateModified":"2019-03-23T14:40:34.645Z","contributedBy":"AskGif","content":"<p>I have been working at Swank Motion Pictures on a SmartTV application to offer a cloud-based on-demand streaming movie service. To do this, we upload our content to Azure Media Services assets and use OnDemand and SAS locators to stream the content on the TV. I have extracted a couple small methods into a simple class to help anyone looking to get started with uploading to Azure Media Services. While this example does not provide PlayReady DRM or other encryptions, this might be a helpful start.</p>\r\n<pre class=\"language-csharp\"><code>/// &lt;summary&gt;\r\n/// This class uploads files to Azure.\r\n/// &lt;/summary&gt;\r\npublic class SimpleAzureUploader\r\n{\r\n    private readonly CloudMediaContext _context;\r\n\r\n    /// &lt;summary&gt;\r\n    /// Initializes a new instance of the &lt;see cref=\"SimpleAzureUploader\"/&gt; class.\r\n    /// &lt;/summary&gt;\r\n    /// &lt;param name=\"accountName\"&gt;Name of the Azure Media Services account.&lt;/param&gt;\r\n    /// &lt;param name=\"accountKey\"&gt;The Account key.&lt;/param&gt;\r\n    public SimpleAzureUploader(string accountName, string accountKey)\r\n    {\r\n        _context = new CloudMediaContext(accountName, accountKey);\r\n    }\r\n\r\n    /// &lt;summary&gt;\r\n    /// Uplodas a local folder to a non-encrypted asset in Azure.\r\n    /// &lt;/summary&gt;\r\n    /// &lt;param name=\"assetName\"&gt;Name of the asset.&lt;/param&gt;\r\n    /// &lt;param name=\"path\"&gt;The directory or file path.&lt;/param&gt;\r\n    /// &lt;param name=\"concurrentTransfers\"&gt;The max number of concurrent transfers.&lt;/param&gt;\r\n    /// &lt;param name=\"parallelTransferThreads\"&gt;The max number parallel transfer threads.&lt;/param&gt;\r\n    /// &lt;returns&gt;&lt;/returns&gt;\r\n    public IAsset UploadAsset(string assetName, string path, int concurrentTransfers = 10, int parallelTransferThreads = 10)\r\n    {\r\n        var blobTransferClient = new BlobTransferClient\r\n        {\r\n            NumberOfConcurrentTransfers = concurrentTransfers,\r\n            ParallelTransferThreadCount = parallelTransferThreads\r\n        };\r\n\r\n        var asset = _context.Assets.Create(assetName, AssetCreationOptions.None);\r\n\r\n        var uploadingAccessPolicy = _context.AccessPolicies.Create(\"Upload Policy\", new TimeSpan(1, 0, 0, 0), AccessPermissions.Write | AccessPermissions.List);\r\n\r\n        var uploadingLocator = _context.Locators.CreateLocator(LocatorType.Sas, asset, uploadingAccessPolicy);\r\n\r\n        if (Directory.Exists(path) &amp;&amp; new FileInfo(path).Attributes.HasFlag(FileAttributes.Directory))\r\n        {\r\n            UploadFolder(asset, uploadingLocator, path, blobTransferClient);\r\n        }\r\n        else\r\n        {\r\n            UploadFile(asset, uploadingLocator, path, blobTransferClient);\r\n        }\r\n\r\n        uploadingLocator.Delete();\r\n        uploadingAccessPolicy.Delete();\r\n\r\n        return asset;\r\n    }\r\n\r\n    /// &lt;summary&gt;\r\n    /// Uploads the folder to the existing asset.\r\n    /// &lt;/summary&gt;\r\n    /// &lt;param name=\"asset\"&gt;The existing asset.&lt;/param&gt;\r\n    /// &lt;param name=\"locator\"&gt;The uploading locator.&lt;/param&gt;\r\n    /// &lt;param name=\"folderPath\"&gt;The folder path.&lt;/param&gt;\r\n    /// &lt;param name=\"blobTransferClient\"&gt;The blob transfer client.&lt;/param&gt;\r\n    /// &lt;exception cref=\"System.IO.FileNotFoundException\"&gt;&lt;/exception&gt;\r\n    private void UploadFolder(IAsset asset, ILocator locator, string folderPath, BlobTransferClient blobTransferClient)\r\n    {\r\n        var filePaths = Directory.GetFiles(folderPath);\r\n\r\n        if (!filePaths.Any())\r\n        {\r\n            throw new FileNotFoundException(String.Format(\"No files in directory, check folderPath: {0}\", folderPath));\r\n        }\r\n        \r\n        Task.WaitAll((from filePath\r\n                      in filePaths\r\n                      let assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath))\r\n                      select assetFile.UploadAsync(filePath, blobTransferClient, locator, CancellationToken.None)).ToArray());\r\n    }\r\n\r\n    /// &lt;summary&gt;\r\n    /// Uploads the file to the existing asset.\r\n    /// &lt;/summary&gt;\r\n    /// &lt;param name=\"asset\"&gt;The existing asset.&lt;/param&gt;\r\n    /// &lt;param name=\"locator\"&gt;The uploading locator.&lt;/param&gt;\r\n    /// &lt;param name=\"filePath\"&gt;The file path.&lt;/param&gt;\r\n    /// &lt;param name=\"blobTransferClient\"&gt;The blob transfer client.&lt;/param&gt;\r\n    private void UploadFile(IAsset asset, ILocator locator, string filePath, BlobTransferClient blobTransferClient)\r\n    {\r\n        var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\r\n        assetFile.UploadAsync(filePath, blobTransferClient, locator, CancellationToken.None).Wait();\r\n    }\r\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ab0a0a7a-6776-4482-a691-cde8bb8165a1_azure-media-services.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"uploading-streaming-media-content-to-azure","tags":[{"name":"azure","slug":"azure"},{"name":"c-sharp","slug":"c-sharp"}],"recommendations":[{"id":1336,"title":"Create Target Array in the Given Order - Array - Easy - LeetCode","imageUrl":"326883c8-e933-4afe-82e0-7147202a5a60-array.png","dateCreated":"2020-06-06T15:00:23.901Z","dateModified":"2020-06-06T15:00:45.559Z","contributedBy":"AskGif","content":"Given two arrays of integers nums and index. Your task is to create target array under the following rules:\r\nInitially, target array is empty.\r\nFrom left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.\r\nRepeat the previous step ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/326883c8-e933-4afe-82e0-7147202a5a60-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"array","slug":"array"},{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"आसान","slug":"easy"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"algorithm","slug":"algorithm"}],"slug":"create-target-array-in-the-given-order-array-easy-leetcode","total":0},{"id":1335,"title":"Groups of Special-Equivalent Strings - Easy - LeetCode","imageUrl":"777fbd8f-51f2-4c38-9d3e-eadcc18d3d71-array.png","dateCreated":"2020-06-06T09:10:12.091Z","dateModified":"2020-06-06T09:10:25.141Z","contributedBy":"AskGif","content":"You are given an array A of strings.\r\nA move onto S consists of swapping any two even indexed characters of S, or any two odd indexed characters of S.\r\nTwo strings S and T are special-equivalent if after any number of moves onto S, S == T.\r\nFor example, S = \"zzxy\" and T = \"xy","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/777fbd8f-51f2-4c38-9d3e-eadcc18d3d71-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"}],"slug":"groups-of-special-equivalent-strings-easy-leetcode","total":0},{"id":1325,"title":"Valid Parentheses - String - Easy - LeetCode","imageUrl":"0e7e76a3-03d1-47fb-b6ec-5bcc5a2a25a4-q3.jpg","dateCreated":"2020-06-04T13:38:09.626Z","dateModified":"2020-06-04T13:38:53.249Z","contributedBy":"AskGif","content":"Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\r\nAn input string is valid if:\r\nOpen brackets must be closed by the same type of brackets.\r\nOpen brackets must be closed in the correct order.\r\nNote th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0e7e76a3-03d1-47fb-b6ec-5bcc5a2a25a4-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"}],"slug":"valid-parentheses-string-easy-leetcode","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}