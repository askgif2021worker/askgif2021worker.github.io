{"id":315,"title":"How to Replace child collections in Entity Framework?","imageUrl":"d08846e7-db0b-4aff-8f1c-9980e99d0f0d_ef-delete-child.jpg","dateCreated":"2019-03-23T16:06:31.244Z","dateModified":"2019-03-23T16:06:51.168Z","contributedBy":"AskGif","content":"<p>ORMs are nice. Usually. That is until you hit a mostly unhelpful exception like &ldquo;An object with the same key already exists in the ObjectStateManager&rdquo;. I ran into this problem by trying to do a complete replacement of an entity&rsquo;s child entity collection (i.e. a Products&rsquo;s IQueryable&lt;Ingredient&gt;). To do this, you actually need to remove all of the entities from the IQueryable that need to be removed, and then add the new entities. After some frustration, I created the following extension to help me out.</p>\r\n<pre class=\"language-csharp\"><code>public static void ReplaceEntityCollection&lt;T, K&gt;(this ICollection&lt;T&gt; startingCollection, ICollection&lt;T&gt; newCollection,\r\n                                Func&lt;T, K&gt; selector )\r\n{\r\n    var newItemCompareValues = newCollection.Select(selector);\r\n    var existingItemCompareValues = startingCollection.Select(selector);\r\n\r\n    var alternativeItemsToRemove = startingCollection.Where(at =&gt; !newItemCompareValues.Contains(selector(at)));\r\n    var alternativeItemsToAdd = newCollection.Where(at =&gt; !existingItemCompareValues.Contains(selector(at)));\r\n\r\n    foreach (var alternativeItemToRemove in alternativeItemsToRemove)\r\n    {\r\n        startingCollection.Remove(alternativeItemToRemove);\r\n    }\r\n\r\n    foreach (var alternativeItemToAdd in alternativeItemsToAdd)\r\n    {\r\n        startingCollection.Add(alternativeItemToAdd);\r\n    }\r\n}</code></pre>\r\n<p>Now, I can do the following:</p>\r\n<pre class=\"language-csharp\"><code>myProduct.Ingredients.ReplaceEntityCollection(myNewIngredients, ((Ingredient i) =&gt; i.Id));</code></pre>\r\n<p>This seems to have resolved that issue!</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d08846e7-db0b-4aff-8f1c-9980e99d0f0d_ef-delete-child.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-replace-child-collections-in-entity-framework","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"entity-framework","slug":"entity-framework"}],"recommendations":[{"id":1352,"title":"Shift 2D Grid - Array - Easy - LeetCode","imageUrl":"396f6cfc-2966-4853-8c2c-4c293c9d49cf-array.png","dateCreated":"2020-06-11T07:25:28.679Z","dateModified":"2020-06-11T07:25:42.604Z","contributedBy":"AskGif","content":"Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.\r\nIn one shift operation:\r\nElement at grid[i][j] moves to grid[i][j + 1].\r\nElement at grid[i][n - 1] moves to grid[i + 1][0].\r\nElement at grid[m - 1][n - 1] moves to grid[0][0].\r\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/396f6cfc-2966-4853-8c2c-4c293c9d49cf-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"c-sharp","slug":"c-sharp"},{"name":"leetcode","slug":"leetcode"},{"name":"आसान","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"}],"slug":"shift-2d-grid-array-easy-leetcode","total":0},{"id":309,"title":"Listening to IIS Application pool recycle events in ASP.NET","imageUrl":"ab60056b-3b7a-498c-8801-22be557ee7f1_iis.jpg","dateCreated":"2019-03-23T13:27:22.297Z","dateModified":"2019-03-23T14:13:05.405Z","contributedBy":"AskGif","content":"One of my .NET apps was having some strange issues. It was attached to an IIS app pool, so it was possible that the app pool was recycling due to some other application&rsquo;s events or otherwise. I decided to create a listener to detect whenever the app pool was recycling and log what was causi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ab60056b-3b7a-498c-8801-22be557ee7f1_iis.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"listening-to-iis-application-pool-recycle-events-in-asp.net","total":0},{"id":144,"title":"How can I get the total size of a particular folder in C#?","imageUrl":"e83abf96-0566-4f2a-bc58-c4697e4bd464_folder-size.png","dateCreated":"2018-10-25T09:42:29.321Z","dateModified":"2018-10-25T09:42:29.321Z","contributedBy":"AskGif","content":"When I'm creating one application where I'm giving certain memory space to users and I want to calculate the total space he used in his folder and to show him/her the total space utilized and total remaining space that can be utilized. How can I calculate the size of the entire folder including a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e83abf96-0566-4f2a-bc58-c4697e4bd464_folder-size.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dot-net","slug":"dot-net"},{"name":"c-sharp","slug":"c-sharp"},{"name":"प्रशन","slug":"questions"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"how-can-i-get-the-total-size-of-a-particular-folder-in-c","total":0},{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"implement-merge-sort-using-c-sharp","total":0}]}