{"id":317,"title":"Learning React Native, TypeScript, and Gulp","imageUrl":"9e87f579-338f-4a1c-8c17-b968d8d08544_react.jpg","dateCreated":"2019-03-23T17:35:14.026Z","dateModified":"2019-03-23T17:35:38.938Z","contributedBy":"AskGif","content":"<p>After working with Ionic 1.x and TypeScript for quite a while, I&rsquo;ve decided to experiment with some compiles-to-native cross-platform technologies. I first decided to start with React Native. Despite having no experience with React, getting started with React Native was relatively painless, and I was able to get TypeScript to project up and running pretty quickly. Here&rsquo;s how I did it. Feel free to skip ahead to the Github repo to see the result</p>\r\n<p>&nbsp;</p>\r\n<p>1. Run through the &ldquo;Getting Started&rdquo; tutorial by Facebook.</p>\r\n<p>First, check out &ldquo;Getting Started&rdquo; to get your system configured and a React Native app started. If you&rsquo;ve already set things up once before, just init a new project with the following:</p>\r\n<pre class=\"language-javascript\"><code>react-native init AwesomeProject</code></pre>\r\n<p>2. Set up your TypeScript build system</p>\r\n<p>I personally chose Gulp as my build system, but you can swap it out with any build system so long as you get the same output (files compiled from TS to TSX). First, install the packages we need (swap yarn add with npm install --save if you use npm instead of yarn:</p>\r\n<pre class=\"language-javascript\"><code>yarn gulp gulp-tslint gulp-typescript tslint typescript --dev</code></pre>\r\n<p>Here&rsquo;s my gulpfile.js. You will want to go deeper with this (i.e. cleaning your dist/ folder before building) but this will get you started.</p>\r\n<pre class=\"language-markup\"><code>var gulp = require(\"gulp\");\r\nvar ts = require(\"gulp-typescript\");\r\nvar tslint = require(\"gulp-tslint\");\r\n\r\nvar tsProject = ts.createProject(\"tsconfig.json\", {});\r\nvar tsSrc = [\"src/**/*.ts\", \"src/**/*.tsx\"];\r\n\r\ngulp.task(\"ts:build\", function() {\r\n    return gulp.src(tsSrc)\r\n        .pipe(tslint({\r\n            formatter: \"verbose\"\r\n        }))\r\n        .pipe(tslint.report({\r\n            emitError: false\r\n        }))\r\n        .pipe(tsProject())\r\n        .js\r\n        .pipe(gulp.dest(\"dist\"))\r\n        .on(\"error\", function() {});\r\n});\r\n\r\ngulp.task(\"watch\", function() {\r\n    gulp.watch(tsSrc, [\"ts:build\"]);\r\n})</code></pre>\r\n<p>&nbsp;</p>\r\n<p>tsconfig.json:</p>\r\n<pre class=\"language-javascript\"><code>{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es2015\",\r\n        \"module\": \"es2015\",\r\n        \"jsx\": \"react\",\r\n        \"outDir\": \"build\",\r\n        \"rootDir\": \"src\",\r\n        \"allowSyntheticDefaultImports\": true,\r\n        \"noImplicitAny\": true,\r\n        \"experimentalDecorators\": true,\r\n        \"preserveConstEnums\": true,\r\n        \"allowJs\": true,\r\n        \"sourceMap\": true,\r\n        \"baseUrl\": \".\",\r\n        \"paths\": {\r\n            \"*\": [\"./src/*\"]\r\n        },\r\n        \"types\": [ \r\n            \"react\", \r\n            \"react-native\"\r\n        ]\r\n    }\r\n}</code></pre>\r\n<p>3. Install typings</p>\r\n<p>React Native is typings in the TypeScript 2.X @typings npm module family. Install using:</p>\r\n<pre class=\"language-javascript\"><code>yarn add @types/react-native --dev</code></pre>\r\n<p>4. Create an src/App.tsx file</p>\r\n<p>Start writing your app! For this example, all of the code is in the src/ folder.</p>\r\n<pre class=\"language-javascript\"><code>import React from \"react\";\r\nimport { Text } from \"react-native\";\r\n\r\nexport class App extends React.Component&lt;any, any&gt; {\r\n    public render() {\r\n        return (\r\n            &lt;Text&gt;Hello World&lt;/Text&gt;\r\n        );\r\n    }\r\n}</code></pre>\r\n<p>5. Compile your TypeScript to dist/</p>\r\n<p>If you used my gulpfile.js, just run gulp ts:build. Otherwise, just run your build with the output going to dist/. For me, this compiled dist/app.js:</p>\r\n<pre class=\"language-javascript\"><code>import React from \"react\";\r\nimport { Text } from \"react-native\";\r\nexport class App extends React.Component {\r\n    render() {\r\n        return (React.createElement(Text, null, \"Hello World\"));\r\n    }\r\n}</code></pre>\r\n<p>6. Update your index.android.js and index.ios.js</p>\r\n<p>I updated index.android.js to import the App class from the now-compiled dist/app file:</p>\r\n<pre class=\"language-javascript\"><code>import { AppRegistry } from \"react-native\";\r\nimport { App } from \"./dist/app\";\r\n\r\nAppRegistry.registerComponent(\"myfirstreactnative\", () =&gt; App);</code></pre>\r\n<p>7. You&rsquo;re done!</p>\r\n<p>That&rsquo;s it, you are now running React Native with TypeScript. Now, there are alternative ways achieve the goal of step #6 (such as changing the entry file from index.android.js to a compiled dist/ file), but I found this to be simple and effective enough. Check out the Github repo for the result.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e87f579-338f-4a1c-8c17-b968d8d08544_react.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"learning-react-native-typescript-and-gulp","tags":[{"name":"react","slug":"react"},{"name":"javascript","slug":"javascript"}],"recommendations":[{"id":448,"title":"Implementing Tab Style Login and Signup Using CSS","imageUrl":"5e7516f4-375c-4b9b-8660-17bd29cb440a_Css_design.jpg","dateCreated":"2019-08-22T08:42:23.589Z","dateModified":"2019-08-22T08:42:36.962Z","contributedBy":"AskGif","content":"This post is very basic level CSS implementation. I want to explain how to design tab style login and registration panel with CSS, HTML, and Jquery. Tab system helps you to save page space, Just take a quick look at these four steps, use it and enrich your web projects.&nbsp;\r\n&nbsp;\r\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5e7516f4-375c-4b9b-8660-17bd29cb440a_Css_design.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"css3","slug":"css3"},{"name":"javascript","slug":"javascript"}],"slug":"implementing-tab-style-login-and-signup-using-css","total":0},{"id":420,"title":"Replace URL with HTML Link with Javascript and Jquery Plugins","imageUrl":"252b7816-81ff-4157-a44b-1fcda2a1a104_plugins.jpg","dateCreated":"2019-08-14T12:22:04.84Z","dateModified":"2019-08-22T10:58:44.348Z","contributedBy":"AskGif","content":"This post contains useful jquery plugins and javascript tip how to replace text URL to HTML links. I had tried these plug-ins at labs.askgif. I hope it's very useful for your social media web projects. Thanks!\r\n&nbsp;\r\nJavascript Text to Link\r\n<pre class=\"language-javascript\"><c","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/252b7816-81ff-4157-a44b-1fcda2a1a104_plugins.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"javascript","slug":"javascript"}],"slug":"replace-url-with-html-link-with-javascript-and-jquery-plugins","total":0},{"id":418,"title":"Count and Show Live Character in a Meter with Jquery.","imageUrl":"81050176-2db7-4955-b030-f01084c4a1a0_livecountjquery.jpg","dateCreated":"2019-08-14T09:56:23.772Z","dateModified":"2019-08-26T11:10:20.972Z","contributedBy":"AskGif","content":"In this post, I want to explain how to do live character or word count meter using Jquery. It is interesting and simple just ten lines of java script code. Use it and enrich your web applications with jquery.&nbsp;\r\n&nbsp;\r\nJavascript code\r\n$('#contentbox').keyup(function(){}","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/81050176-2db7-4955-b030-f01084c4a1a0_livecountjquery.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"javascript","slug":"javascript"},{"name":"jquery","slug":"jquery"}],"slug":"count-and-show-live-character-in-a-meter-with-jquery","total":0},{"id":296,"title":"What are Angular TypeScript Decorators in object-oriented front-end applications ?","imageUrl":"78201682-3caa-41be-accf-af9179653c34_angular-decorators.jpg","dateCreated":"2019-03-20T15:50:07.168Z","dateModified":"2019-03-22T05:16:15.61Z","contributedBy":"AskGif","content":"I've taken up TypeScript over the last few months, and it is such a breath of fresh air. TypeScript has quickly become one of my favorite languages to develop in, especially on the front-end. One of my favorite features is TypeScript Decorators, and I&rsquo;ve been taking advantage of them to tri","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/78201682-3caa-41be-accf-af9179653c34_angular-decorators.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"typescript","slug":"typescript"},{"name":"c-sharp","slug":"c-sharp"},{"name":"javascript","slug":"javascript"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"ionic-framework","slug":"ionic-framework"},{"name":"Angular-JS","slug":"angular-js"}],"slug":"what-are-angular-typescript-decorators-in-object-oriented-front-end-applications-","total":0}]}