{"id":35,"title":"Implement Merge Sort Using C-Sharp","imageUrl":"afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","dateCreated":"2018-07-19T05:35:20.326Z","dateModified":"2018-07-19T05:35:32.691Z","contributedBy":"AskGif","content":"<p>In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945. A detailed description and analysis of bottom-up mergesort appeared in a report by Goldstine and von Neumann as early as 1948.</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\n\r\nnamespace MergeSort\r\n{\r\n    class Program\r\n    {\r\n        private static void PrintArray(int[] arr)\r\n        {\r\n            for(int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                Console.Write(arr[i] + \" \");\r\n            }\r\n            Console.WriteLine();\r\n        }\r\n\r\n        private static void Merge(int[] arr, int start, int mid, int end)\r\n        {\r\n            int[] temp = new int[arr.Length];\r\n            int i = start;\r\n            int j = mid;\r\n            int k = 0;\r\n            while(i&lt;mid &amp;&amp; j &lt; end)\r\n            {\r\n                if (arr[i] &lt; arr[j])\r\n                {\r\n                    temp[k] = arr[i];\r\n                    i++;\r\n                    k++;\r\n                }\r\n                else\r\n                {\r\n                    temp[k] = arr[j];\r\n                    j++;\r\n                    k++;\r\n                }\r\n            }\r\n\r\n            while (i &lt; mid)\r\n            {\r\n                temp[k] = arr[i];\r\n                k++;\r\n                i++;\r\n            }\r\n\r\n            while( j &lt; end)\r\n            {\r\n                temp[k] = arr[j];\r\n                k++;\r\n                j++;\r\n            }\r\n\r\n            for(int x = start, y=0; x &lt; end; x++,y++)\r\n            {\r\n                arr[x] = temp[y];\r\n            }\r\n        }\r\n\r\n        private static void MergeSortUtil(int[] arr, int start, int end)\r\n        {\r\n            if (end &gt; start)\r\n            {\r\n                int mid = (start + end) / 2;\r\n                MergeSortUtil(arr, start, mid);\r\n                MergeSortUtil(arr, mid + 1, end);\r\n                Merge(arr, start, mid, end);\r\n            }\r\n        }\r\n\r\n        private static void MergeSort(int[] arr)\r\n        {\r\n            MergeSortUtil(arr, 0, arr.Length);\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            int[] arr = new int[]{ 4, 7, 2, 8, 1, 9, 3, 5, 6 };\r\n            PrintArray(arr);\r\n            MergeSort(arr);\r\n            PrintArray(arr);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>This is using divide and conquer approach and Time Complexity of the above solution is O(nlogn).</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afd5c0fc-11e4-4b0d-b893-9ce977173328_merge_sort.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"implement-merge-sort-using-c-sharp","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"sorting","slug":"sorting"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"recommendations":[{"id":1726,"title":"Maximum Swap - Array - Medium - LeetCode","imageUrl":"icon_16589057-204a-4929-8beb-ec745719515b.jpg","dateCreated":"2021-03-04T10:15:19.693Z","dateModified":"2021-03-04T10:16:54.289Z","contributedBy":"sumitc91","content":"Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.\nExample 1:<br />Input: 2736<br />Output: 7236<br />Explanation: Swap the number 2 and the number 7.<br />Example 2:<br />Input: 9973<br />O","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/16589057-204a-4929-8beb-ec745719515b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"maximum-swap-array-medium-leetcode","total":0},{"id":1694,"title":"What is Domain name system (DNS)?","imageUrl":"icon_5d73c05a-94c0-45e6-b648-a89025ffe4e8.png","dateCreated":"2020-11-20T07:33:27.184Z","dateModified":"2020-11-20T07:33:33.359Z","contributedBy":"sumitc91","content":"A Domain Name System (DNS) translates a domain name such as www.example.com to an IP address.\nDNS is hierarchical, with a few authoritative servers at the top level. Your router or ISP provides information about which DNS server(s) to contact when doing a lookup. Lower level DNS servers ca","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5d73c05a-94c0-45e6-b648-a89025ffe4e8.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"what-is-domain-name-system-dns","total":0},{"id":1669,"title":"Maximum Product Subarray - Array - Medium - LeetCode","imageUrl":"icon_7f1afad0-6986-4b75-b8b1-48cc2da5b308.jpg","dateCreated":"2020-11-17T12:27:09.279Z","dateModified":"2020-11-17T12:27:13.842Z","contributedBy":"sumitc91","content":"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\nExample 1:\nInput: [2,3,-2,4]<br />Output: 6<br />Explanation: [2,3] has the largest product 6.<br />Example 2:\nInput: [-2,0,-1]<br />Outpu","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7f1afad0-6986-4b75-b8b1-48cc2da5b308.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"maximum-product-subarray-array-medium-leetcode","total":0},{"id":1609,"title":"Customers Who Never Order - Sql - Easy - LeetCode","imageUrl":"icon_3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","dateCreated":"2020-10-16T07:20:40.745Z","dateModified":"2020-10-16T07:20:46.124Z","contributedBy":"sumitc91","content":"Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.\nTable: Customers.\n+----+-------+<br />| Id | Name &nbsp;|<br />+----+-------+<br />| 1 &nbsp;| Joe &nbsp; |<br />| 2 &nbsp;| Henry ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"customers-who-never-order-sql-easy-leetcode","total":0}]}