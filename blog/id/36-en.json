{"id":36,"title":"Implement Quick Sort Using C-Sharp.","imageUrl":"ac952349-b324-4976-91ac-a217eabcde0f_Sorting_quicksort_anim.gif","dateCreated":"2018-07-19T07:01:11.967Z","dateModified":"2018-07-19T07:01:25.109Z","contributedBy":"AskGif","content":"<p>Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm, serving as a systematic method for placing the elements of an array in order. Developed by Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it can be about two or three times faster than its main competitors, merge sort and heapsort.[contradictory]</p>\r\n<p>Quicksort is a comparison sort, meaning that it can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. In an efficient implementation it is not a stable sort, meaning that the relative order of equal sort items is not preserved. Quicksort can operate in-place on an array, requiring small additional amounts of memory to perform the sorting. It is very similar to selection sort, except that it does not always choose the worst-case partition.</p>\r\n<pre class=\"language-csharp\"><code>using System;\r\n\r\nnamespace QuickSort\r\n{\r\n    class Program\r\n    {\r\n        private static void PrintArray(int[] arr)\r\n        {\r\n            for(int i = 0; i &lt; arr.Length; i++)\r\n            {\r\n                Console.Write(arr[i] + \" \");\r\n            }\r\n            Console.WriteLine();\r\n        }\r\n\r\n        private static int Partition(int[] arr, int start, int end)\r\n        {\r\n            int pivot = arr[end];\r\n            int i = start-1;\r\n\r\n            for(int j = start; j &lt; end; j++)\r\n            {\r\n                if (arr[j] &lt; pivot)\r\n                {\r\n                    i++;\r\n                    int tempVar = arr[i];\r\n                    arr[i] = arr[j];\r\n                    arr[j] = tempVar;\r\n                }\r\n            }\r\n\r\n            int temp = arr[i + 1];\r\n            arr[i + 1] = pivot;\r\n            arr[end] = temp;\r\n\r\n            return (i + 1);\r\n        }\r\n\r\n        private static void QuickSortUtil(int[] arr, int start, int end)\r\n        {\r\n            if(end &gt; start)\r\n            {\r\n                int pivot = Partition(arr, start, end);\r\n                QuickSortUtil(arr, start, pivot - 1);\r\n                QuickSortUtil(arr, pivot + 1, end);\r\n            }\r\n        }\r\n\r\n        private static void QuickSort(int[] arr)\r\n        {\r\n            QuickSortUtil(arr, 0, arr.Length-1);\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            int[] arr = new int[] { 4, 7, 2, 8, 1, 9, 3, 5, 6 };\r\n            PrintArray(arr);\r\n            QuickSort(arr);\r\n            PrintArray(arr);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Output :</p>\r\n<pre class=\"language-markup\"><code>4 7 2 8 1 9 3 5 6\r\n1 2 3 4 5 6 7 8 9\r\nPress any key to continue . . .</code></pre>\r\n<p>The Time complexity of above Solution is O(nlogn). it is using Divide and Conquer approach.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ac952349-b324-4976-91ac-a217eabcde0f_Sorting_quicksort_anim.gif","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"implement-quick-sort-using-c-sharp","tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"},{"name":"sorting","slug":"sorting"}],"recommendations":[{"id":1695,"title":"Content delivery network (CDN)","imageUrl":"icon_57adef3f-d788-4753-bda7-a12a6bc0d462.jpg","dateCreated":"2020-11-20T07:35:23.915Z","dateModified":"2020-11-20T07:35:35.322Z","contributedBy":"sumitc91","content":"A content delivery network (CDN) is a globally distributed network of proxy servers, serving content from locations closer to the user. Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN, although some CDNs such as Amazon's CloudFront support dynamic content. The ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/57adef3f-d788-4753-bda7-a12a6bc0d462.jpg","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"content-delivery-network-cdn","total":0},{"id":1662,"title":"Search in Rotated Sorted Array II - Array - Medium - LeetCode","imageUrl":"icon_f90b9cf1-f98d-483f-9cb6-f0ccc23c9c57.jpg","dateCreated":"2020-11-10T06:51:27.488Z","dateModified":"2020-11-10T06:51:33.729Z","contributedBy":"sumitc91","content":"Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).\nYou are given a target value to search. If found in the array return true, otherwise return false.\nExample 1:\nInput: num","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f90b9cf1-f98d-483f-9cb6-f0ccc23c9c57.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"search-in-rotated-sorted-array-ii-array-medium-leetcode","total":0},{"id":1638,"title":"Next Permutation - Array - Medium - LeetCode","imageUrl":"icon_467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","dateCreated":"2020-10-24T11:58:46.632Z","dateModified":"2020-10-24T11:59:00.039Z","contributedBy":"sumitc91","content":"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\nThe replacement must be in place and use ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/467cc3d1-390e-4bc6-a589-9f2b2a7b6f67.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"data-structure","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"medium","slug":"medium"}],"slug":"next-permutation-array-medium-leetcode","total":0},{"id":1609,"title":"Customers Who Never Order - Sql - Easy - LeetCode","imageUrl":"icon_3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","dateCreated":"2020-10-16T07:20:40.745Z","dateModified":"2020-10-16T07:20:46.124Z","contributedBy":"sumitc91","content":"Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.\nTable: Customers.\n+----+-------+<br />| Id | Name &nbsp;|<br />+----+-------+<br />| 1 &nbsp;| Joe &nbsp; |<br />| 2 &nbsp;| Henry ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"customers-who-never-order-sql-easy-leetcode","total":0}]}