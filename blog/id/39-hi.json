{"id":39,"title":"Find total ways to reach the nth stair using step 1, 2 or 3.","imageUrl":"c6232f16-4b85-4461-b18d-31e1c54de4a6_frog.jpg","dateCreated":"2018-07-20T09:06:49.744Z","dateModified":"2018-07-20T09:07:07.17Z","contributedBy":"AskGif","content":"<p>A frog is jumping up a staircase with n steps and can hop either 1 step, 2 steps, or 3 steps at a time.</p>\r\n<p>Implement a method to count how many possible ways the frog can run up the stairs.</p>\r\n<p>We will be using recursive approach first to solve this problem</p>\r\n<pre class=\"language-java\"><code>public class StepsCountDP {\r\n\r\n\tprivate static int DiffJumpsCount(int totalStairs) {\r\n\t\tif(totalStairs == 0)\r\n\t\t\treturn 1;\r\n\t\telse if(totalStairs == 1)\r\n\t\t\treturn 1;\r\n\t\telse if(totalStairs == 2)\r\n\t\t\treturn 2;\r\n\t\telse\r\n\t\t\treturn DiffJumpsCount(totalStairs-1) +\r\n\t\t\t\t\tDiffJumpsCount(totalStairs - 2) +\r\n\t\t\t\t\tDiffJumpsCount(totalStairs - 3);\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint totalStairs = 4;\r\n\t\tSystem.out.println(DiffJumpsCount(totalStairs));\r\n\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<p>We can store the previously computed result as well in the above case to make it more optimized.&nbsp;</p>\r\n<p>The Dynamic Programming Approach for the above problem is below :</p>\r\n<pre class=\"language-java\"><code>public class StepsCountDP {\r\n\r\n\tprivate static int DiffJumpsCount(int totalStairs) {\r\n\t\t\r\n\t\tint[] arr = new int[totalStairs+1];\r\n\t\tarr[0] = 1;\r\n\t\tarr[1] = 1;\r\n\t\tarr[2] = 2;\r\n\t\t\r\n\t\tfor(int i= 3 ; i&lt; totalStairs+1;i++) {\r\n\t\t\tarr[i]=arr[i-1]+arr[i-2]+arr[i-3];\r\n\t\t}\r\n\t\treturn arr[totalStairs];\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint totalStairs = 4;\r\n\t\tSystem.out.println(DiffJumpsCount(totalStairs));\r\n\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<p>Output :</p>\r\n<pre class=\"language-markup\"><code>7</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c6232f16-4b85-4461-b18d-31e1c54de4a6_frog.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"find-total-ways-to-reach-the-nth-stair-using-step-1-2-or-3","tags":[{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"recursion","slug":"recursion"},{"name":"algorithm","slug":"algorithm"},{"name":"java","slug":"java"},{"name":"interview","slug":"interview"}],"recommendations":[{"id":1693,"title":"उपलब्धता बनाम संगति","imageUrl":"icon_a22695c8-b2d8-4ca6-8546-265c07e566d7.png","dateCreated":"2020-11-20T07:30:12.189Z","dateModified":"2020-11-20T07:30:26.472Z","contributedBy":"sumitc91","content":"कैप प्रमेय\nएक वितरित कंप्यूटर सिस्टम में, आप केवल दो गारंटियों का समर्थन कर सकते हैं:\nसंगति - हर पढ़ने को सबसे हालिया लेखन या एक त्रुटि प्राप्त होती है<br />उपलब्धता - हर अनुरोध को एक प्रतिक्रिया मिलती है, बिना गारंटी के कि इसमें जानकारी का सबसे हाल का संस्करण है<br />विभाजन सहिष्णु","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a22695c8-b2d8-4ca6-8546-265c07e566d7.png","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"availability-vs-consistency","total":0},{"id":1664,"title":"Design an Ordered Stream - Array - Easy - LeetCode","imageUrl":"icon_ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","dateCreated":"2020-11-16T03:10:10.642Z","dateModified":"2020-11-16T03:10:15.886Z","contributedBy":"sumitc91","content":"There are n (id, value) pairs, where id is an integer between 1 and n and value is a string. No two pairs have the same id.\nDesign a stream that takes the n pairs in an arbitrary order, and returns the values over several calls in increasing order of their ids.\nImplement the Ordered","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee2c2f78-fadb-4eec-b972-5425cc0c84b8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"design-an-ordered-stream-array-easy-leetcode","total":0},{"id":1617,"title":"Relative Ranks - Array - Easy - LeetCode","imageUrl":"icon_999e367f-6673-49be-9d6a-411dd5e1e1e2.jpg","dateCreated":"2020-10-17T05:30:58.485Z","dateModified":"2020-10-17T05:31:07.765Z","contributedBy":"sumitc91","content":"Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\nExample 1:<br />Input: [5, 4, 3, 2, 1]<br />Output: [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]<","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/999e367f-6673-49be-9d6a-411dd5e1e1e2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"relative-ranks-array-easy-leetcode","total":0},{"id":1609,"title":"Customers Who Never Order - Sql - Easy - LeetCode","imageUrl":"icon_3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","dateCreated":"2020-10-16T07:20:40.745Z","dateModified":"2020-10-16T07:20:46.124Z","contributedBy":"sumitc91","content":"Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.\nTable: Customers.\n+----+-------+<br />| Id | Name &nbsp;|<br />+----+-------+<br />| 1 &nbsp;| Joe &nbsp; |<br />| 2 &nbsp;| Henry ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3979029e-3ead-4244-a16d-a1344d80e6ec.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"mysql","slug":"mysql"},{"name":"sql","slug":"sql"}],"slug":"customers-who-never-order-sql-easy-leetcode","total":0}]}