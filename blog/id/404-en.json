{"id":404,"title":"Hosting ASP.NET Core in Docker","imageUrl":"f952156f-643a-4dff-8c46-88129bed8ede_dockerise-aspnetcore-app.jpg","dateCreated":"2019-06-24T15:35:42.674Z","dateModified":"2019-06-25T02:57:20.863Z","contributedBy":"AskGif","content":"<p>The containerization trend has been growing for a while now in the industry. The idea is to &ldquo;containerize&rdquo; (or package) any application into a well-defined container. This allows the same packaged application to be deployed to run on any infrastructure.</p>\r\n<p>&nbsp;</p>\r\n<p>In other words, placing your application in a container allows you to run the exact same &ldquo;image&rdquo; wherever you want. That could be:</p>\r\n<p>&nbsp;</p>\r\n<p>Amazon AWS</p>\r\n<p>Azure</p>\r\n<p>Heroku</p>\r\n<p>On-premise self-hosting</p>\r\n<p>Local development environments</p>\r\n<p>In the .NET ecosystem, ASP.NET Core applications are well-suited to take advantage of this movement. This post explores how to get started running ASP.NET Core applications in Docker containers.</p>\r\n<p>&nbsp;</p>\r\n<p>Environment setup for Docker</p>\r\n<p>Ensure that Hyper-V is enabled on your computer</p>\r\n<p>Install Docker for Windows</p>\r\n<p>Enable the Containers Windows feature</p>\r\n<p>&nbsp;</p>\r\n<p>Environment setup for .NET core</p>\r\n<p>Do at least one these steps:</p>\r\n<p>&nbsp;</p>\r\n<p>Install Visual Studio 2015 (and apply Visual Studio 2015 Update 3)</p>\r\n<p>Install the .NET Core 1.1 SDK</p>\r\n<p>Creating the application</p>\r\n<p>Now let&rsquo;s create a basic ASP.NET Core application. We&rsquo;ll use this application as the deploy target for Docker below.</p>\r\n<pre class=\"language-markup\"><code>mkdir app\r\ncd app\r\ndotnet new -t web</code></pre>\r\n<p>Building the application</p>\r\n<p>To build the application, we&rsquo;ll need to restore the packages referenced in the project.json file.</p>\r\n<pre class=\"language-markup\"><code>dotnet restore</code></pre>\r\n<p>After the packages are restored, we can build the application.</p>\r\n<pre class=\"language-markup\"><code>dotnet build</code></pre>\r\n<p>Running the application</p>\r\n<p>To run the application:</p>\r\n<pre class=\"language-markup\"><code>dotnet run</code></pre>\r\n<p>This should show output similar to the following:</p>\r\n<pre class=\"language-markup\"><code>Project app (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.\r\ninfo: Microsoft.Extensions.DependencyInjection.DataProtectionServices[0]\r\nHosting environment: Production\r\nContent root path: c:\\PROJECTS\\docker-aspnet-core-examples\\app\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.</code></pre>\r\n<p>As indicated, the application will be available at http://localhost:5000.</p>\r\n<p>&nbsp;</p>\r\n<p>Creating the Dockerfile</p>\r\n<p>Now that we have an application, let&rsquo;s move it into a Docker container.</p>\r\n<p>&nbsp;</p>\r\n<p>To do this, create a file named Dockerfile. Include Dockerfile in the publish options of the project.json file.</p>\r\n<pre class=\"language-javascript\"><code>...\r\n\"publishOptions\": {\r\n    \"include\": [\r\n        \"wwwroot\",\r\n        \"**/*.cshtml\",\r\n        \"appsettings.json\",\r\n        \"web.config\",\r\n        \"Dockerfile\"\r\n    ]\r\n},\r\n...</code></pre>\r\n<p>Publishing the application</p>\r\n<p>Before moving on to hosting the application in Docker, we first need to publish the application.</p>\r\n<pre class=\"language-markup\"><code>dotnet publish</code></pre>\r\n<p>This publishes the application and all of its dependencies into a single directory for deployment.</p>\r\n<p>&nbsp;</p>\r\n<p>Hosting in Docker</p>\r\n<p>Kestrel is a cross-platform HTTP server. We&rsquo;ll use that to host the ASP.NET Core application in each of the Docker configurations below.</p>\r\n<p>&nbsp;</p>\r\n<p>Hosting in Linux</p>\r\n<p>The first Docker configuration we&rsquo;ll examine is hosting the application in Linux. We&rsquo;ll use the ASP.NET Core Docker Image as the base image for the Docker container.</p>\r\n<p>&nbsp;</p>\r\n<p>Place the following contents into Dockerfile:</p>\r\n<pre class=\"language-markup\"><code>FROM microsoft/aspnetcore:1.0\r\nENTRYPOINT [\"dotnet\", \"app.dll\"]\r\nARG source=.\r\nWORKDIR /app\r\nEXPOSE 80\r\nCOPY $source .</code></pre>\r\n<p>Then we need to re-publish the application (to place the Dockerfile alongside the published application).</p>\r\n<pre class=\"language-markup\"><code>dotnet publish</code></pre>\r\n<p>Next, build a Docker image containing the application.</p>\r\n<pre class=\"language-markup\"><code>docker build bin\\Debug\\netcoreapp1.0\\publish -t apponlinux</code></pre>\r\n<p>If this is the first time you&rsquo;ve made a container based on microsoft/aspnetcore:1.0, that base container will be downloaded. After that, a specific image will be created.</p>\r\n<p>&nbsp;</p>\r\n<p>You can see the container by running the docker images command:</p>\r\n<pre class=\"language-markup\"><code>REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE\r\napponlinux             latest              9d9bf2fce243        4 seconds ago       289 MB</code></pre>\r\n<p>Now that we have an image, let&rsquo;s start the container.</p>\r\n<pre class=\"language-markup\"><code>docker run -it --name linuxcontainer -d -p 85:80 apponlinux</code></pre>\r\n<p>That command starts an instance (named linuxcontainer) of the apponlinux image we created earlier. It also proxies port 80 on the instance to port 85 locally.</p>\r\n<p>&nbsp;</p>\r\n<p>You can see a list of running containers using the docker ps command.</p>\r\n<pre class=\"language-markup\"><code>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                NAMES\r\n4e68b9721bd1        apponlinux          \"dotnet app.dll\"    6 seconds ago       Up 5 seconds   </code></pre>\r\n<p>The application will be available at http://localhost:85/.</p>\r\n<p>&nbsp;</p>\r\n<p>When you&rsquo;re done with the container, you can stop it using the docker stop command.</p>\r\n<pre class=\"language-markup\"><code>docker stop linuxcontainer</code></pre>\r\n<p>Hosting in Windows</p>\r\n<p>When running on a Windows host, Docker can also host Windows containers. To do this, first, switch your Docker instance to run Windows containers.</p>\r\n<p>&nbsp;</p>\r\n<p>For Windows hosting, Windows Nano Server is a good target. Windows Nano Server is a stripped down version of Windows Server. It has a much smaller footprint (than Windows Server Core) and is designed for cloud and DevOps scenarios.</p>\r\n<p>&nbsp;</p>\r\n<p>In order to switch from Linux to Windows Nano Server, only two changes need to be made to the Dockerfile:</p>\r\n<p>&nbsp;</p>\r\n<p>The FROM line changed to point to a different base image</p>\r\n<p>Adding the ASPNETCORE_URLS environment variable</p>\r\n<p>When complete, the Dockerfile will have the following content:</p>\r\n<pre class=\"language-markup\"><code>FROM microsoft/dotnet:nanoserver\r\nENTRYPOINT [\"dotnet\", \"app.dll\"]\r\nARG source=.\r\nWORKDIR /app\r\nENV ASPNETCORE_URLS http://+:80\r\nEXPOSE 80\r\nCOPY $source .</code></pre>\r\n<p>Other than those changes, the steps are the same (with some names changed to keep the images and containers unique).</p>\r\n<pre class=\"language-markup\"><code>dotnet publish\r\ndocker build bin\\Debug\\netcoreapp1.0\\publish -t apponnano\r\ndocker run -it --name nanocontainer -d -p 85:80 apponnano</code></pre>\r\n<p>Ideally, at this point, you&rsquo;d be able to access the application at http://localhost:85. Unfortunately, at the moment there is a bug with Windows 10 that prevents that. So, you&rsquo;ll need to look up the IP address of the container and access it that way.</p>\r\n<p>&nbsp;</p>\r\n<p>To do this, use the docker inspect command to find the IP address.</p>\r\n<pre class=\"language-markup\"><code>docker inspect -f \"{{ .NetworkSettings.Networks.nat.IPAddress }}\" nanocontainer</code></pre>\r\n<p>Then you&rsquo;ll be able to access the application at that IP address (on port 80).</p>\r\n<p>&nbsp;</p>\r\n<p>What&rsquo;s next?</p>\r\n<p>It&rsquo;s not recommended to run Kestrel as your frontline web server. So, the <a title=\"Nginx Reverse Proxy to ASP.NET Core &ndash; In Same Docker Container\" href=\"../../../../../blog/405/nginx-reverse-proxy-to-asp-net-core-in-same-docker-container/\" target=\"_blank\" rel=\"noopener\">next step (Nginx Reverse Proxy to ASP.NET Core &ndash; In Same Docker Container)</a> would be to place a reverse proxy in front of your application.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f952156f-643a-4dff-8c46-88129bed8ede_dockerise-aspnetcore-app.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"hosting-asp.net-core-in-docker","tags":[{"name":"docker","slug":"docker"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"dotnet-core","slug":"dotnet-core"},{"name":"nginx","slug":"nginx"}],"recommendations":[{"id":305,"title":"Correct way to Inject MVC and HTTP attributes and filters using Ninject","imageUrl":"8613db06-a70f-4441-8984-8dcdcfeaae34_net-dependency-injection-ninja-with-ninject.jpg","dateCreated":"2019-03-21T16:03:24.217Z","dateModified":"2019-03-21T16:03:53.399Z","contributedBy":"AskGif","content":"Ninject has some fun quirks. For instance, one \"bug\" I came across was that if you hit an ASP.NET controller with a custom attribute, the attribute&rsquo;s constructor-injected dependencies would be null on startup. For example, take the following ActionFilterAttribute:\r\n<pre class=\"language-","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8613db06-a70f-4441-8984-8dcdcfeaae34_net-dependency-injection-ninja-with-ninject.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"mvc-5","slug":"mvc-5"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"ninject","slug":"ninject"}],"slug":"correct-way-to-inject-mvc-and-http-attributes-and-filters-using-ninject","total":0},{"id":304,"title":"Ninjecting in App_Start classes and static classes","imageUrl":"ed92c0eb-fd29-40e4-b0c9-6401f9dcb75a_ninject-logo.jpg","dateCreated":"2019-03-21T15:40:22.829Z","dateModified":"2019-03-21T16:03:44.549Z","contributedBy":"AskGif","content":"Let's say you are doing some work on your AuthConfig class, in your Global.asax, or maybe a static class. You can&rsquo;t property-inject, and generally, it&rsquo;s a pain to get this to work.\r\n&nbsp;\r\nHowever, if you&rsquo;re using Ninject for ASP.NET MVC, you can use the following","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ed92c0eb-fd29-40e4-b0c9-6401f9dcb75a_ninject-logo.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"mvc-5","slug":"mvc-5"},{"name":"c-sharp","slug":"c-sharp"},{"name":"ninject","slug":"ninject"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"ninjecting-in-app_start-classes-and-static-classes","total":0},{"id":144,"title":"How can I get the total size of a particular folder in C#?","imageUrl":"e83abf96-0566-4f2a-bc58-c4697e4bd464_folder-size.png","dateCreated":"2018-10-25T09:42:29.321Z","dateModified":"2018-10-25T09:42:29.321Z","contributedBy":"AskGif","content":"When I'm creating one application where I'm giving certain memory space to users and I want to calculate the total space he used in his folder and to show him/her the total space utilized and total remaining space that can be utilized. How can I calculate the size of the entire folder including a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e83abf96-0566-4f2a-bc58-c4697e4bd464_folder-size.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dot-net","slug":"dot-net"},{"name":"c-sharp","slug":"c-sharp"},{"name":"questions","slug":"questions"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"how-can-i-get-the-total-size-of-a-particular-folder-in-c","total":0},{"id":5,"title":"How Can I Install Nginx on AWS EC2 Ubuntu 16.04 Machine and host Multiple Websites.","imageUrl":"78354fdb-9e8d-43be-a51a-75dc508974e5_NGINX-On-Ubuntu-1200x1200.jpg","dateCreated":"2018-07-02T12:43:39.373Z","dateModified":"2018-07-02T16:12:00.428Z","contributedBy":"AskGif","content":"Nginx ( /ˌɛndʒɪnˈɛks/ EN-jin-EKS[8]) (stylized as NGINX, NGiИX or nginx) is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. The software was created by Igor Sysoev and first publicly released in 2004. A company of the same name was founded in 2011","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/78354fdb-9e8d-43be-a51a-75dc508974e5_NGINX-On-Ubuntu-1200x1200.jpg","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"ec2","slug":"ec2"},{"name":"nginx","slug":"nginx"},{"name":"ubuntu","slug":"ubuntu"}],"slug":"how-can-i-install-nginx-on-aws-ec2-ubuntu-16.04-machine-and-host-multiple-websites","total":0}]}