{"id":405,"title":"Nginx Reverse Proxy to ASP.NET Core In Same Docker Container","imageUrl":"851b560d-0263-4e5d-9426-f7dad119ba6c_target-architecture-docker-nginx-ketrel.png","dateCreated":"2019-06-25T02:25:00.552Z","dateModified":"2019-06-26T08:34:17.75Z","contributedBy":"AskGif","content":"<p>As mentioned in the <a title=\"Hosting ASP.NET Core in Docker\" href=\"../../../../blog/404/hosting-asp-net-core-in-docker/\" target=\"_blank\" rel=\"noopener\">previous post (Hosting ASP.NET Core in Docker)</a>, it is recommended to use something other than Kestrel as the front-line web server. In this example, I&rsquo;m going to show how to use Nginx as a reverse proxy to the ASP.NET Core application.</p>\r\n<p>&nbsp;</p>\r\n<p>Reverse-proxy architecture options</p>\r\n<p>In terms of architecture setup for reverse proxying for ASP.NET Core in Docker, there are a couple of options.</p>\r\n<p>&nbsp;</p>\r\n<p>The first option is to run Nginx within the same container as the ASP.NET Core application. This is the option shown in this post.</p>\r\n<p>&nbsp;</p>\r\n<p>The other option is to run Nginx as a separate Docker container. In that setup, the communication would be proxied over a network bridge between the Nginx container and the containers hosting the application. This second approach will be shown in the next post.</p>\r\n<p>&nbsp;</p>\r\n<p>Creating the application</p>\r\n<p>Again for this example, I&rsquo;ll just be using the default web application generated by the .NET Core CLI.</p>\r\n<p>&nbsp;</p>\r\n<p>To create that application, run the following commands:</p>\r\n<pre class=\"language-markup\"><code>mkdir app\r\ncd app\r\ndotnet new -t web\r\ndotnet restore\r\ndotnet build</code></pre>\r\n<p>And the publish the application (to package it up for the Docker container):</p>\r\n<pre class=\"language-markup\"><code>dotnet publish</code></pre>\r\n<p>Building the image</p>\r\n<p>The Docker image will be based on the microsoft/aspnetcore:1.0 image used previously. It will be modified to include Nginx. That will allow Nginx to use a fairly standard reverse proxy configuration while also running the Kestrel process.</p>\r\n<p>&nbsp;</p>\r\n<p>Dockerfile configuration</p>\r\n<p>Create a Dockerfile and include the following contents:</p>\r\n<pre class=\"language-markup\"><code>FROM microsoft/aspnetcore:1.0\r\n \r\nRUN apt-get update\r\nRUN apt-get install -y nginx\r\n \r\nWORKDIR /app\r\nCOPY bin/Debug/netcoreapp1.0/publish .\r\n \r\nCOPY ./startup.sh .\r\nRUN chmod 755 /app/startup.sh\r\n \r\nRUN rm /etc/nginx/nginx.conf\r\nCOPY nginx.conf /etc/nginx\r\n \r\nENV ASPNETCORE_URLS http://+:5000\r\nEXPOSE 5000 80\r\n \r\nCMD [\"sh\", \"/app/startup.sh\"]</code></pre>\r\n<p>Let&rsquo;s deconstruct what&rsquo;s going on there&hellip;</p>\r\n<p>&nbsp;</p>\r\n<p>Line 1 specifies that the image will use the same microsoft/aspnetcore:1.0 base as previous examples.</p>\r\n<p>&nbsp;</p>\r\n<p>Lines 3-4 install the nginx package (and all of its dependencies) from the Debian package management store.</p>\r\n<p>&nbsp;</p>\r\n<p>Lines 6-7 setup the /app directory and place the ASP.NET Core application within that directory.</p>\r\n<p>&nbsp;</p>\r\n<p>Lines 9-10 set up a start-up script (explained in greater detail below).</p>\r\n<p>&nbsp;</p>\r\n<p>Lines 12-13 replace the out-of-the-box Nginx configuration file with a custom configuration.</p>\r\n<p>&nbsp;</p>\r\n<p>Line 15 configures Kestrel to listen to port 5000.</p>\r\n<p>&nbsp;</p>\r\n<p>Line 16 exposes port 80 to the outside world.</p>\r\n<p>&nbsp;</p>\r\n<p>Line 18 invokes the start-up script that we&rsquo;ll define shortly.</p>\r\n<p>&nbsp;</p>\r\n<p>Nginx configuration</p>\r\n<p>Now we need to create the nginx.conf file referenced in the Dockerfile. In the same directory, create nginx.conf and place the following contents into it:</p>\r\n<pre class=\"language-markup\"><code>worker_processes 4;\r\n \r\nevents { worker_connections 1024; }\r\n \r\nhttp {\r\n    sendfile on;\r\n \r\n    upstream app_servers {\r\n        server 127.0.0.1:5000;\r\n    }\r\n \r\n    server {\r\n        listen 80;\r\n \r\n        location / {\r\n            proxy_pass         http://app_servers;\r\n            proxy_redirect     off;\r\n            proxy_set_header   Host $host;\r\n            proxy_set_header   X-Real-IP $remote_addr;\r\n            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            proxy_set_header   X-Forwarded-Host $server_name;\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>Once again, let&rsquo;s deconstruct a few parts of the file.</p>\r\n<p>&nbsp;</p>\r\n<p>Lines 8-10 define a group of servers (in this case one). This named resource (app_servers) can be used elsewhere in the file for proxying.</p>\r\n<p>&nbsp;</p>\r\n<p>Line 13 tells Nginx to listen on port 80.</p>\r\n<p>&nbsp;</p>\r\n<p>Lines 15-22 indicate that all traffic should be proxied to app_servers.</p>\r\n<p>&nbsp;</p>\r\n<p>In summary, this file configures Nginx to listen on port 80 and then redirect all traffic to port 5000 on the same box. Given the ASPNETCORE_URLS variable specified in the Dockerfile, this means that the traffic will be proxied from Nginx to Kestrel.</p>\r\n<p>&nbsp;</p>\r\n<p>Start-up script</p>\r\n<p>There can only be a single CMD used (or ENTRYPOINT defined) for a Docker container. But this reverse proxy configuration needs both to start Nginx and Kestrel. To do this, we&rsquo;ll use a shell script to perform both tasks.</p>\r\n<p>&nbsp;</p>\r\n<p>Create a startup.sh file in the same directory with the following contents:</p>\r\n<pre class=\"language-markup\"><code>#!/bin/bash\r\nservice nginx start\r\ndotnet /app/app.dll</code></pre>\r\n<p>Building the image</p>\r\n<p>Build the image with the following command:</p>\r\n<pre class=\"language-markup\"><code>docker build -t example/aspnetcore-nginx .</code></pre>\r\n<p>As you watch the output, you&rsquo;ll see that Nginx is being installed:</p>\r\n<pre class=\"language-markup\"><code>...\r\nStep 3/7 : RUN apt-get install -y nginx\r\n ---&gt; Running in ca67ca6606e8\r\nReading package lists...\r\nBuilding dependency tree...\r\nReading state information...\r\nThe following extra packages will be installed:\r\n  fontconfig-config fonts-dejavu-core geoip-database init-system-helpers\r\n  libalgorithm-c3-perl libarchive-extract-perl libcgi-fast-perl libcgi-pm-perl\r\n...</code></pre>\r\n<p>Running the image</p>\r\n<p>To test the image, run an instance of it:</p>\r\n<pre class=\"language-markup\"><code>docker run --name test -d -p 8080:80 example/aspnetcore-nginx</code></pre>\r\n<p>You should now be able to reach the application at http://localhost:8080.</p>\r\n<p>&nbsp;</p>\r\n<p>You can verify that it&rsquo;s running the Nginx service through curl:</p>\r\n<pre class=\"language-markup\"><code>$ curl -s -D - localhost:8080 -o /dev/null\r\nHTTP/1.1 200 OK\r\nServer: nginx/1.6.2\r\nDate: Fri, 24 Feb 2017 14:39:51 GMT\r\nContent-Type: text/html; charset=utf-8\r\nTransfer-Encoding: chunked\r\nConnection: keep-alive\r\nVary: Accept-Encoding</code></pre>\r\n<p>If you open a shell on the box itself, you can look at both the Nginx and Kestrel services individually.</p>\r\n<pre class=\"language-markup\"><code>docker exec -it test bash\r\n\r\n# curl -s -D - localhost:80 -o /dev/null\r\nHTTP/1.1 200 OK\r\nServer: nginx/1.6.2\r\nDate: Fri, 24 Feb 2017 14:45:03 GMT\r\nContent-Type: text/html; charset=utf-8\r\nTransfer-Encoding: chunked\r\n\r\n# curl -s -D - localhost:5000 -o /dev/null\r\nHTTP/1.1 200 OK\r\nDate: Fri, 24 Feb 2017 14:45:53 GMT\r\nTransfer-Encoding: chunked\r\nContent-Type: text/html; charset=utf-8\r\nServer: Kestrel</code></pre>\r\n<p>Other options?</p>\r\n<p>As I mentioned above, there are two main ways to set up a reverse proxy architecture for ASP.NET Core applications. In the <a title=\"Nginx Reverse Proxy to ASP.NET Core &ndash; In Separate Docker Containers\" href=\"../../../../../blog/406/nginx-reverse-proxy-to-asp-net-core-in-separate-docker-containers/\" target=\"_blank\" rel=\"noopener\">next post (Nginx Reverse Proxy to ASP.NET Core &ndash; In Separate Docker Containers)</a>, I&rsquo;ll show the alternate setup that keeps Nginx and ASP.NET Core in separate Docker containers.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/851b560d-0263-4e5d-9426-f7dad119ba6c_target-architecture-docker-nginx-ketrel.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"nginx-reverse-proxy-to-asp.net-core-in-same-docker-container","tags":[{"name":"nginx","slug":"nginx"},{"name":"dotnet-core","slug":"dotnet-core"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"docker","slug":"docker"}],"recommendations":[{"id":300,"title":"ASP.NET Core 2.0 Google OAuth Redirection with Add Hosted Domain and other parameters","imageUrl":"b58e46eb-d9dc-4ca9-94c8-f3d0a57bb3eb_dotnetcore-oauth.jpg","dateCreated":"2019-03-20T17:49:53.165Z","dateModified":"2019-03-22T09:18:27.165Z","contributedBy":"AskGif","content":"Adding a hosted domain parameter is not directly supposed through the GoogleOptions class, unfortunately &ndash; however with a few (not obvious) tweaks, you can easily add the parameter!\r\n&nbsp;\r\nIn your Startup.cs, set up a new Events parameter as such:\r\n<pre class=\"language-c","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b58e46eb-d9dc-4ca9-94c8-f3d0a57bb3eb_dotnetcore-oauth.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"mvc-core","slug":"mvc-core"},{"name":"c-sharp","slug":"c-sharp"}],"slug":"asp.net-core-2.0-google-oauth-redirection-with-add-hosted-domain-and-other-parameters","total":0},{"id":158,"title":"Exception Handling in ASP.NET Core Web API","imageUrl":"5bbe12c4-9545-4bf7-97a6-0a16bd888dac_error-handling.jpg","dateCreated":"2018-11-28T10:55:40.625Z","dateModified":"2018-11-28T10:55:52.68Z","contributedBy":"AskGif","content":"Question:\r\nI started using ASP.NET Core for my new REST API project after using regular ASP.NET Web API for many years. I don't see a good way to handle exceptions in ASP.NET Core Web API. I tried to implement exception handling filter/attribute:\r\n<pre class=\"language-csharp\"><code>pub","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5bbe12c4-9545-4bf7-97a6-0a16bd888dac_error-handling.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"exception","slug":"exception"},{"name":"web-services","slug":"web-services"},{"name":"web-api","slug":"web-api"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"dotnet-core","slug":"dotnet-core"}],"slug":"exception-handling-in-asp.net-core-web-api","total":0},{"id":146,"title":"Xamarin.forms shared project gives error while creation","imageUrl":"63ea6650-3931-4a59-aad2-bb51e06cd6cd_xamarin-forms.png","dateCreated":"2018-10-26T05:01:17.134Z","dateModified":"2018-10-26T05:02:27.883Z","contributedBy":"AskGif","content":"Whenever I try to create a new xamarin.forms project it is giving error. The Error Details is as below,\r\nXamarin.Forms.1.3.1.6296: Could not install package 'Xamarin.Forms 1.3.1.6296'. You are trying to install this package into a project that targets 'Xamarin.iOS,Version=v1.0', but the pa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/63ea6650-3931-4a59-aad2-bb51e06cd6cd_xamarin-forms.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"xamarin","slug":"xamarin"},{"name":"xamarin-forms","slug":"xamarin-forms"},{"name":"c-sharp","slug":"c-sharp"},{"name":"cross-platform","slug":"cross-platform"},{"name":"questions","slug":"questions"},{"name":"dot-net","slug":"dot-net"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"xamarin.forms-shared-project-gives-error-while-creation","total":0},{"id":5,"title":"How Can I Install Nginx on AWS EC2 Ubuntu 16.04 Machine and host Multiple Websites.","imageUrl":"78354fdb-9e8d-43be-a51a-75dc508974e5_NGINX-On-Ubuntu-1200x1200.jpg","dateCreated":"2018-07-02T12:43:39.373Z","dateModified":"2018-07-02T16:12:00.428Z","contributedBy":"AskGif","content":"Nginx ( /ˌɛndʒɪnˈɛks/ EN-jin-EKS[8]) (stylized as NGINX, NGiИX or nginx) is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. The software was created by Igor Sysoev and first publicly released in 2004. A company of the same name was founded in 2011","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/78354fdb-9e8d-43be-a51a-75dc508974e5_NGINX-On-Ubuntu-1200x1200.jpg","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"ec2","slug":"ec2"},{"name":"nginx","slug":"nginx"},{"name":"ubuntu","slug":"ubuntu"}],"slug":"how-can-i-install-nginx-on-aws-ec2-ubuntu-16.04-machine-and-host-multiple-websites","total":0}]}