{"id":408,"title":"Testing Webservice with JMeter: Passing data from one response to another request","imageUrl":"5907634d-02c4-4db3-a12f-0e49d9e76563_jmeter-webservice.jpg","dateCreated":"2019-06-25T09:55:38.009Z","dateModified":"2019-06-25T09:56:01.617Z","contributedBy":"AskGif","content":"<p>JMeter is great for functional and performance testing of many things, including web services (and to my surprise also LDAP). It also provides means for extracting data from a response and passing them to a subsequent request, which is exactly what I needed.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>The steps are:</p>\r\n<p>Create a web service (WS) test plan, as described in the tutorial (in my case it contains two WS calls)</p>\r\n<p>Add the User Defined Variables config element to the test plan and define there a variable for transferring the response data</p>\r\n<p>Add an XPath Extractor Post Processor to the first WS call to extract the value of interest into the user-defined variable (beware namespaces!)</p>\r\n<p>Add a BeanShell PreProcessor to the second call, which will replace a placeholder in the WS call's XML data with the value of that variable</p>\r\n<p>&nbsp;</p>\r\n<p>About the web service</p>\r\n<p>I needed to test a web service, which requires its client to call first its authenticate method, which returns an authentication token called 'certificate', which is then used in subsequent requests.</p>\r\n<p>&nbsp;</p>\r\n<p>A basic implementation</p>\r\n<p>&nbsp;</p>\r\n<p>0. Setup</p>\r\n<p>Download JMeter 2.3.4 and two dependencies, Java Mail API (mail.jar) and JavaBeans Activation Framework (activation.jar), necessary for the JMeter's web service sampler. Put the JARs in JMeter's lib/ folder.</p>\r\n<p>1. Create a web service (WS) test plan, as described in the tutorial (in my case it contains two WS calls)</p>\r\n<p>Well, follow the tutorial :-). Then duplicate the web service call sampler, call the first one WS: Authenticate with Saba and the other one WS: PF - Update employees.</p>\r\n<p>2. Add the User Defined Variables config element to the test plan and define there a variable for transferring the response data</p>\r\n<p>We will need a variable to hold the data that we want to transfer from the 1st response to a subsequent request. Therefore open the test plan, right-click on Thread Group &gt; Add &gt; Config Element &gt; User Defined Variables. Add there a variable named sabaCertificate. You can leave its Value empty.</p>\r\n<p>3. Add an XPath Extractor Post Processor to the first WS call to extract the value of interest into the user-defined variable</p>\r\n<p>Now we will extract the \"certificate\" data from the first response. The response may look like this (I used Eclipse' TCP Monitor to capture the SOAP communication):</p>\r\n<pre class=\"language-markup\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\r\n &lt;soapenv:Body&gt;\r\n \t&lt;saba:certificate xmlns:saba=\"http://www.saba.com/xml/infoservices\"&gt;31323930326436636637635&lt;/saba:certificate&gt;\r\n &lt;/soapenv:Body&gt;\r\n&lt;/soapenv:Envelope&gt;</code></pre>\r\n<p>To extract the value of the element &lt;saba:certificate&gt;:</p>\r\n<p>Right-click on the first WS call (WS: Authenticate with Saba) and Add &gt; Post Processors &gt; XPath Extractor</p>\r\n<p>For the Reference Name, type sabaCertificate (the user variable we've created earlier)</p>\r\n<p>For the XPath query, type //*[local-name()='certificate']/text()</p>\r\n<p>Problem with namespaces: Beware that JMeter 2.3.4 supports only namespaces declared on the root element and thus the XPath query //saba:certificate wouldn't work. The documentation for XPath Extractor's attribute \"Use Namespace?\" provides a workaround based on using the functions local-name() and namespace-uri() to match the local tag name and the URI associated with its namespace, which I've partly used.</p>\r\n<p>You can test your XPath for example in the Allans Online XPath Tester</p>\r\n<p>&nbsp;</p>\r\n<p>4. Add a BeanShell PreProcessor to the second call, which will replace a placeholder in the WS call's XML data with the value of that variable</p>\r\n<p>Now we need to get the \"certificate\" into the subsequent web service request. I have put the placeholder \"#sabaCertificate#\" into the SOPA request, at the place where the actual authentication token shall be. Now we will arrange for its replacement with the actual value:</p>\r\n<p>Right-click on the second WS call (WS: PF - Update employees) and Add &gt; Pre Processors &gt; BeanShell PreProcessor (BeanShell is a scripting language with Java syntax and is included in JMeter)</p>\r\n<p>Type in the following script (notice that sampler is a variable provided by JMeter and refers to the parent WS call; check JavaDoc for details on the WebServiceSampler):</p>\r\n<p>&nbsp;</p>\r\n<p>Case 1: SOAP request specified directly in the attribute Soap/XML-RPC Data</p>\r\n<pre class=\"language-java\"><code>import org.apache.jmeter.protocol.http.sampler.WebServiceSampler;\r\nWebServiceSampler wsSampler = (WebServiceSampler) sampler;\r\nString requestWithCertif = wsSampler.getXmlData().replaceFirst(\"#sabaCertificate#\", vars.get(\"sabaCertificate\"));\r\nwsSampler.setXmlData(requestWithCertif);</code></pre>\r\n<p>Case 2: The SOAP request is read from a file (attribute File with SOAP XML Data)</p>\r\n<p>If the request data is read from a file then it's a bit more complex because we need to load its content.</p>\r\n<pre class=\"language-java\"><code>import org.apache.jmeter.protocol.http.sampler.WebServiceSampler;\r\nimport java.io.*;\r\n\r\nWebServiceSampler wsSampler = (WebServiceSampler) sampler;\r\n\r\nBufferedReader xmlReader = new BufferedReader( new InputStreamReader(\r\n\tnew FileInputStream(wsSampler.getXmlFile())\r\n\t, java.nio.charset.Charset.forName(\"UTF-8\")\r\n));\r\n\r\nStringBuffer xmlData = new StringBuffer();\r\n\r\nString line;\r\nwhile( (line = xmlReader.readLine()) != null) { xmlData.append(line).append('\\n'); }\r\n\r\nString requestWithCertif = xmlData.toString().replaceFirst(\"#sabaCertificate#\", vars.get(\"sabaCertificate\"));\r\n\r\nwsSampler.setXmlData(requestWithCertif);\r\nwsSampler.setXmlFile(\"\") ; // a file would override the data\r\n\r\n// print(\"XML set: \" + requestWithCertif); // print to the console JMeter was started from</code></pre>\r\n<p>Well, that's it!</p>\r\n<p>Going advanced: Reading requests from several files</p>\r\n<p>The approach described above makes it possible to send a request based on a single file. But what if we want to send a different data with each repetition of the test, e.g. to negate effects of caching? Well, there is a couple of ways to achieve that. I've chosen the most flexible one, though absolutely not the easiest one to implement.</p>\r\n<p>&nbsp;</p>\r\n<p>The trick is:</p>\r\n<p>Create a BeanShell Sampler. The sampler will list all files in a particular directory and store their paths into numbered variables (G_updateEmployeesWsRequestFile_1 etc., must start with 1), which will be then used by a ForEach Controller.</p>\r\n<p>Put all the test elements from the basic test plan under a ForEach Controller, which follows the BeanShell Sampler. Configure it to use the variables generated by the BeanShell Sampler and store the current file name in the variable G_updateEmployeesWsRequestFile.</p>\r\n<p>In the web service request element, replace the content of the Filename field with a reference to that variable: ${G_updateEmployeesWsRequestFile}</p>\r\n<p>The BeanShell Sampler \"Generate WS request file names\"</p>\r\n<pre class=\"language-java\"><code>import java.io.*;\r\n\r\nprint(\"Generating files...\");\r\nlog.info(\"BeanShell Sampler: Generating request file names...\");\r\n\r\nFile requestsDir = new File(\"/tmp/wsRequests\");\r\nString[] requestFiles = requestsDir.list();\r\n\r\nfor(int i=0; i&lt;requestFiles.length; ++i) {\r\n\tString varName = \"G_updateEmployeesWsRequestFile_\" + (i+1);\r\n\tvars.put(\r\n\t\tvarName\r\n\t\t, requestsDir.getAbsolutePath()  + File.separatorChar  + requestFiles[i]\r\n\t);\r\n\t// print(\"var created: \" + varName + \"=\" + vars.get(varName));\r\n}\r\n\r\nlog.info(\"BeanShell Sampler: FINISHED generating request file names from dir \" +\r\n\trequestsDir + \"; files are: \" + java.util.Arrays.asList(requestFiles));\r\n\r\nreturn \"soap input files generated\";</code></pre>\r\n<p>The ForEach Controller \"ForEach request file\"</p>\r\n<p>The controller's configuration is simple:</p>\r\n<p>Input variable prefix: G_updateEmployeesWsRequestFile</p>\r\n<p>Output variable name: G_updateEmployeesWsRequestFile</p>\r\n<p>Add \"_\" before before number: [x] (checked)</p>\r\n<p>Summary</p>\r\n<p>We've parametrized the test by a set of files with SOAP requests that are read from a folder and supplied sequentially to the test thanks to the ForEach Controller.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5907634d-02c4-4db3-a12f-0e49d9e76563_jmeter-webservice.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"testing-webservice-with-jmeter-passing-data-from-one-response-to-another-request","tags":[{"name":"web-services","slug":"web-services"},{"name":"java","slug":"java"},{"name":"jmeter","slug":"jmeter"}],"recommendations":[{"id":78,"title":"What is Design Patterns?","imageUrl":"8a74e74a-3070-41f8-9ddf-4d3b87119ee7_design-patterns.png","dateCreated":"2018-08-01T16:29:58.336Z","dateModified":"2018-08-01T16:30:51.417Z","contributedBy":"AskGif","content":"Design Patterns: Elements of Reusable Object-Oriented Software is a software engineering book describing software design patterns. The book's authors are Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides with a foreword by Grady Booch. The book is divided into two parts, with the first ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8a74e74a-3070-41f8-9ddf-4d3b87119ee7_design-patterns.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"java","slug":"java"},{"name":"c-sharp","slug":"c-sharp"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-design-patterns","total":0},{"id":29,"title":"find the smallest integer which cannot be represented as the sum of any of the subset of the given array.","imageUrl":"ffe58c0a-0193-4745-a63a-a7eacae7af9d_images.png","dateCreated":"2018-07-15T14:59:53.548Z","dateModified":"2018-07-15T15:00:16.021Z","contributedBy":"AskGif","content":"We have been given a sorted array in increasing order of only positive values, now it is required to find the smallest positive integer value which cannot be represented as the sum of elements of any subset of given set.&nbsp;\r\n<p style=\"text-align: justify;\">The requirement is to solve the p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffe58c0a-0193-4745-a63a-a7eacae7af9d_images.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"},{"name":"array","slug":"array"},{"name":"java","slug":"java"}],"slug":"find-the-smallest-integer-which-cannot-be-represented-as-the-sum-of-any-of-the-subset-of-the-given-array","total":0},{"id":28,"title":"Check if Pythagorean Triplet is present in an Array","imageUrl":"b9364632-4b59-4581-9ba9-1e8e0c19a123_pythagorean-triplet.png","dateCreated":"2018-07-14T09:20:48.293Z","dateModified":"2018-07-14T09:20:56.481Z","contributedBy":"AskGif","content":"You will be given an array of integers, you have to write a function which will return true if there is a triplet (a, b, c) that satisfies a^2+ b^2 = c^2 otherwise false.\r\nWe will solve the problem with the naive approach first then we will optimize our solution.\r\n<pre class=\"language-","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b9364632-4b59-4581-9ba9-1e8e0c19a123_pythagorean-triplet.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"java","slug":"java"},{"name":"array","slug":"array"},{"name":"interview","slug":"interview"}],"slug":"check-if-pythagorean-triplet-is-present-in-an-array","total":0},{"id":1,"title":"How to install java on EC2 Ubuntu 16-04","imageUrl":"d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","dateCreated":"2018-06-20T13:02:11.29Z","dateModified":"2018-07-07T15:23:51.439Z","contributedBy":"AskGif","content":"This blog is in continuation to blog&nbsp;<a href=\"../../../../../blog/3/how-to-create-ec2-instance-on-aws-free-tier-plan/?lang=en\" target=\"_blank\" rel=\"noopener\">How to create EC2 instance on AWS Free Tier plan.</a>&nbsp;if you missed please revisit.\r\nFirst we need to get an Ubuntu (16.04","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"jre","slug":"jre"},{"name":"jdk","slug":"jdk"},{"name":"java","slug":"java"}],"slug":"how-to-install-java-on-ec2-ubuntu-16-04","total":0}]}