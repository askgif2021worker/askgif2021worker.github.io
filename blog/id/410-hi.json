{"id":410,"title":"एक डिजाइन प्रणाली क्या है?","imageUrl":"bbd0b699-c047-4b3b-96b2-d631122cf4c2_Design-System.jpg","dateCreated":"2019-06-26T02:33:29.017Z","dateModified":"2019-06-26T02:33:46.63Z","contributedBy":"AskGif","content":"<p>Many of us working in the tech space have undoubtedly encountered challenges in communicating with members of our product teams. More specifically, there seems to be a disconnect between designers and developers. However, effective communication within these spaces is crucial to building excellent quality products for clients. A design system can help with this pain and improve the way we work in our teams.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Although most of us have heard of &lsquo;design systems&rsquo; in passing, how many of us truly understand what they are, or the value they can bring to our organizations? Whether you are a developer or a designer, a design system can make your life easier by improving efficiency and communication on your team. However, in order to fully understand the benefits, a design system can bring to your team and organization, let&rsquo;s talk about what a design system is.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>According to the InVision Handbook, a design system is a source that utilizes &ldquo;a collection of repeatable components and a set of standards guiding the use of those components.&rdquo; As this description suggests, components can be found in design systems along with other content including styling patterns and reusable UI development code. These resources can then be reused to build other products for the client or brand you are working with.</p>\r\n<p>&nbsp;</p>\r\n<p>However, there is something important to note here&hellip; a design system is not a brand book. It may incorporate branding, but it rather serves as a common visual language bridging the gap between how engineers and designers work on their product teams. It acts as a single source of truth enabling faster development and consistency. This consequently allows teams to move forward with other important tasks related to product development.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Investing in building a design system can impact more than just the product team. According to Marco Suarez&rsquo;s &ldquo;Design Systems Handbook,&rdquo; it &ldquo;reduces design debt, accelerates the design process, and builds bridges between teams in concert to bring products to life.&rdquo; In other words, it allows teams to focus on the big picture, instead of spending valuable time going back and forth on design questions &ndash; saving your company time, money, and resources.</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bbd0b699-c047-4b3b-96b2-d631122cf4c2_Design-System.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-a-design-system","tags":[{"name":"design-patterns","slug":"design-patterns"}],"recommendations":[{"id":73,"title":"टेम्पलेट पैटर्न क्या है?","imageUrl":"1573c83b-c91b-4944-be45-b6b2f866e450_Template_Method.png","dateCreated":"2018-08-01T15:41:25.221Z","dateModified":"2018-08-02T10:59:06.373Z","contributedBy":"AskGif","content":"In software engineering, the template method pattern is a behavioural design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure. The template m","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1573c83b-c91b-4944-be45-b6b2f866e450_Template_Method.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"interview","slug":"interview"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-template-pattern","total":0},{"id":69,"title":"एडाप्टर पैटर्न क्या है?","imageUrl":"d3a5fc87-6928-4196-b3ae-d8e4ed5b9811_adapter-pattern.jpg","dateCreated":"2018-08-01T13:09:38.32Z","dateModified":"2018-08-01T17:20:54.998Z","contributedBy":"AskGif","content":"In software engineering, the adapter pattern is a software design pattern (also known as Wrapper, an alternative naming shared with the Decorator pattern) that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others wit","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d3a5fc87-6928-4196-b3ae-d8e4ed5b9811_adapter-pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"interview","slug":"interview"}],"slug":"what-is-adapter-pattern","total":0},{"id":68,"title":"फैक्टरी पैटर्न क्या है?","imageUrl":"e2172f61-aced-4a65-a785-9978cd5ffdb7_factory-pattern.jpg","dateCreated":"2018-08-01T12:47:00.64Z","dateModified":"2018-08-01T17:19:17.793Z","contributedBy":"AskGif","content":"In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method&mdash;ei","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e2172f61-aced-4a65-a785-9978cd5ffdb7_factory-pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"creational-pattern","slug":"creational-pattern"},{"name":"design-patterns","slug":"design-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-factory-pattern","total":0},{"id":65,"title":"रणनीति पैटर्न क्या है?","imageUrl":"ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","dateCreated":"2018-08-01T12:05:22.176Z","dateModified":"2018-08-01T17:24:43.716Z","contributedBy":"AskGif","content":"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which is a family of algorithms ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-strategy-pattern","total":0}]}