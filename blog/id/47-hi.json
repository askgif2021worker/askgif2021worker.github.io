{"id":47,"title":"How to find Nth Number in Fibonacci Series?","imageUrl":"474b6b25-f3e7-4e74-ac0b-8ba71106309b_fibonacci.png","dateCreated":"2018-07-27T09:45:35.924Z","dateModified":"2018-07-27T09:45:43.563Z","contributedBy":"AskGif","content":"<p>In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, and characterized by the fact that every number after the first two is the sum of the two preceding ones:</p>\r\n<p>The Fibonacci spiral: an approximation of the golden spiral created by drawing circular arcs connecting the opposite corners of squares in the Fibonacci tiling; this one uses squares of sizes 1, 1, 2, 3, 5, 8, 13 and 21.</p>\r\n<p>By definition, the first two numbers in the Fibonacci sequence are either 1 and 1, or 0 and 1, depending on the chosen starting point of the sequence, and each subsequent number is the sum of the previous two.</p>\r\n<p>&nbsp;</p>\r\n<p>Solve using Recursion :</p>\r\n<pre class=\"language-java\"><code>public class FibonacciSeries {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint n = 30;\r\n\t\tlong startTime = System.nanoTime();\r\n\t\tSystem.out.println(FibonacciSeries(n));\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int FibonacciSeries(int n) {\r\n\t\tif(n==0) return 0;\r\n\t\tif(n==1) return 1;\r\n\t\treturn FibonacciSeries(n-1)+FibonacciSeries(n-2);\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output :\r\n\r\n832040\r\nTotal Time (nanoseconds) : 6212717\r\n</code></pre>\r\n<p>The time complexity for the above solution is exponential, i.e 2^n.</p>\r\n<p>&nbsp;</p>\r\n<p>Can we do it in a better time?</p>\r\n<p>Yes, by using <strong>dynamic programming and memoizing the previous computed results</strong>.</p>\r\n<p>&nbsp;</p>\r\n<p>Dynamic Programming Top-Down Approach :</p>\r\n<pre class=\"language-java\"><code>public class FibonacciSeries {\r\n\r\n\tstatic int[] arr = new int[100];\r\n\tpublic static void main(String[] args) {\r\n\t\tint n = 30;\r\n\t\tlong startTime = System.nanoTime();\r\n\t\tSystem.out.println(FibonacciSeries(n));\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int FibonacciSeries(int n) {\r\n\t\tif(n==0) return 0;\r\n\t\tif(n==1) return 1;\r\n\t\tif(arr[n] == 0)\r\n\t\t\tarr[n] = FibonacciSeries(n-1)+FibonacciSeries(n-2);\r\n\t\t\r\n\t\treturn arr[n];\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n832040\r\nTotal Time (nanoseconds) : 249580\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Dynamic programming Bottom-Up Approach :</p>\r\n<pre class=\"language-java\"><code>public class FibonacciSeries {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint n = 30;\r\n\t\tlong startTime = System.nanoTime();\r\n\t\tSystem.out.println(FibonacciSeries(n));\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int FibonacciSeries(int n) {\r\n\t\tint arr[]=new int[100];\r\n\t\tarr[0]=0;\r\n\t\tarr[1]=1;\r\n\t\tfor(int i=2;i&lt;=n;i++)\r\n\t\t\tarr[i]=arr[i-1]+arr[i-2];\r\n\t\t\r\n\t\treturn arr[n];\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n832040\r\nTotal Time (nanoseconds) : 246560\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>The time complexity for Top-Down and Bottom-Up approach is O(n) and Space complexity&nbsp;is also O(n).</p>\r\n<p>&nbsp;</p>\r\n<p>Can we do much better than this?</p>\r\n<p>Yes, we can just store previously two computed results instead of storing all results in an array.</p>\r\n<pre class=\"language-java\"><code>public class FibonacciSeries {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint n = 30;\r\n\t\tlong startTime = System.nanoTime();\r\n\t\tSystem.out.println(FibonacciSeries(n));\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int FibonacciSeries(int n) {\r\n\t\tint a =0;\r\n\t\tint b =1;\r\n\t\t\r\n\t\tif(n == 0)\r\n\t\t\treturn a;\r\n\t\tif(n == 1)\r\n\t\t\treturn b;\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=2;i&lt;=n;i++)\r\n\t\t{\r\n\t\t\tint temp = a;\r\n\t\t\ta=b;\r\n\t\t\tb=temp+a;\r\n\t\t}\r\n\t\t\r\n\t\treturn b;\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n832040\r\nTotal Time (nanoseconds) : 326229\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>The Time complexity of the above solution is O(n) and the space complexity is O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/474b6b25-f3e7-4e74-ac0b-8ba71106309b_fibonacci.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-find-nth-number-in-fibonacci-series","tags":[{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"interview","slug":"interview"},{"name":"recursion","slug":"recursion"},{"name":"प्रशन","slug":"questions"}],"recommendations":[{"id":66,"title":"पर्यवेक्षक पैटर्न क्या है?","imageUrl":"e69dad7f-de9e-4693-9048-db8d81419863_Observer-pattern.png","dateCreated":"2018-08-01T12:21:30.92Z","dateModified":"2018-08-01T17:24:10.49Z","contributedBy":"AskGif","content":"The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\r\n&nbsp;\r\nIt is mainly used to implement dist","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e69dad7f-de9e-4693-9048-db8d81419863_Observer-pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-observer-pattern-","total":0},{"id":57,"title":"स्वचालन फ्रेमवर्क की मुख्य विशेषताएं","imageUrl":"afb8af39-0840-4657-b903-26591e9c3b8d_automation.gif","dateCreated":"2018-07-30T14:58:57.992Z","dateModified":"2018-07-30T14:59:07.237Z","contributedBy":"AskGif","content":"In the modern software industry, Automation is becoming a must-have feature for the testing teams to quickly test and certify builds and find the bugs. To achieve the above criterion, a good automation framework is required. Now, what do we mean by a good automation framework? Let me quickly guid","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afb8af39-0840-4657-b903-26591e9c3b8d_automation.gif","category":{"name":"coding","slug":"coding"},"tags":[{"name":"स्वचालन-ढांचा","slug":"automation-framework"},{"name":"interview","slug":"interview"},{"name":"परिक्षण","slug":"testing"}],"slug":"key-features-of-automation-framework","total":0},{"id":18,"title":"Find Longest Increasing Subsequence","imageUrl":"2f4b2949-decb-492c-a28a-354c2bc38e48_Longest-Increasing-Subsequence-track-the-result.png","dateCreated":"2018-07-12T07:55:42.701Z","dateModified":"2018-08-31T04:38:31.491Z","contributedBy":"AskGif","content":"Finding Longest Increasing Subsequence in an array in N^2 Time complexity.\r\n<span style=\"color: #576871; font-family: OpenSans, Arial, Helvetica, sans-serif;\">The task is to find the length of the longest subsequence in a given array of integers such that all elements of the subsequence ar","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2f4b2949-decb-492c-a28a-354c2bc38e48_Longest-Increasing-Subsequence-track-the-result.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"LIS","slug":"lis"},{"name":"flipkart","slug":"flipkart"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"amazon","slug":"amazon"},{"name":"प्रशन","slug":"questions"},{"name":"treebo","slug":"treebo"}],"slug":"find-longest-increasing-subsequence","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}