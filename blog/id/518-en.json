{"id":518,"title":"Tutorial for Two Way Data Binding Using AngularJS","imageUrl":"5e0a19e6-90fa-486e-a410-76966cb36aad_Angular.jpg","dateCreated":"2019-08-30T06:09:23.488Z","dateModified":"2019-08-30T06:10:06.875Z","contributedBy":"AskGif","content":"<p>This post is the continuation of my previous AngularJS tutorial, I had explained JSON parsing using AngularJS. In this, we are going to explain how to do two-way data binding with Angular JS. Data binding is the most useful feature in AngularJS, It will help you to save from writing a lot of regular code.</p>\r\n<p>&nbsp;</p>\r\n<p>What is two-way data binding</p>\r\n<p>Angular template engine binding the data in two way, which means it synchronizes the data between model and view, its update the view component when the model get change and vice versa.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Sample Database</p>\r\n<p>Sample database comments table contains four comment id, comments and timestamp.</p>\r\n<pre class=\"language-javascript\"><code>CREATE TABLE IF NOT EXISTS `comments` (\r\n`comment_id` int(9) NOT NULL AUTO_INCREMENT,\r\n`comments` text NOT NULL,\r\n`timestamp` int(11) NOT NULL,\r\nPRIMARY KEY (`comment_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Javascript</p>\r\n<p>A global header for all ajax request charset should be utf-8 and form data should be encoded.</p>\r\n<pre class=\"language-javascript\"><code>&lt;script src=\"js/angular.min.js\"&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\nfunction commentsController($scope, $http)\r\n{\r\n\r\n$http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\r\n$http.get(\"index.php?action=getComments\").success(function(data)\r\n{\r\n$scope.comments = data;\r\n });\r\n\r\n$scope.addComment = function(comment){\r\n// Validate the comment is not an empty and undefined\r\nif(\"undefined\" != comment.msg){\r\n// Angular AJAX call\r\n$http({\r\nmethod : \"POST\",\r\nurl : \"index.php\", \r\ndata : \"action=add&amp;msg=\"+comment.msg\r\n}).success(function(data){\r\n// Add the data into DOM for future use\r\n$scope.comments.unshift(data); \r\n});\r\n$scope.comment = \"\";\r\n}\r\n}\r\n\r\n// index : index of global DOM\r\n$scope.deleteComment = function(index){\r\n// Angular AJAX call\r\n$http({\r\nmethod : \"GET\",\r\nurl : \"index.php?action=delete&amp;id=\"+$scope.comments[index].id,\r\n}).success(function(data){\r\n// Removing Data from Global DOM\r\n$scope.comments.splice(index,1);\r\n});\r\n}\r\n}\r\n&lt;/script&gt;</code></pre>\r\n<p>&nbsp;</p>\r\n<p>ng-app</p>\r\n<p>It will load the dependencies and the module.</p>\r\n<p>&nbsp;</p>\r\n<p>ng-controller</p>\r\n<p>Used to call the controller&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>ng-model</p>\r\n<p>Initiate Two Way binding</p>\r\n<p>&nbsp;</p>\r\n<p>ng-repeat</p>\r\n<p>Angular control structure act as for loop</p>\r\n<p>&nbsp;</p>\r\n<p>ng-click</p>\r\n<p>Angular on click event</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>HTML Code</p>\r\n<pre class=\"language-markup\"><code>&lt;div ng-app id=\"ng-app\" class=\"main\"&gt;\r\n&lt;div ng-controller=\"commentsController\"&gt;\r\n\r\n&lt;!-- Update Box --&gt;\r\n&lt;textarea name=\"submitComment\" ng-model=\"comment.msg\" placeholder=\"What are you thinking?\"&gt;&lt;/textarea&gt;\r\n&lt;a href=\"javascript:void(0);\" class=\"button\" ng-click=\"addComment(comment)\"&gt;POST&lt;/a&gt;\r\n\r\n&lt;!-- Comments --&gt;\r\n&lt;div ng-repeat=\"comment in comments\"&gt;\r\n&lt;div class=\"updates\"&gt;\r\n&lt;a href=\"javascript:void(0);\" ng-click=\"deleteComment($index);\"&gt;Delete&lt;/a&gt;\r\n{{comment.msg}}\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n<p>&nbsp;</p>\r\n<p>index.php</p>\r\n<pre class=\"language-php\"><code>&lt;?php\r\nrequire_once(\"comments.php\");\r\n$comment = new comments();\r\n\r\n// Get all the comments while loading the page\r\nif(isset($_GET['action']) and $_GET['action'] == \"getComments\"){\r\necho $comment-&gt;getComments();\r\nexit;\r\n}\r\n\r\n// Handle Delete AJAX Call\r\nif(isset($_GET['action']) and $_GET['action'] == \"delete\"){\r\n$comment-&gt;deleteComment($_GET['id']);\r\nexit;\r\n}\r\n\r\n// Handle Add AJAX Call\r\nif(isset($_POST) and $_SERVER['REQUEST_METHOD'] == \"POST\"){\r\necho $comment-&gt;addComment($_POST);\r\nexit;\r\n}\r\n\r\n?&gt;\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>comments.php</p>\r\n<p>Contains PHP code here just modify database access credentials.&nbsp;</p>\r\n<pre class=\"language-php\"><code>&lt;?php\r\nclass db {\r\n\r\nconst SERVER = \"localhost\";\r\nconst USER = \"username\";\r\nconst PASSWORD = \"password\";\r\nconst DB = \"database_name\";\r\n\r\nprivate static $instance = NULL;\r\nprivate $connection;\r\n\r\nprivate function __construct(){\r\n$this-&gt;connection = mysql_connect(self::SERVER, self::USER, self::PASSWORD);\r\nif($this-&gt;connection){\r\nmysql_select_db(self::DB, $this-&gt;connection);\r\n}\r\n}\r\n\r\nprivate function __clone(){\r\n// to avoid cloning this class\r\n}\r\n\r\n// Secure way to create Database Connection through SINGLETON Model\r\nprotected static function dbInstance(){\r\nif(NULL == self::$instance){\r\nself::$instance = new self;\r\n}\r\nreturn self::$instance;\r\n}\r\n}\r\n\r\nclass comments extends db {\r\n\r\nvar $con;\r\n\r\npublic function __construct(){\r\nparent::dbInstance();\r\n}\r\n\r\npublic function getComments(){\r\n$qry = mysql_query(\"SELECT comment_id, comments, timestamp FROM comments ORDER BY timestamp DESC\");\r\n$data = array();\r\nwhile($rows = mysql_fetch_array($qry)){\r\n$data[] = array(\"id\" =&gt; $rows['comment_id'],\r\n\"msg\" =&gt; $rows['comments'],\r\n\"timestamp\" =&gt; $rows['timestamp']);\r\n}\r\nreturn json_encode($data);\r\n}\r\n\r\npublic function addComment($post){\r\n$comments = mysql_escape_string($post['msg']);\r\n$time = time();\r\n$id = 0;\r\n$qry = mysql_query(\"INSERT INTO comments(comments,timestamp)VALUES('{$comments}','{$time}')\")or die(mysql_error());\r\n$id = mysql_insert_id();\r\nreturn json_encode(array(\"id\" =&gt; $id,\r\n\"msg\" =&gt; stripslashes($comments),\r\n\"timestamp\" =&gt; $time));\r\n}\r\n\r\npublic function deleteComment($id){\r\n(int)$id = mysql_escape_string($id);\r\n$del = mysql_query(\"DELETE FROM comments WHERE comment_id = \".$id);\r\nif($del)\r\nreturn true;\r\nreturn false;\r\n}\r\n\r\n}\r\n?&gt;</code></pre>\r\n<p>&nbsp;</p>\r\n<p>CSS</p>\r\n<pre class=\"language-css\"><code>* { padding:0px; margin:0px; }\r\nbody{font-family:arial}\r\ntextarea{border:solid 1px #333;width:520px;height:30px;font-family:arial;padding:5px}\r\n.main{margin:0 auto;width:600px; text-align:left:}\r\n.updates\r\n{\r\npadding:20px 10px 20px 10px ;\r\nborder-bottom:dashed 1px #999;\r\nbackground-color:#f2f2f2;\r\n}\r\n.button\r\n{\r\npadding:10px;\r\nfloat:right;\r\nbackground-color:#006699;\r\ncolor:#fff;\r\nfont-weight:bold;\r\ntext-decoration:none;\r\n}\r\n.updates a\r\n{\r\ncolor:#cc0000;\r\nfont-size:12px;\r\n}</code></pre>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5e0a19e6-90fa-486e-a410-76966cb36aad_Angular.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"tutorial-for-two-way-data-binding-using-angularjs","tags":[{"name":"angular-js","slug":"angular-js"}],"recommendations":[{"id":518,"title":"Tutorial for Two Way Data Binding Using AngularJS","imageUrl":"5e0a19e6-90fa-486e-a410-76966cb36aad_Angular.jpg","dateCreated":"2019-08-30T06:09:23.488Z","dateModified":"2019-08-30T06:10:06.875Z","contributedBy":"AskGif","content":"This post is the continuation of my previous AngularJS tutorial, I had explained JSON parsing using AngularJS. In this, we are going to explain how to do two-way data binding with Angular JS. Data binding is the most useful feature in AngularJS, It will help you to save from writing a lot of regu","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5e0a19e6-90fa-486e-a410-76966cb36aad_Angular.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"angular-js","slug":"angular-js"}],"slug":"tutorial-for-two-way-data-binding-using-angularjs","total":0},{"id":299,"title":"Angular UI Bootstrap model For Confirm By Typing","imageUrl":"e9865107-9e45-47e0-9852-0bc89ce189c0_github-delete.jpg","dateCreated":"2019-03-20T17:10:35.174Z","dateModified":"2019-03-22T05:27:10.622Z","contributedBy":"AskGif","content":"Github has a pretty nice UX for deleting repositories. When you click &ldquo;Delete&rdquo;, you aren&rsquo;t presented with a typical &ldquo;Are you sure? Yes/No&rdquo; alert. Instead, you are shown a modal with an in-your-face warning telling you the reprocussions of completing the modal, follow","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e9865107-9e45-47e0-9852-0bc89ce189c0_github-delete.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"angular-js","slug":"angular-js"},{"name":"javascript","slug":"javascript"}],"slug":"angular-ui-bootstrap-model-for-confirm-by-typing","total":0},{"id":297,"title":"AngularJS with JSX","imageUrl":"db4f9be9-9e42-4091-b078-d5343c4e05a6_jsx.jpg","dateCreated":"2019-03-20T16:28:43.879Z","dateModified":"2019-03-22T05:14:14.912Z","contributedBy":"AskGif","content":"I like Angular 1.X. It has allowed me to get some rich UIs done in a pretty short amount of time (unit tested, too!). However, with React gaining so much attention, I&rsquo;ve been pretty jealous of JSX. One thing that&rsquo;s always annoyed me about Angular is the jumping between multiple files ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/db4f9be9-9e42-4091-b078-d5343c4e05a6_jsx.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"angular-js","slug":"angular-js"},{"name":"angularjsx","slug":"angularjsx"}],"slug":"angularjs-with-jsx","total":0},{"id":296,"title":"What are Angular TypeScript Decorators in object-oriented front-end applications ?","imageUrl":"78201682-3caa-41be-accf-af9179653c34_angular-decorators.jpg","dateCreated":"2019-03-20T15:50:07.168Z","dateModified":"2019-03-22T05:16:15.61Z","contributedBy":"AskGif","content":"I've taken up TypeScript over the last few months, and it is such a breath of fresh air. TypeScript has quickly become one of my favorite languages to develop in, especially on the front-end. One of my favorite features is TypeScript Decorators, and I&rsquo;ve been taking advantage of them to tri","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/78201682-3caa-41be-accf-af9179653c34_angular-decorators.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"typescript","slug":"typescript"},{"name":"c-sharp","slug":"c-sharp"},{"name":"javascript","slug":"javascript"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"ionic-framework","slug":"ionic-framework"},{"name":"angular-js","slug":"angular-js"}],"slug":"what-are-angular-typescript-decorators-in-object-oriented-front-end-applications-","total":0}]}