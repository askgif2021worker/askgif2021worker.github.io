{"id":57,"title":"स्वचालन फ्रेमवर्क की मुख्य विशेषताएं","imageUrl":"afb8af39-0840-4657-b903-26591e9c3b8d_automation.gif","dateCreated":"2018-07-30T14:58:57.992Z","dateModified":"2018-07-30T14:59:07.237Z","contributedBy":"AskGif","content":"<p>In the modern software industry, Automation is becoming a must-have feature for the testing teams to quickly test and certify builds and find the bugs. To achieve the above criterion, a good automation framework is required. Now, what do we mean by a good automation framework? Let me quickly guide through some of the features that an automation framework must have.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>1. Simple Test Cases</strong>: The testcases for an automation framework must be simple. The objective of each testcase must be clear and unambiguous. The reason for this being, debugging a multipurpose testcase is going to be hard.&nbsp;</p>\r\n<p><strong>2. Modularity</strong>: The automation scripts and test data must be handled separately. This makes it easier to modify the data or scripts without changing the other. You can store your test data in form of an Excel sheet or an XML, depending upon your preference.</p>\r\n<p><strong>3. Reusability of Code</strong>: Try to reuse the code as often as possible. The Page Factory model of selenium being one such example. The reusability of key code saves you a lot of time and effort in writing the code for multiple testcases. You can create separate utility classes which can have the common methods such as reading from the excel or logging in to a website.</p>\r\n<p><strong>4. Low Maintenance</strong>: The automation framework should be easy to maintain. By making the code reusable and modular you can achieve this goal. The test data must be stored separately and must comply with the coding standards. Proper versioning should be followed for the code to track through different versions.</p>\r\n<p><strong>5. Extensibility</strong>: An automation framework can be ideal only when you can easily add new features and testcases to it without altering the framework. Once again modularity proves a pivotal role in achieving this goal.</p>\r\n<p><strong>6. Robust and Reliable</strong>: The framework should not crash or provide unambiguous results. The reliability of the results is a must for a good framework. Special measures should be taken to minimize the false cases.</p>\r\n<p><strong>7. Reporting</strong>: Any automation framework is incomplete without proper reporting. All your effort goes in wain if you do not get a proper report at the end of the day telling what ran and what failed. The automation report should be simple and must have just enough information for a failed test case to identify which step failed exactly.</p>\r\n<p><strong>8. Documentation</strong>: Whatever you do, make sure to document it. Documentation helps you the new guy understand how this framework functions and you can revisit it in future to see why a method was written as such.</p>\r\n<p>&nbsp;</p>\r\n<p>If you follow the above 8 rules, you can write a good framework regardless of the language and tool you use for testing.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afb8af39-0840-4657-b903-26591e9c3b8d_automation.gif","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"key-features-of-automation-framework","tags":[{"name":"स्वचालन-ढांचा","slug":"automation-framework"},{"name":"interview","slug":"interview"},{"name":"परिक्षण","slug":"testing"}],"recommendations":[{"id":1687,"title":"Mint.com डिजाइन कैसे करें","imageUrl":"icon_2709cf5f-1f6f-435b-bf00-9cf152142df5.png","dateCreated":"2020-11-20T06:53:27.643Z","dateModified":"2020-11-20T06:53:36.94Z","contributedBy":"sumitc91","content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2709cf5f-1f6f-435b-bf00-9cf152142df5.png","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"डिज़ाइन","slug":"design"},{"name":"interview","slug":"interview"},{"name":"प्रणाली-की-रूपरेखा","slug":"system-design"}],"slug":"how-to-design-mint.com","total":0},{"id":93,"title":"How will you display a linked list from the end?","imageUrl":"34a6fa21-0896-44c8-a8c2-686bacb89acc_linked-list-reverse.png","dateCreated":"2018-08-07T15:22:07.903Z","dateModified":"2018-08-07T15:22:25.327Z","contributedBy":"AskGif","content":"Traverse recursively till the end of the linked list. While returning back, we can print the elements. This approach will take Time Complexity O(n) as we are traversing through each element at least once and the space complexity of O(n) as we are forming a Stack in the recursion.\r\nJava Sol","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/34a6fa21-0896-44c8-a8c2-686bacb89acc_linked-list-reverse.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"},{"name":"java","slug":"java"}],"slug":"how-will-you-display-a-linked-list-from-the-end","total":0},{"id":75,"title":"What is State pattern?","imageUrl":"ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","dateCreated":"2018-08-01T15:58:57.611Z","dateModified":"2018-08-01T17:24:26.416Z","contributedBy":"AskGif","content":"The state pattern is a behavioural software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface and implementing state transitions b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-state-pattern","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}