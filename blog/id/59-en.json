{"id":59,"title":"How to Solve Coin Change Problem using Dynamic Programming for Minimum number of ways possible?","imageUrl":"450a3f20-633e-4f13-aa8e-dce34b85cf72_make-change.png","dateCreated":"2018-07-31T09:15:15.694Z","dateModified":"2018-07-31T09:15:30.599Z","contributedBy":"AskGif","content":"<p>Coin Change Problem is also known as Making Change Problem.</p>\r\n<p>The change-making problem, also known as the minimum coin change problem, addresses the question of finding the minimum number of coins (of certain denominations) that add up to a given amount of money. It is a knapsack type problem and has applications wider than just currency.</p>\r\n<p>It is also the most common variation of the coin change problem, a general case of partition in which, given the available denominations of an infinite set of coins, the objective is to find out the number of possible ways of making a change for a specific amount of money, without considering the order of the coins.</p>\r\n<p>It is weakly NP-hard but may be solved optimally in pseudo-polynomial time by dynamic programming.</p>\r\n<p>We will first solve it by using Recursion:</p>\r\n<pre class=\"language-java\"><code>package dp;\r\n\r\npublic class CoinChange {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] arr = new int[]{1, 2, 3};\r\n\t\tint m = 4;\r\n\t\t\r\n\t\tlong startTime = System.nanoTime();\r\n\t\t\r\n\t\tSystem.out.println(TotalPossibleWays(arr, arr.length, m));\r\n\t\t\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int TotalPossibleWays(int[] arr, int length, int m) {\r\n\t\t//if sum is 0 then only 1 ways is possible\r\n\t\tif(m == 0)\r\n\t\t\treturn 1;\r\n\t\t\r\n\t\t//if sum is negative then no ways is possible\r\n\t\tif(m &lt; 0)\r\n\t\t\treturn 0;\r\n\t\t\r\n\t\t//if all coins used but we didn't get the required sum, then no ways is possible.\r\n\t\tif(length&lt;=0 &amp;&amp; m &gt;= 1)\r\n\t\t\treturn 0;\r\n\t\t\r\n\t\t//Taking all possible ways, once by taking the coin and once by ignoring it.\r\n\t\treturn TotalPossibleWays(arr, length-1, m) + TotalPossibleWays(arr, length, m-arr[length-1]);\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n4\r\nTotal Time (nanoseconds) : 424023\r\n</code></pre>\r\n<p>If you look carefully we are solving the same subproblem again and again and the time complexity of the above solution is exponential, i.e O(2^n)</p>\r\n<p>&nbsp;</p>\r\n<p>Can we make our solution better?</p>\r\n<p>Yes by using Dynamic Programming.</p>\r\n<pre class=\"language-java\"><code>package dp;\r\n\r\npublic class CoinChange {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] arr = new int[]{1, 2, 3};\r\n\t\tint m = 4;\r\n\t\t\r\n\t\tlong startTime = System.nanoTime();\r\n\t\t\r\n\t\tSystem.out.println(TotalPossibleWays(arr, arr.length, m));\r\n\t\t\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int TotalPossibleWays(int[] arr, int length, int m) {\r\n\t\t//if sum is 0 then only 1 ways is possible\r\n\t\tif(m == 0)\r\n\t\t\treturn 1;\r\n\t\t\r\n\t\t//if sum is negative then no ways is possible\r\n\t\tif(m &lt; 0)\r\n\t\t\treturn 0;\r\n\t\t\r\n\t\tint[][] dp = new int[length+1][m+1];\r\n\t\t\r\n\t\t//initialize base values in dp table\r\n\t\tfor(int i=0;i&lt;arr.length+1;i++)\r\n\t\t\tdp[i][0] = 1;\r\n\t\tfor(int i=0;i&lt;m+1;i++)\r\n\t\t\tdp[0][i] = 0;\r\n\t\t\r\n\t\tfor(int i=1;i&lt;arr.length+1;i++) {\r\n\t\t\tfor(int j=1;j&lt;m+1;j++) {\r\n\t\t\t\t\r\n\t\t\t\tif(j&lt;arr[i-1])\r\n\t\t\t\t\tdp[i][j]= dp[i-1][j];\r\n\t\t\t\telse\r\n\t\t\t\t\tdp[i][j]= dp[i-1][j] + dp[i][j-arr[i-1]];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dp[length][m];\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n4\r\nTotal Time (nanoseconds) : 346996\r\n</code></pre>\r\n<p>The Time complexity of the above solution is O(n^2) since we are using 2 loops for computation.</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/450a3f20-633e-4f13-aa8e-dce34b85cf72_make-change.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-solve-coin-change-problem-using-dynamic-programming-for-minimum-number-of-ways-possible","tags":[{"name":"recursion","slug":"recursion"},{"name":"java","slug":"java"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"}],"recommendations":[{"id":1686,"title":"How to Design a web crawler","imageUrl":"icon_f983d8a0-6ee2-4024-8702-47973c582627.png","dateCreated":"2020-11-20T06:47:56.023Z","dateModified":"2020-11-20T06:48:08.443Z","contributedBy":"sumitc91","content":"Step 1: Outline use cases and constraints<br />Gather requirements and scope the problem. Ask questions to clarify use cases and constraints. Discuss assumptions.\nWithout an interviewer to address clarifying questions, we'll define some use cases and constraints.\nUse cases<br />We'l","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f983d8a0-6ee2-4024-8702-47973c582627.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"design","slug":"design"},{"name":"interview","slug":"interview"},{"name":"system-design","slug":"system-design"}],"slug":"how-to-design-a-web-crawler","total":0},{"id":146,"title":"Xamarin.forms shared project gives error while creation","imageUrl":"63ea6650-3931-4a59-aad2-bb51e06cd6cd_xamarin-forms.png","dateCreated":"2018-10-26T05:01:17.134Z","dateModified":"2018-10-26T05:02:27.883Z","contributedBy":"AskGif","content":"Whenever I try to create a new xamarin.forms project it is giving error. The Error Details is as below,\r\nXamarin.Forms.1.3.1.6296: Could not install package 'Xamarin.Forms 1.3.1.6296'. You are trying to install this package into a project that targets 'Xamarin.iOS,Version=v1.0', but the pa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/63ea6650-3931-4a59-aad2-bb51e06cd6cd_xamarin-forms.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"xamarin","slug":"xamarin"},{"name":"xamarin-forms","slug":"xamarin-forms"},{"name":"c-sharp","slug":"c-sharp"},{"name":"cross-platform","slug":"cross-platform"},{"name":"questions","slug":"questions"},{"name":"dot-net","slug":"dot-net"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"xamarin.forms-shared-project-gives-error-while-creation","total":0},{"id":19,"title":"Find Longest Increasing Subsequence Using Binary Search","imageUrl":"11b79284-f1ed-4645-ade0-e4eb5a2b247c_longest-increasing-subsequence.png","dateCreated":"2018-07-12T11:08:33.866Z","dateModified":"2018-07-14T03:26:50.263Z","contributedBy":"AskGif","content":"In this approach we will find longest increasing Subsequence using Binary Search. Time Complexity for this approach will be <strong>nlogn</strong>.\r\n<span style=\"color: #576871; font-family: OpenSans, Arial, Helvetica, sans-serif; font-size: 13px;\">The task is to find the length of the lon","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/11b79284-f1ed-4645-ade0-e4eb5a2b247c_longest-increasing-subsequence.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"},{"name":"algorithm","slug":"algorithm"},{"name":"lis","slug":"lis"}],"slug":"find-longest-increasing-subsequence-using-binary-search","total":0},{"id":1,"title":"How to install java on EC2 Ubuntu 16-04","imageUrl":"d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","dateCreated":"2018-06-20T13:02:11.29Z","dateModified":"2018-07-07T15:23:51.439Z","contributedBy":"AskGif","content":"This blog is in continuation to blog&nbsp;<a href=\"../../../../../blog/3/how-to-create-ec2-instance-on-aws-free-tier-plan/?lang=en\" target=\"_blank\" rel=\"noopener\">How to create EC2 instance on AWS Free Tier plan.</a>&nbsp;if you missed please revisit.\r\nFirst we need to get an Ubuntu (16.04","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"jre","slug":"jre"},{"name":"jdk","slug":"jdk"},{"name":"java","slug":"java"}],"slug":"how-to-install-java-on-ec2-ubuntu-16-04","total":0}]}