{"id":60,"title":"How to solve Edit Distance Problem using dynamic programming?","imageUrl":"9e07d056-ccf7-4fc8-b6ee-000c8032b9ec_editDistance.gif","dateCreated":"2018-07-31T12:00:39.882Z","dateModified":"2018-07-31T12:00:50.966Z","contributedBy":"AskGif","content":"<p>In computational linguistics and computer science, edit distance is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations required to transform one string into the other. Edit distances find applications in natural language processing, where automatic spelling correction can determine candidate corrections for a misspelt word by selecting words from a dictionary that have a low distance to the word in question. In bioinformatics, it can be used to quantify the similarity of DNA sequences, which can be viewed as strings of the letters A, C, G and T.</p>\r\n<p>Different definitions of an edit distance use different sets of string operations. The Levenshtein distance operations are the removal, insertion, or substitution of a character in the string. Being the most common metric, the Levenshtein distance is usually what is meant by \"edit distance\".</p>\r\n<p>Will First Solve the problem using Recursion :</p>\r\n<pre class=\"language-java\"><code>package dp;\r\n\r\npublic class EditDistance {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString str1 = \"sunday\";\r\n\t    String str2 = \"saturday\";\r\n\t     \r\n\t    long startTime = System.nanoTime();\r\n\t     \r\n\t    System.out.println(EditDistanceCount(str1,str2, str1.length(), str2.length()));\r\n\t     \r\n\t    long endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\r\n\t}\r\n\r\n\tprivate static int EditDistanceCount(String str1, String str2, int length1, int length2) {\r\n\t\tif(length1 == 0)\r\n\t\t\treturn length2;\r\n\t\tif(length2 == 0)\r\n\t\t\treturn length1;\r\n\t\t\r\n\t\tif(str1.charAt(length1-1) == str2.charAt(length2-1))\r\n\t\t\treturn EditDistanceCount(str1, str2, length1-1, length2-1);\r\n\t\t\r\n\t\treturn 1 +  min(\r\n\t\t\t\tEditDistanceCount(str1, str2, length1, length2 -1 ), //insert\r\n\t\t\t\tEditDistanceCount(str1, str2, length1-1, length2), //Remove\r\n\t\t\t\tEditDistanceCount(str1, str2, length1-1, length2-1) //Replace\r\n\t\t\t\t);\r\n\t}\r\n\r\n\tprivate static int min(int a, int b, int c) {\r\n\t\tif( a &lt; b)\r\n\t\t{\r\n\t\t\treturn a &lt; c ? a : c;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn b &lt; c ? b : c;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n3\r\nTotal Time (nanoseconds) : 419115\r\n</code></pre>\r\n<p>The time complexity of the above solution is exponential. in the worst case, it will be 3^n.</p>\r\n<p>In the above approach, we can see that many subproblems are solved again and again. We can use the previously solved subproblem to be used in solving a new problem which will reduce the time complexity considerably.</p>\r\n<p>Let's solve the problem using dynamic programming :</p>\r\n<pre class=\"language-java\"><code>package dp;\r\n\r\npublic class EditDistance {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString str1 = \"sunday\";\r\n\t    String str2 = \"saturday\";\r\n\t     \r\n\t    long startTime = System.nanoTime();\r\n\t     \r\n\t    System.out.println(EditDistanceCount(str1,str2, str1.length(), str2.length()));\r\n\t     \r\n\t    long endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\r\n\t}\r\n\r\n\tprivate static int EditDistanceCount(String str1, String str2, int length1, int length2) {\r\n\t\tif(length1 == 0)\r\n\t\t\treturn length2;\r\n\t\tif(length2 == 0)\r\n\t\t\treturn length1;\r\n\t\t\r\n\t\tint[][] dp = new int[length1+1][length2+1];\r\n\t\tfor(int i=0;i&lt;length1+1;i++) {\r\n\t\t\tfor(int j=0;j&lt;length2+1;j++) {\r\n\t\t\t\tif(i==0)\r\n\t\t\t\t\tdp[i][j] = j;\r\n\t\t\t\telse if(j==0)\r\n\t\t\t\t\tdp[i][j] = i;\r\n\t\t\t\telse if(str1.charAt(i-1) == str2.charAt(j-1))\r\n\t\t\t\t\tdp[i][j]=dp[i-1][j-1]; // if same characters do nothing\r\n\t\t\t\telse\r\n\t\t\t\t\tdp[i][j]= 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn dp[length1][length2];\r\n\t}\r\n\r\n\tprivate static int min(int a, int b, int c) {\r\n\t\tif( a &lt; b)\r\n\t\t{\r\n\t\t\treturn a &lt; c ? a : c;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn b &lt; c ? b : c;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n3\r\nTotal Time (nanoseconds) : 177840\r\n</code></pre>\r\n<p>The time complexity of the above solution is O(mxn) where m and n are the length of respective strings to be compared.</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e07d056-ccf7-4fc8-b6ee-000c8032b9ec_editDistance.gif","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-solve-edit-distance-problem-using-dynamic-programming","tags":[{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"recursion","slug":"recursion"}],"recommendations":[{"id":77,"title":"What is Composite pattern?","imageUrl":"7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","dateCreated":"2018-08-01T16:08:32.863Z","dateModified":"2018-08-01T17:21:15.513Z","contributedBy":"AskGif","content":"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that are treated the same way as a single instance of the same type of object. The intent of a composite is to \"compose\" objects into tree structures to represent pa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"interview","slug":"interview"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"प्रशन","slug":"questions"}],"slug":"what-is-composite-pattern","total":0},{"id":65,"title":"रणनीति पैटर्न क्या है?","imageUrl":"ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","dateCreated":"2018-08-01T12:05:22.176Z","dateModified":"2018-08-01T17:24:43.716Z","contributedBy":"AskGif","content":"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which is a family of algorithms ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-strategy-pattern","total":0},{"id":22,"title":"Find all possible palindromic partitions in a given string","imageUrl":"7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","dateCreated":"2018-07-13T06:11:22.557Z","dateModified":"2018-07-13T06:51:51.236Z","contributedBy":"AskGif","content":"We will be using recursion for solving this problem.&nbsp;<span style=\"font-family: 'Open Sans', Helvetica, Arial, Verdana, sans-serif; font-size: 15px; text-align: justify;\">The idea is to navigate through each substring starting from first character and to check if it is a palindrome. If it is,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"recursion","slug":"recursion"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"array","slug":"array"},{"name":"java","slug":"java"}],"slug":"find-all-possible-palindromic-partitions-in-a-given-string","total":0},{"id":1,"title":"EC2 उबंटू 16-04 पर जावा कैसे स्थापित करें","imageUrl":"d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","dateCreated":"2018-06-20T13:02:11.29Z","dateModified":"2018-07-07T15:23:51.439Z","contributedBy":"AskGif","content":"यह ब्लॉग ब्लॉग के निरंतरता में है एडब्ल्यूएस फ्री टियर योजना पर ईसी 2 उदाहरण कैसे बनाएं। यदि आप चूक गए तो कृपया पुनरीक्षण करें। सबसे पहले हमें उबंटू (16.04) उदाहरण प्राप्त करने की आवश्यकता है। इसके लिए हम एडब्ल्यूएस कंसोल का उपयोग कर सकते हैं। एक बार ubuntu मशीन ऊपर है और चल रहा है निम्नलिखित दृष","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"jre","slug":"jre"},{"name":"jdk","slug":"jdk"},{"name":"java","slug":"java"}],"slug":"how-to-install-java-on-ec2-ubuntu-16-04","total":0}]}