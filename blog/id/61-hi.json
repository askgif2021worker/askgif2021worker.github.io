{"id":61,"title":"How to solve Longest Palindromic Subsequence Problem using dynamic programming?","imageUrl":"90b9e546-462a-45eb-a042-60164d9cf25e_longest-palindrome-subsequence.png","dateCreated":"2018-07-31T14:35:26.066Z","dateModified":"2018-07-31T14:35:35.531Z","contributedBy":"AskGif","content":"<p>The longest palindromic subsequence (LPS) problem is the problem of finding the longest subsequence of a string (a subsequence is obtained by deleting some of the characters from a string without reordering the remaining characters) which is also a palindrome. In general, the longest palindromic subsequence is not unique. For example, the string alfalfa has four palindromic subsequences of length 5: alala, afafa, alfla, and aflfa. However, it does not have any palindromic subsequences longer than five characters. Therefore all four are considered longest palindromic subsequences of alfalfa.</p>\r\n<p>Lets first solve the problem using Recursion:</p>\r\n<pre class=\"language-java\"><code>package askgif.dp;\r\n\r\npublic class LongestPalindromicSubsequence {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString str = \"bbbab\";\r\n\t\tlong startTime = System.nanoTime();\r\n\t\t\r\n\t\tSystem.out.println(FindLongestSubsequenceLen(str, 0, str.length()-1));\r\n\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int FindLongestSubsequenceLen(String str,int start, int end) {\r\n\t\tif(start &gt; end)\r\n\t\t\treturn 0;\r\n\t\tif(start == end)\r\n\t\t\treturn 1;\r\n\t\tif(str.charAt(start) == str.charAt(end))\r\n\t\t\treturn 2 + FindLongestSubsequenceLen(str, start+1, end-1);\r\n\t\t\r\n\t\treturn max(FindLongestSubsequenceLen(str, start+1, end), \r\n\t\t\t\tFindLongestSubsequenceLen(str, start, end-1));\r\n\t}\r\n\r\n\tprivate static int max(int a, int b) {\r\n\t\treturn a&gt;b?a:b;\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n4\r\nTotal Time (nanoseconds) : 233345\r\n</code></pre>\r\n<p>If you look at the solution closely you will find that many of the subproblems are getting repeated and the time complexity of the above solution is exponential. i.e O(2^n)</p>\r\n<p>&nbsp;</p>\r\n<p>Can we solve the above problem in a more efficient way?</p>\r\n<p>Yes, by using Dynamic Programming.</p>\r\n<pre class=\"language-java\"><code>package askgif.dp;\r\n\r\npublic class LongestPalindromicSubsequence {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString str = \"bbbab\";\r\n\t\tlong startTime = System.nanoTime();\r\n\t\t\r\n\t\tSystem.out.println(FindLongestSubsequenceLen(str));\r\n\r\n\t\tlong endTime   = System.nanoTime();\r\n\t\tlong totalTime = endTime - startTime;\r\n\t\tSystem.out.println(\"Total Time (nanoseconds) : \" + (totalTime));\r\n\t}\r\n\r\n\tprivate static int FindLongestSubsequenceLen(String str) {\r\n\t\tint[][] dp = new int[str.length()+1][str.length()+1];\r\n\t\tint j = 0;\r\n\t\tfor(int len=0;len&lt;str.length();len++) {\r\n\r\n\t\t\tfor(int i=0;i&lt;str.length()-len;i++) {\r\n\t\t\t\t\r\n\t\t\t\tif(len == 0)\r\n\t\t\t\t\tdp[i][i] = 1;\r\n\t\t\t\telse {\r\n\t\t\t\t\tj = i+len;\r\n\t\t\t\t\tif(str.charAt(i)==str.charAt(i+len)) {\r\n\t\t\t\t\t\tdp[i][j]=dp[i+1][j-1] + 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tdp[i][j]=max(dp[i][j-1],dp[i+1][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dp[0][str.length()-1];\r\n\t}\r\n\r\n\tprivate static int max(int a, int b) {\r\n\t\treturn a&gt;b?a:b;\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n4\r\nTotal Time (nanoseconds) : 484436\r\n</code></pre>\r\n<p>The time complexity of the above solution is O(n^2).</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/90b9e546-462a-45eb-a042-60164d9cf25e_longest-palindrome-subsequence.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-solve-longest-palindromic-subsequence-problem-using-dynamic-programming","tags":[{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"recursion","slug":"recursion"}],"recommendations":[{"id":101,"title":"What is a Tree Data Structure?","imageUrl":"503573f2-35b2-4cd4-bf84-46f6f1792a74_Binary_tree.png","dateCreated":"2018-08-08T12:16:52.093Z","dateModified":"2018-08-08T12:17:00.046Z","contributedBy":"AskGif","content":"A tree is a data structure similar to a linked list but instead of each node pointing simply to the next node in a linear fashion, each node points to a number of nodes. A tree is an example of non-linear data structures. A Tree structure is a way of representing the hierarchical nature of a stru","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/503573f2-35b2-4cd4-bf84-46f6f1792a74_Binary_tree.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"tree","slug":"tree"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"}],"slug":"what-is-a-tree-data-structure","total":0},{"id":97,"title":"What is a Linked List?","imageUrl":"92f2fc67-2e99-4054-b96b-936fd01ebeb0_linked-list-with-label.png","dateCreated":"2018-08-08T09:14:37.7Z","dateModified":"2018-08-08T09:16:54.109Z","contributedBy":"AskGif","content":"A linked list is a data structure used for storing collections of data. A linked list has the following properties.\r\n- Successive elements are connected by pointers\r\n- The last element points to NULL\r\n- Can grow or shrink in size during execution of a program\r\n- Can be","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/92f2fc67-2e99-4054-b96b-936fd01ebeb0_linked-list-with-label.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"}],"slug":"what-is-a-linked-list","total":0},{"id":75,"title":"What is State pattern?","imageUrl":"ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","dateCreated":"2018-08-01T15:58:57.611Z","dateModified":"2018-08-01T17:24:26.416Z","contributedBy":"AskGif","content":"The state pattern is a behavioural software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface and implementing state transitions b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-state-pattern","total":0},{"id":1,"title":"EC2 उबंटू 16-04 पर जावा कैसे स्थापित करें","imageUrl":"d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","dateCreated":"2018-06-20T13:02:11.29Z","dateModified":"2018-07-07T15:23:51.439Z","contributedBy":"AskGif","content":"यह ब्लॉग ब्लॉग के निरंतरता में है एडब्ल्यूएस फ्री टियर योजना पर ईसी 2 उदाहरण कैसे बनाएं। यदि आप चूक गए तो कृपया पुनरीक्षण करें। सबसे पहले हमें उबंटू (16.04) उदाहरण प्राप्त करने की आवश्यकता है। इसके लिए हम एडब्ल्यूएस कंसोल का उपयोग कर सकते हैं। एक बार ubuntu मशीन ऊपर है और चल रहा है निम्नलिखित दृष","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"jre","slug":"jre"},{"name":"jdk","slug":"jdk"},{"name":"java","slug":"java"}],"slug":"how-to-install-java-on-ec2-ubuntu-16-04","total":0}]}