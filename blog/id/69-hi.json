{"id":69,"title":"एडाप्टर पैटर्न क्या है?","imageUrl":"d3a5fc87-6928-4196-b3ae-d8e4ed5b9811_adapter-pattern.jpg","dateCreated":"2018-08-01T13:09:38.32Z","dateModified":"2018-08-01T17:20:54.998Z","contributedBy":"AskGif","content":"<p>In software engineering, the adapter pattern is a software design pattern (also known as Wrapper, an alternative naming shared with the Decorator pattern) that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.</p>\r\n<p>&nbsp;</p>\r\n<p>An example is an adapter that converts the interface of a Document Object Model of an XML document into a tree structure that can be displayed.</p>\r\n<p>The Adapter design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>The Adapter design pattern solves problems like:</p>\r\n<p>&nbsp;</p>\r\n<p>How can a class be reused that does not have an interface that a client requires?</p>\r\n<p>How can classes that have incompatible interfaces work together?</p>\r\n<p>How can an alternative interface be provided for a class?</p>\r\n<p>Often an (already existing) class can't be reused only because its interface doesn't conform to the interface clients require.</p>\r\n<p>&nbsp;</p>\r\n<p>The Adapter design pattern describes how to solve such problems:</p>\r\n<p>&nbsp;</p>\r\n<p>Define a separate Adapter class that converts the (incompatible) interface of a class (Adaptee) into another interface (Target) clients require.</p>\r\n<p>Work through an Adapter to work with (reuse) classes that do not have the required interface.</p>\r\n<p>The key idea in this pattern is to work through a separate Adapter that adapts the interface of an (already existing) class without changing it.&nbsp;</p>\r\n<p>Clients don't know whether they work with a Target class directly or through an Adapter with a class that does not have the Target interface.&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d3a5fc87-6928-4196-b3ae-d8e4ed5b9811_adapter-pattern.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-adapter-pattern","tags":[{"name":"प्रशन","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"interview","slug":"interview"}],"recommendations":[{"id":1700,"title":"अतुल्यकालिकता ट्यूटोरियल","imageUrl":"icon_0b59af20-c986-4d3f-b12b-304dc3797df3.png","dateCreated":"2020-11-20T07:45:02.912Z","dateModified":"2020-11-20T07:45:07.976Z","contributedBy":"sumitc91","content":"अतुल्यकालिक वर्कफ़्लोज़ महंगे ऑपरेशनों के लिए अनुरोध समय को कम करने में मदद करते हैं जो अन्यथा इन-लाइन में किए जाएंगे। वे समय-समय पर काम करने से पहले भी मदद कर सकते हैं, जैसे कि समय-समय पर डेटा एकत्र करना।\nसंदेश की कतारें<br />संदेश की कतारें संदेश प्राप्त, धारण और वितरित करती हैं। यदि कोई","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0b59af20-c986-4d3f-b12b-304dc3797df3.png","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"asynchronism-tutorial","total":0},{"id":1683,"title":"सिस्टम डिजाइन साक्षात्कार प्रश्न कैसे संपर्क करें?","imageUrl":"icon_fbaef721-6795-45be-bd0a-7e132d4a2788.jpg","dateCreated":"2020-11-20T04:35:47.854Z","dateModified":"2020-11-20T04:36:13.542Z","contributedBy":"sumitc91","content":"सिस्टम डिज़ाइन साक्षात्कार एक खुली हुई बातचीत है। आपसे इसका नेतृत्व करने की अपेक्षा की जाती है।\nआप चर्चा को निर्देशित करने के लिए निम्नलिखित चरणों का उपयोग कर सकते हैं। इस प्रक्रिया को ठोस बनाने में मदद करने के लिए, निम्न चरणों का उपयोग करके समाधान अनुभाग के साथ सिस्टम डिज़ाइन साक्षात्कार ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fbaef721-6795-45be-bd0a-7e132d4a2788.jpg","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"डिज़ाइन","slug":"design"},{"name":"interview","slug":"interview"},{"name":"प्रणाली-की-रूपरेखा","slug":"system-design"}],"slug":"how-to-approach-a-system-design-interview-question","total":0},{"id":211,"title":"What is a Heap?","imageUrl":"80944397-ba9b-4d97-bcce-176b789b4f04_Heap-Data-Structure.jpg","dateCreated":"2019-01-03T15:41:47.483Z","dateModified":"2019-01-03T15:42:05.659Z","contributedBy":"AskGif","content":"A heap is a tree with some special properties. The basic requirement of a heap is that the value of\r\na node must be &gt; (or &lt;) than the values of its children. This is called heap property. A heap also\r\nhas the additional property that all leaves should be at h or h &ndash; 1 le","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/80944397-ba9b-4d97-bcce-176b789b4f04_Heap-Data-Structure.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"min-heap","slug":"min-heap"},{"name":"Heap-Data-Structure","slug":"heap-data-structure"},{"name":"max-heap","slug":"max-heap"},{"name":"algorithm","slug":"algorithm"}],"slug":"what-is-a-heap","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}