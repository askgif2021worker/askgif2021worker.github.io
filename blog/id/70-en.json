{"id":70,"title":"What is Singleton pattern?","imageUrl":"cd3b4cdf-875c-4382-8f39-8e7c74356b19_singleton-pattern.png","dateCreated":"2018-08-01T13:32:33.457Z","dateModified":"2018-08-01T17:19:42.254Z","contributedBy":"AskGif","content":"<p>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton.</p>\r\n<p>&nbsp;</p>\r\n<p>There are some who are critical of the singleton pattern and consider it to be an anti-pattern in that it is frequently used in scenarios where it is not beneficial, introduces unnecessary restrictions in situations where a sole instance of a class is not actually required, and introduces global state into an application.</p>\r\n<p>The singleton design pattern is one of the twenty-three well-known \"Gang of Four\" design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>The singleton design pattern solves problems like:</p>\r\n<p>&nbsp;</p>\r\n<p>How can it be ensured that a class has only one instance?</p>\r\n<p>How can the sole instance of a class be accessed easily?</p>\r\n<p>How can a class control its instantiation?</p>\r\n<p>How can the number of instances of a class be restricted?</p>\r\n<p>The singleton design pattern describes how to solve such problems:</p>\r\n<p>&nbsp;</p>\r\n<p>Hide the constructor of the class.</p>\r\n<p>Define a public static operation (getInstance()) that returns the sole instance of the class.</p>\r\n<p>The key idea in this pattern is to make the class itself responsible for controlling its instantiation (that it is instantiated only once).</p>\r\n<p>The hidden constructor (declared private) ensures that the class can never be instantiated from outside the class.</p>\r\n<p>The public static operation can be accessed easily by using the class name and operation name (Singleton.getInstance()).</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cd3b4cdf-875c-4382-8f39-8e7c74356b19_singleton-pattern.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-singleton-pattern","tags":[{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"creational-pattern","slug":"creational-pattern"}],"recommendations":[{"id":144,"title":"How can I get the total size of a particular folder in C#?","imageUrl":"e83abf96-0566-4f2a-bc58-c4697e4bd464_folder-size.png","dateCreated":"2018-10-25T09:42:29.321Z","dateModified":"2018-10-25T09:42:29.321Z","contributedBy":"AskGif","content":"When I'm creating one application where I'm giving certain memory space to users and I want to calculate the total space he used in his folder and to show him/her the total space utilized and total remaining space that can be utilized. How can I calculate the size of the entire folder including a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e83abf96-0566-4f2a-bc58-c4697e4bd464_folder-size.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dot-net","slug":"dot-net"},{"name":"c-sharp","slug":"c-sharp"},{"name":"questions","slug":"questions"},{"name":"asp-dot-net","slug":"asp-dot-net"}],"slug":"how-can-i-get-the-total-size-of-a-particular-folder-in-c","total":0},{"id":65,"title":"What is Strategy pattern?","imageUrl":"ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","dateCreated":"2018-08-01T12:05:22.176Z","dateModified":"2018-08-01T17:24:43.716Z","contributedBy":"AskGif","content":"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which is a family of algorithms ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-strategy-pattern","total":0},{"id":58,"title":"How to solve Knapsack problem using Dynamic Programming","imageUrl":"b6cbe28d-ef39-4235-aa96-015ea58e9991_knapsack.jpg","dateCreated":"2018-07-31T07:51:18.76Z","dateModified":"2018-07-31T07:51:31.675Z","contributedBy":"AskGif","content":"The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b6cbe28d-ef39-4235-aa96-015ea58e9991_knapsack.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"recursion","slug":"recursion"},{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"java","slug":"java"}],"slug":"how-to-solve-knapsack-problem-using-dynamic-programming","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}