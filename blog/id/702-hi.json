{"id":702,"title":"Pushing and Pulling to and from Docker Hub","imageUrl":"8f5fb6c4-3070-4ce0-a3a9-ea0070a3fc7c_docker.jpg","dateCreated":"2019-09-18T10:49:21.559Z","dateModified":"2019-09-18T10:49:34.746Z","contributedBy":"AskGif","content":"<p>Docker is a set of platform-as-a-service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[6] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.</p>\r\n<p>&nbsp;</p>\r\n<p>The service has both free and premium tiers. The software that hosts the containers is called Docker Engine. It was first started in 2013 and is developed by Docker, Inc.</p>\r\n<p>Lesson Objectives</p>\r\n<p>Understanding where images come from</p>\r\n<p>Pulling a Docker image from Docker Hub</p>\r\n<p>Pushing a Docker image to Docker Hub</p>\r\n<p>Getting an image from Docker Hub</p>\r\n<p>Docker Hub is the place where open Docker images are stored. When we ran our first image by typing</p>\r\n<pre class=\"language-markup\"><code>docker run --rm -p 8787:8787 rocker/verse</code></pre>\r\n<p>&nbsp;</p>\r\n<p>the software first checked if this image is available on your computer and since it wasn&rsquo;t it downloaded the image from Docker Hub. So getting an image from Docker Hub works sort of automatically. If you just want to pull the image but not run it, you can also do</p>\r\n<pre class=\"language-markup\"><code>docker pull rocker/verse</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Getting an image to Docker Hub</p>\r\n<p>Imagine you made your own Docker image and would like to share it with the world you can sign up for an account on https://hub.docker.com/. After verifying your email you are ready to go and upload your first docker image.</p>\r\n<p>&nbsp;</p>\r\n<p>Log in on https://hub.docker.com/</p>\r\n<p>Click on Create Repository.</p>\r\n<p>Choose a name (e.g. verse_gapminder) and a description for your repository and click Create.</p>\r\n<p>Log in to the Docker Hub from the command line</p>\r\n<pre class=\"language-markup\"><code>docker login --username=yourhubusername --email=youremail@company.com</code></pre>\r\n<p>&nbsp;</p>\r\n<p>just with your own user name and email that you used for the account. Enter your password when prompted. If everything worked you will get a message similar to</p>\r\n<pre class=\"language-markup\"><code>WARNING: login credentials saved in /home/username/.docker/config.json\r\nLogin Succeeded</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Check the image ID using</p>\r\n<pre class=\"language-markup\"><code>docker images</code></pre>\r\n<p>&nbsp;</p>\r\n<p>and what you will see will be similar to</p>\r\n<pre class=\"language-markup\"><code>REPOSITORY              TAG       IMAGE ID         CREATED           SIZE\r\nverse_gapminder_gsl     latest    023ab91c6291     3 minutes ago     1.975 GB\r\nverse_gapminder         latest    bb38976d03cf     13 minutes ago    1.955 GB\r\nrocker/verse            latest    0168d115f220     3 days ago        1.954 GB</code></pre>\r\n<p>&nbsp;</p>\r\n<p>and tag your image</p>\r\n<pre class=\"language-markup\"><code>docker tag bb38976d03cf yourhubusername/verse_gapminder:firsttry</code></pre>\r\n<p>&nbsp;</p>\r\n<p>The number must match the image ID and :firsttry is the tag. In general, a good choice for a tag is something that will help you understand what this container should be used in conjunction with, or what it represents. If this container contains the analysis for a paper, consider using that paper&rsquo;s DOI or journal-issued serial number; if it&rsquo;s meant for use with a particular version of a code or data version control repo, that&rsquo;s a good choice too - whatever will help you understand what this particular image is intended for.</p>\r\n<p>&nbsp;</p>\r\n<p>Push your image to the repository you created</p>\r\n<pre class=\"language-markup\"><code>docker push yourhubusername/verse_gapminder</code></pre>\r\n<p>&nbsp;</p>\r\n<p>Your image is now available for everyone to use.</p>\r\n<p>&nbsp;</p>\r\n<p>Saving and loading images</p>\r\n<p>Pushing to Docker Hub is great, but it does have some disadvantages:</p>\r\n<p>&nbsp;</p>\r\n<p>Bandwidth - many ISPs have much lower upload bandwidth than download bandwidth.</p>\r\n<p>Unless you&rsquo;re paying extra for the private repositories, pushing equals publishing.</p>\r\n<p>When working on some clusters, each time you launch a job that uses a Docker container it pulls the container from Docker Hub, and if you are running many jobs, this can be really slow.</p>\r\n<p>Solutions to these problems can be to save the Docker container locally as a tar archive, and then you can easily load that to an image when needed.</p>\r\n<p>&nbsp;</p>\r\n<p>To save a Docker image after you have pulled, committed or built it you use the docker save command. For example, let's save a local copy of the verse_gapminder docker image we made:</p>\r\n<pre class=\"language-markup\"><code>docker save verse_gapminder &gt; verse_gapminder.tar</code></pre>\r\n<p>&nbsp;</p>\r\n<p>If we want to load that Docker container from the archived tar file in the future, we can use the docker load command:</p>\r\n<pre class=\"language-markup\"><code>docker load --input verse_gapminder.tar</code></pre>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8f5fb6c4-3070-4ce0-a3a9-ea0070a3fc7c_docker.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"pushing-and-pulling-to-and-from-docker-hub","tags":[{"name":"docker","slug":"docker"}],"recommendations":[{"id":407,"title":"Implementing Load Balancer with Nginx and Docker","imageUrl":"3f9f65bf-4674-4c33-9b20-c454378b960d_UDP-Load-Balancing-R9.jpg","dateCreated":"2019-06-25T02:53:26.711Z","dateModified":"2019-06-25T03:04:11.874Z","contributedBy":"AskGif","content":"The <a title=\"Nginx Reverse Proxy to ASP.NET Core &ndash; In Separate Docker Containers\" href=\"../../../../../blog/406/nginx-reverse-proxy-to-asp-net-core-in-separate-docker-containers/\" target=\"_blank\" rel=\"noopener\">previous post (Nginx Reverse Proxy to ASP.NET Core &ndash; In Separate Docker C","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3f9f65bf-4674-4c33-9b20-c454378b960d_UDP-Load-Balancing-R9.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dotnet-core","slug":"dotnet-core"},{"name":"load-balancing","slug":"load-balancing"},{"name":"docker","slug":"docker"},{"name":"nginx","slug":"nginx"}],"slug":"implementing-load-balancer-with-nginx-and-docker","total":0},{"id":406,"title":"Nginx Reverse Proxy to ASP.NET Core In Separate Docker Containers","imageUrl":"449e862c-42ac-4a0f-9de9-cc740bd72632_docker-kestral.jpg","dateCreated":"2019-06-25T02:38:46.733Z","dateModified":"2019-06-26T08:33:11.276Z","contributedBy":"AskGif","content":"The <a title=\"Nginx Reverse Proxy to ASP.NET Core &ndash; In Same Docker Container\" href=\"../../../../blog/405/nginx-reverse-proxy-to-asp-net-core-in-same-docker-container/\" target=\"_blank\" rel=\"noopener\">previous blog post (Nginx Reverse Proxy to ASP.NET Core &ndash; In Same Docker Container)</a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/449e862c-42ac-4a0f-9de9-cc740bd72632_docker-kestral.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"docker","slug":"docker"},{"name":"dotnet-core","slug":"dotnet-core"},{"name":"nginx","slug":"nginx"}],"slug":"nginx-reverse-proxy-to-asp.net-core-in-separate-docker-containers","total":0},{"id":405,"title":"Nginx Reverse Proxy to ASP.NET Core In Same Docker Container","imageUrl":"851b560d-0263-4e5d-9426-f7dad119ba6c_target-architecture-docker-nginx-ketrel.png","dateCreated":"2019-06-25T02:25:00.552Z","dateModified":"2019-06-26T08:34:17.75Z","contributedBy":"AskGif","content":"As mentioned in the <a title=\"Hosting ASP.NET Core in Docker\" href=\"../../../../blog/404/hosting-asp-net-core-in-docker/\" target=\"_blank\" rel=\"noopener\">previous post (Hosting ASP.NET Core in Docker)</a>, it is recommended to use something other than Kestrel as the front-line web server. In this ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/851b560d-0263-4e5d-9426-f7dad119ba6c_target-architecture-docker-nginx-ketrel.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"nginx","slug":"nginx"},{"name":"dotnet-core","slug":"dotnet-core"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"docker","slug":"docker"}],"slug":"nginx-reverse-proxy-to-asp.net-core-in-same-docker-container","total":0},{"id":404,"title":"Hosting ASP.NET Core in Docker","imageUrl":"f952156f-643a-4dff-8c46-88129bed8ede_dockerise-aspnetcore-app.jpg","dateCreated":"2019-06-24T15:35:42.674Z","dateModified":"2019-06-25T02:57:20.863Z","contributedBy":"AskGif","content":"The containerization trend has been growing for a while now in the industry. The idea is to &ldquo;containerize&rdquo; (or package) any application into a well-defined container. This allows the same packaged application to be deployed to run on any infrastructure.\r\n&nbsp;\r\nIn other","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f952156f-643a-4dff-8c46-88129bed8ede_dockerise-aspnetcore-app.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"docker","slug":"docker"},{"name":"asp-dot-net","slug":"asp-dot-net"},{"name":"dotnet-core","slug":"dotnet-core"},{"name":"nginx","slug":"nginx"}],"slug":"hosting-asp.net-core-in-docker","total":0}]}