{"id":71,"title":"कमांड पैटर्न क्या है?","imageUrl":"c126c75e-3ad2-4e51-816a-33df0c655224_Command_pattern.png","dateCreated":"2018-08-01T15:15:51.573Z","dateModified":"2018-08-01T17:23:38.001Z","contributedBy":"AskGif","content":"<p>In object-oriented programming, the command pattern is a behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.</p>\r\n<p>&nbsp;</p>\r\n<p>Four terms always associated with the command pattern are command, receiver, invoker and client. A command object knows about the receiver and invokes a method of the receiver. Values for parameters of the receiver method are stored in the command, the receiver object to execute these methods is also stored in the command object by aggregation. The receiver then does the work when the execute() method in command is called. An invoker object knows how to execute a command, and optionally does bookkeeping about the command execution. The invoker does not know anything about a concrete command, it knows only about the command interface. Invoker object(s), command objects and receiver objects are held by a client object, the client decides which receiver objects it assigns to the command objects, and which commands it assigns to the invoker. The client decides which commands to execute at which points. To execute a command, it passes the command object to the invoker object.</p>\r\n<p>&nbsp;</p>\r\n<p>Using command objects makes it easier to construct general components that need to delegate, sequence or execute method calls at a time of their choosing without the need to know the class of the method or the method parameters. Using an invoker object allows bookkeeping about command executions to be conveniently performed, as well as implementing different modes for commands, which are managed by the invoker object, without the need for the client to be aware of the existence of bookkeeping or modes.</p>\r\n<p>&nbsp;</p>\r\n<p>The Command design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>What problems can the Command design pattern solve?</p>\r\n<p>&nbsp;</p>\r\n<p>Coupling the invoker of a request to a particular request should be avoided. That is, hard-wired requests should be avoided.</p>\r\n<p>It should be possible to configure an object (that invokes a request) with a request.</p>\r\n<p>Implementing (hard-wiring) a request directly into a class is inflexible because it couples the class to a particular request at compile-time, which makes it impossible to specify a request at run-time.</p>\r\n<p>&nbsp;</p>\r\n<p>What solution does the Command design pattern describe?</p>\r\n<p>&nbsp;</p>\r\n<p>Define separate (command) objects that encapsulate a request.</p>\r\n<p>A class delegates a request to a command object instead of implementing a particular request directly.</p>\r\n<p>This enables one to configure a class with a command object that is used to perform a request. The class is no longer coupled to a particular request and has no knowledge (is independent) of how the request is carried out.</p>\r\n<p>source : wiki</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c126c75e-3ad2-4e51-816a-33df0c655224_Command_pattern.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-command-pattern","tags":[{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"design-patterns","slug":"design-patterns"}],"recommendations":[{"id":1712,"title":"सबसे हाल के वेब सर्वर प्रश्नों के परिणामों को बचाने के लिए एक कुंजी-मूल्य कैश कैसे डिज़ाइन करें","imageUrl":"icon_0e55c5af-9a54-497f-a246-ff16a71e6bbf.png","dateCreated":"2020-11-20T06:59:50.28Z","dateModified":"2020-11-20T06:59:59.352Z","contributedBy":"sumitc91","content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":null,"category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"डिज़ाइन","slug":"design"},{"name":"interview","slug":"interview"},{"name":"प्रणाली-की-रूपरेखा","slug":"system-design"}],"slug":"how-to-design-a-key-value-cache-to-save-the-results-of-the-most-recent-web-server-queries","total":0},{"id":103,"title":"How to implement PreOrder Traversal in Binary Tree?","imageUrl":"67ec7449-0264-479c-9093-17e4045d3a45_preorder-traversal.png","dateCreated":"2018-08-09T14:09:46.468Z","dateModified":"2018-08-09T14:28:57.791Z","contributedBy":"AskGif","content":"In pre-order traversal, each node is processed before (pre) either of it's sub-trees. This is the simplest traversal to understand. However, even though each node is processed before the subtrees, it still requires that some information must be maintained while moving down the tree.\r\nPreor","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/67ec7449-0264-479c-9093-17e4045d3a45_preorder-traversal.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"tree","slug":"tree"},{"name":"preorder","slug":"preorder"},{"name":"traversal","slug":"traversal"},{"name":"java","slug":"java"},{"name":"recursion","slug":"recursion"},{"name":"interview","slug":"interview"}],"slug":"how-to-implement-preorder-traversal-in-binary-tree","total":0},{"id":31,"title":"What is Asymptotic Analysis and how to calculate it?","imageUrl":"e2bab25d-22ad-45ac-baf5-67649dfc6f67_asymptotic-analysis.png","dateCreated":"2018-07-16T06:44:39.864Z","dateModified":"2018-07-16T06:46:02.415Z","contributedBy":"AskGif","content":"In mathematical analysis, asymptotic analysis, also known as asymptotics, is a method of describing limiting behavior.\r\nAs an illustration, suppose that we are interested in the properties of a function f(n) as n becomes very large. If f(n) = n^2 + 3n, then as n becomes very large, the ter","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e2bab25d-22ad-45ac-baf5-67649dfc6f67_asymptotic-analysis.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"loop","slug":"loop"},{"name":"nested-loop","slug":"nested-loop"},{"name":"interview","slug":"interview"},{"name":"algorithm","slug":"algorithm"},{"name":"asymptotic-analysis","slug":"asymptotic-analysis"},{"name":"logarithmic-complexity","slug":"logarithmic-complexity"}],"slug":"what-is-asymptotic-analysis-and-how-to-calculate-it","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}