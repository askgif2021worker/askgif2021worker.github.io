{"id":72,"title":"फेकाडे पैटर्न क्या है?","imageUrl":"509c3ba4-0943-4aba-aa8e-7bbf8cdad079_Facade_design_pattern.png","dateCreated":"2018-08-01T15:23:05.846Z","dateModified":"2018-08-01T17:22:14.215Z","contributedBy":"AskGif","content":"<p>The facade pattern (also spelt fa&ccedil;ade) is a software-design pattern commonly used with object-oriented programming. Analogous to a facade in architecture, a facade is an object that serves as a front-facing interface masking more complex underlying or structural code. A facade can:</p>\r\n<p>&nbsp;</p>\r\n<p>improve the readability and usability of a software library by masking interaction with more complex components behind a single (and often simplified) API</p>\r\n<p>provide a context-specific interface to more generic functionality (complete with context-specific input validation)</p>\r\n<p>serve as a launching point for a broader refactor of monolithic or tightly-coupled systems in favour of more loosely-coupled code</p>\r\n<p>Developers often use the facade design pattern when a system is very complex or difficult to understand because the system has a large number of interdependent classes or because its source code is unavailable. This pattern hides the complexities of the larger system and provides a simpler interface to the client. It typically involves a single wrapper class that contains a set of members required by the client. These members access the system on behalf of the facade client and hide the implementation details.</p>\r\n<p>&nbsp;</p>\r\n<p>The Facade design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>What problems can the Facade design pattern solve?</p>\r\n<p>&nbsp;</p>\r\n<p>To make a complex subsystem easier to use, a simple interface should be provided for a set of interfaces in the subsystem.</p>\r\n<p>The dependencies on a subsystem should be minimized.</p>\r\n<p>Clients that access a complex subsystem directly refer to (depend on) many different objects having different interfaces (tight coupling), which makes the clients hard to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>What solution does the Facade design pattern describe?</p>\r\n<p>&nbsp;</p>\r\n<p>Define a Facade object that</p>\r\n<p>&nbsp;</p>\r\n<p>implements a simple interface in terms of (by delegating to) the interfaces in the subsystem and</p>\r\n<p>may perform additional functionality before/after forwarding a request.</p>\r\n<p>This enables to work through a Facade object to minimize the dependencies on a subsystem.</p>\r\n<p>source: wiki</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/509c3ba4-0943-4aba-aa8e-7bbf8cdad079_Facade_design_pattern.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-facade-pattern","tags":[{"name":"structural-pattern","slug":"structural-pattern"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"}],"recommendations":[{"id":91,"title":"Find the Merging Point of Two Linked Lists.","imageUrl":"5c3e878f-f7b0-49be-a057-486f950a7a67_linked-list-merging.png","dateCreated":"2018-08-07T13:43:16.367Z","dateModified":"2018-08-08T10:36:40.67Z","contributedBy":"AskGif","content":"Given pointers to the head nodes of linked lists that merge together at some point, find the Node where the two lists merge. It is guaranteed that the two head Nodes will be different, and neither will be NULL.\r\nWe need to find the merging point of two linked lists.\r\n&nbsp;\r\n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5c3e878f-f7b0-49be-a057-486f950a7a67_linked-list-merging.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"stack","slug":"stack"},{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"},{"name":"java","slug":"java"},{"name":"प्रशन","slug":"questions"}],"slug":"find-the-merging-point-of-two-linked-lists","total":0},{"id":72,"title":"फेकाडे पैटर्न क्या है?","imageUrl":"509c3ba4-0943-4aba-aa8e-7bbf8cdad079_Facade_design_pattern.png","dateCreated":"2018-08-01T15:23:05.846Z","dateModified":"2018-08-01T17:22:14.215Z","contributedBy":"AskGif","content":"The facade pattern (also spelt fa&ccedil;ade) is a software-design pattern commonly used with object-oriented programming. Analogous to a facade in architecture, a facade is an object that serves as a front-facing interface masking more complex underlying or structural code. A facade can:\r\n<p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/509c3ba4-0943-4aba-aa8e-7bbf8cdad079_Facade_design_pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"structural-pattern","slug":"structural-pattern"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-facade-pattern","total":0},{"id":41,"title":"Find Total Number of Set Having given Combination Sum.","imageUrl":"908c9230-4049-4395-ab26-8f67e2999302_combination-sum.jpg","dateCreated":"2018-07-20T10:20:40.853Z","dateModified":"2018-07-20T10:20:51.514Z","contributedBy":"AskGif","content":"You are given a set of candidates (without duplicates) and a target number (target), you have to&nbsp;find all unique combinations in candidates where the candidate numbers sum to target.\r\nThe same repeated number may be chosen from candidates the unlimited number of times.\r\nWe will","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/908c9230-4049-4395-ab26-8f67e2999302_combination-sum.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"java","slug":"java"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"find-total-number-of-set-having-given-combination-sum","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}