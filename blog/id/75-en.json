{"id":75,"title":"What is State pattern?","imageUrl":"ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","dateCreated":"2018-08-01T15:58:57.611Z","dateModified":"2018-08-01T17:24:26.416Z","contributedBy":"AskGif","content":"<p>The state pattern is a behavioural software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface and implementing state transitions by invoking methods defined by the pattern's superclass.</p>\r\n<p>&nbsp;</p>\r\n<p>The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern's interface.</p>\r\n<p>&nbsp;</p>\r\n<p>This pattern is used in computer programming to encapsulate varying behaviour for the same object based on its internal state. This can be a cleaner way for an object to change its behaviour at runtime without resorting to large monolithic conditional statements and thus improve maintainability.</p>\r\n<p>&nbsp;</p>\r\n<p>The State design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>What problems can the State design pattern solve?</p>\r\n<p>&nbsp;</p>\r\n<p>An object should change its behaviour when its internal state changes.</p>\r\n<p>State-specific behaviour should be defined independently. That is, new states should be added and the behaviour of existing states should be changed independently.</p>\r\n<p>Implementing state-specific behaviour directly within a class is inflexible because it commits the class to a particular behaviour and makes it impossible to add a new state or change the behaviour of an existing state later independently from (without changing) the class.</p>\r\n<p>&nbsp;</p>\r\n<p>What solution does the State design pattern describe?</p>\r\n<p>&nbsp;</p>\r\n<p>Define separate (state) objects that encapsulate state-specific behaviour for each state. That is, define an interface (State) for performing the state-specific behaviour, and define classes that implement the interface for each state.</p>\r\n<p>A class delegates state-specific behaviour to its current state object instead of implementing state-specific behaviour directly.</p>\r\n<p>This makes a class independent of how state-specific behaviour is implemented. New states can be added by defining new state classes.&nbsp;</p>\r\n<p>A class can change its behaviour at run-time by changing its current state object.</p>\r\n<p>source : wiki</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-state-pattern","tags":[{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"design-patterns","slug":"design-patterns"}],"recommendations":[{"id":1696,"title":"What is Load balancer?","imageUrl":"icon_bf29fc63-378c-41be-832e-77c965333bfb.png","dateCreated":"2020-11-20T07:37:09.771Z","dateModified":"2020-11-20T07:37:16.113Z","contributedBy":"sumitc91","content":"Load balancers distribute incoming client requests to computing resources such as application servers and databases. In each case, the load balancer returns the response from the computing resource to the appropriate client. Load balancers are effective at:\nPreventing requests from going t","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bf29fc63-378c-41be-832e-77c965333bfb.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"what-is-load-balancer","total":0},{"id":98,"title":"What is a Stack?","imageUrl":"9e1a11b2-69e8-4626-ac63-8599d6c4f440_Lifo_stack.png","dateCreated":"2018-08-08T09:36:21.356Z","dateModified":"2018-08-08T09:36:29.634Z","contributedBy":"AskGif","content":"A stack is a simple data structure used for storing data (similar to Linked Lists). In stack the order in which the data arrives is important. The pile of plates of a cafeteria is a good example of a stack. The plates are added to the stack as they are cleaned. They are placed on the top. When a ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e1a11b2-69e8-4626-ac63-8599d6c4f440_Lifo_stack.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"stack","slug":"stack"},{"name":"questions","slug":"questions"}],"slug":"what-is-a-stack","total":0},{"id":70,"title":"What is Singleton pattern?","imageUrl":"cd3b4cdf-875c-4382-8f39-8e7c74356b19_singleton-pattern.png","dateCreated":"2018-08-01T13:32:33.457Z","dateModified":"2018-08-01T17:19:42.254Z","contributedBy":"AskGif","content":"In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more effici","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cd3b4cdf-875c-4382-8f39-8e7c74356b19_singleton-pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"creational-pattern","slug":"creational-pattern"}],"slug":"what-is-singleton-pattern","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}