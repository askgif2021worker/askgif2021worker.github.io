{"id":76,"title":"What is Proxy pattern?","imageUrl":"aaeafdf4-c3d7-4245-809f-7be5d5a4ac59_Proxy_Pattern.jpg","dateCreated":"2018-08-01T16:04:57.813Z","dateModified":"2018-08-01T17:22:28.188Z","contributedBy":"AskGif","content":"<p>In computer programming, the proxy pattern is a software design pattern.</p>\r\n<p>&nbsp;</p>\r\n<p>A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate. In short, a proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarded to the real object or can provide additional logic. In the proxy, extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object is invoked. For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.</p>\r\n<p>&nbsp;</p>\r\n<p>The Proxy design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>What problems can the Proxy design pattern solve?</p>\r\n<p>The access to an object should be controlled.</p>\r\n<p>Additional functionality should be provided when accessing an object.</p>\r\n<p>When accessing sensitive objects, for example, it should be possible to check that clients have the needed access rights.</p>\r\n<p>&nbsp;</p>\r\n<p>What solution does the Proxy design pattern describe?</p>\r\n<p>Define a separate Proxy object that</p>\r\n<p>&nbsp;</p>\r\n<p>can be used as a substitute for another object (Subject) and</p>\r\n<p>implements additional functionality to control the access to this subject.</p>\r\n<p>This enables to work through a Proxy object to perform additional functionality when accessing a subject. For example, to check the access rights of clients accessing a sensitive object.&nbsp;</p>\r\n<p>To act as a substitute for a subject, a proxy must implement the Subject interface. Clients can't tell whether they work with a subject or its proxy.</p>\r\n<p>source: wiki</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/aaeafdf4-c3d7-4245-809f-7be5d5a4ac59_Proxy_Pattern.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-proxy-pattern","tags":[{"name":"questions","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"interview","slug":"interview"}],"recommendations":[{"id":1692,"title":"Latency vs throughput","imageUrl":"icon_9e97e6f4-fec4-4e60-8bb0-618e048a04a5.jpg","dateCreated":"2020-11-20T07:28:07.813Z","dateModified":"2020-11-20T07:28:15.212Z","contributedBy":"sumitc91","content":"Latency is the time to perform some action or to produce some result.\nThroughput is the number of such actions or results per unit of time.\nGenerally, you should aim for maximal throughput with acceptable latency.","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e97e6f4-fec4-4e60-8bb0-618e048a04a5.jpg","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"interview","slug":"interview"}],"slug":"latency-vs-throughput","total":0},{"id":1690,"title":"How to Design a system that scales to millions of users on AWS","imageUrl":"icon_c4c206e1-63c2-46f8-a9b3-076b94e481a7.png","dateCreated":"2020-11-20T07:07:56.332Z","dateModified":"2020-11-20T07:08:06.04Z","contributedBy":"sumitc91","content":"Step 1: Outline use cases and constraints<br />Gather requirements and scope the problem. Ask questions to clarify use cases and constraints. Discuss assumptions.\nWithout an interviewer to address clarifying questions, we'll define some use cases and constraints.\nUse cases<br />Solv","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c4c206e1-63c2-46f8-a9b3-076b94e481a7.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"design","slug":"design"},{"name":"interview","slug":"interview"},{"name":"system-design","slug":"system-design"}],"slug":"how-to-design-a-system-that-scales-to-millions-of-users-on-aws","total":0},{"id":111,"title":"Find maximum element in binary tree without recursion.","imageUrl":"852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","dateCreated":"2018-08-16T08:35:11.21Z","dateModified":"2018-08-16T08:36:54.976Z","contributedBy":"AskGif","content":"We could have used either PreOrder, InOrder or PostOrder traversal to find the maximum in a Tree but as it is mentioned that we need to find the maximum without using Recursion.\r\nUsing Level Order Traversal we can find the Maximum element. We just need to observe the elements data while de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"level-order","slug":"level-order"},{"name":"tree","slug":"tree"},{"name":"questions","slug":"questions"},{"name":"binary-tree","slug":"binary-tree"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"traversal","slug":"traversal"}],"slug":"find-maximum-element-in-binary-tree-without-recursion","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}