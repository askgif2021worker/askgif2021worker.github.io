{"id":77,"title":"What is Composite pattern?","imageUrl":"7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","dateCreated":"2018-08-01T16:08:32.863Z","dateModified":"2018-08-01T17:21:15.513Z","contributedBy":"AskGif","content":"<p>In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that are treated the same way as a single instance of the same type of object. The intent of a composite is to \"compose\" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.</p>\r\n<p>&nbsp;</p>\r\n<p>The Composite design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.</p>\r\n<p>&nbsp;</p>\r\n<p>What problems can the Composite design pattern solve?</p>\r\n<p>&nbsp;</p>\r\n<p>A part-whole hierarchy should be represented so that clients can treat part and whole objects uniformly.</p>\r\n<p>A part-whole hierarchy should be represented as a tree structure.</p>\r\n<p>When defining (1) Part objects and (2) Whole objects that act as containers for Part objects, clients must treat them separately, which complicates client code.</p>\r\n<p>&nbsp;</p>\r\n<p>What solution does the Composite design pattern describe?</p>\r\n<p>&nbsp;</p>\r\n<p>Define a unified Component interface for both part (Leaf) objects and whole (Composite) objects.</p>\r\n<p>Individual Leaf objects implement the Component interface directly, and Composite objects forward request to their child components.</p>\r\n<p>This enables clients to work through the Component interface to treat Leaf and Composite objects uniformly: Leaf objects perform a request directly, and Composite objects forward the request to their child components recursively downwards the tree structure. This makes client classes easier to implement, change, test, and reuse.</p>\r\n<p>source: wiki</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-composite-pattern","tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"interview","slug":"interview"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"questions","slug":"questions"}],"recommendations":[{"id":101,"title":"What is a Tree Data Structure?","imageUrl":"503573f2-35b2-4cd4-bf84-46f6f1792a74_Binary_tree.png","dateCreated":"2018-08-08T12:16:52.093Z","dateModified":"2018-08-08T12:17:00.046Z","contributedBy":"AskGif","content":"A tree is a data structure similar to a linked list but instead of each node pointing simply to the next node in a linear fashion, each node points to a number of nodes. A tree is an example of non-linear data structures. A Tree structure is a way of representing the hierarchical nature of a stru","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/503573f2-35b2-4cd4-bf84-46f6f1792a74_Binary_tree.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"tree","slug":"tree"},{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"}],"slug":"what-is-a-tree-data-structure","total":0},{"id":93,"title":"How will you display a linked list from the end?","imageUrl":"34a6fa21-0896-44c8-a8c2-686bacb89acc_linked-list-reverse.png","dateCreated":"2018-08-07T15:22:07.903Z","dateModified":"2018-08-07T15:22:25.327Z","contributedBy":"AskGif","content":"Traverse recursively till the end of the linked list. While returning back, we can print the elements. This approach will take Time Complexity O(n) as we are traversing through each element at least once and the space complexity of O(n) as we are forming a Stack in the recursion.\r\nJava Sol","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/34a6fa21-0896-44c8-a8c2-686bacb89acc_linked-list-reverse.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"},{"name":"java","slug":"java"}],"slug":"how-will-you-display-a-linked-list-from-the-end","total":0},{"id":59,"title":"How to Solve Coin Change Problem using Dynamic Programming for Minimum number of ways possible?","imageUrl":"450a3f20-633e-4f13-aa8e-dce34b85cf72_make-change.png","dateCreated":"2018-07-31T09:15:15.694Z","dateModified":"2018-07-31T09:15:30.599Z","contributedBy":"AskGif","content":"Coin Change Problem is also known as Making Change Problem.\r\nThe change-making problem, also known as the minimum coin change problem, addresses the question of finding the minimum number of coins (of certain denominations) that add up to a given amount of money. It is a knapsack type prob","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/450a3f20-633e-4f13-aa8e-dce34b85cf72_make-change.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"recursion","slug":"recursion"},{"name":"java","slug":"java"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"how-to-solve-coin-change-problem-using-dynamic-programming-for-minimum-number-of-ways-possible","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}