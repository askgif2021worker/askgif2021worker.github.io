{"id":78,"title":"What is Design Patterns?","imageUrl":"8a74e74a-3070-41f8-9ddf-4d3b87119ee7_design-patterns.png","dateCreated":"2018-08-01T16:29:58.336Z","dateModified":"2018-08-01T16:30:51.417Z","contributedBy":"AskGif","content":"<p>Design Patterns: Elements of Reusable Object-Oriented Software is a software engineering book describing software design patterns. The book's authors are Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk.</p>\r\n<p>&nbsp;</p>\r\n<p>It has been influential to the field of software engineering and is regarded as an important source for object-oriented design theory and practice. More than 500,000 copies have been sold in English and in 13 other languages. The authors are often referred to as the Gang of Four (GoF).</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Patterns by Type</strong></p>\r\n<p>&nbsp;</p>\r\n<p><strong>1. Creational pattern</strong></p>\r\n<p>Creational patterns are ones that create objects for you, rather than having you instantiate objects directly. This gives your program more flexibility in deciding which objects need to be created for a given case.</p>\r\n<p><a title=\"Factory Pattern\" href=\"../../../../blog/68/what-is-factory-pattern/\">Factory Pattern</a></p>\r\n<p><a title=\"Singleton Pattern\" href=\"../../../../blog/70/what-is-singleton-pattern/\">Singleton Pattern</a></p>\r\n<p>&nbsp;</p>\r\n<p><strong>2. Structural</strong></p>\r\n<p>These concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality.</p>\r\n<p><a title=\"Adapter Pattern\" href=\"../../../../blog/69/what-is-adapter-pattern/\">Adapter Pattern</a></p>\r\n<p><a title=\"Composite Pattern\" href=\"../../../../blog/77/what-is-composite-pattern/\">Composite Pattern</a></p>\r\n<p><a title=\"Decorator Pattern\" href=\"../../../../blog/67/what-is-decorator-pattern/\">Decorator Pattern</a></p>\r\n<p><a title=\"Facade Pattern\" href=\"../../../../blog/72/what-is-facade-pattern/\">Facade Pattern</a></p>\r\n<p><a title=\"Proxy Pattern\" href=\"../../../../blog/76/what-is-proxy-pattern/\">Proxy Pattern</a></p>\r\n<p>&nbsp;</p>\r\n<p><strong>3.Behavioural</strong></p>\r\n<p>Most of these design patterns are specifically concerned with communication between objects.</p>\r\n<p><a title=\"Command Pattern\" href=\"../../../../blog/71/what-is-command-pattern/\">Command Pattern</a></p>\r\n<p><a title=\"Iterator Pattern\" href=\"../../../../blog/74/what-is-iterator-pattern/\">Iterator Pattern</a></p>\r\n<p><a title=\"Observer Pattern\" href=\"../../../../blog/66/what-is-observer-pattern/\">Observer Pattern</a></p>\r\n<p><a title=\"State Pattern\" href=\"../../../../blog/75/what-is-state-pattern/\">State Pattern</a></p>\r\n<p><a title=\"Strategy Pattern\" href=\"../../../../blog/65/what-is-strategy-pattern/\">Strategy Pattern</a></p>\r\n<p><a title=\"Template Pattern\" href=\"../../../../blog/73/what-is-template-pattern/\">Template Pattern</a></p>\r\n<p>&nbsp;</p>\r\n<p>source: wiki</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8a74e74a-3070-41f8-9ddf-4d3b87119ee7_design-patterns.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"what-is-design-patterns","tags":[{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"java","slug":"java"},{"name":"c-sharp","slug":"c-sharp"},{"name":"design-patterns","slug":"design-patterns"}],"recommendations":[{"id":1354,"title":"Check If It Is a Straight Line - Array - Easy - LeetCode","imageUrl":"03d7d58f-132d-41af-a0cf-b7b073ff2712-line.jpg","dateCreated":"2020-06-12T07:32:27.376Z","dateModified":"2020-06-12T07:32:38.621Z","contributedBy":"AskGif","content":"You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.\r\n&nbsp;\r\nExample 1:\r\nInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\r\nOutput: true","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/03d7d58f-132d-41af-a0cf-b7b073ff2712-line.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"c-sharp","slug":"c-sharp"},{"name":"array","slug":"array"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"आसान","slug":"easy"}],"slug":"check-if-it-is-a-straight-line-array-easy-leetcode","total":0},{"id":410,"title":"एक डिजाइन प्रणाली क्या है?","imageUrl":"bbd0b699-c047-4b3b-96b2-d631122cf4c2_Design-System.jpg","dateCreated":"2019-06-26T02:33:29.017Z","dateModified":"2019-06-26T02:33:46.63Z","contributedBy":"AskGif","content":"Many of us working in the tech space have undoubtedly encountered challenges in communicating with members of our product teams. More specifically, there seems to be a disconnect between designers and developers. However, effective communication within these spaces is crucial to building excellen","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bbd0b699-c047-4b3b-96b2-d631122cf4c2_Design-System.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-a-design-system","total":0},{"id":111,"title":"Find maximum element in binary tree without recursion.","imageUrl":"852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","dateCreated":"2018-08-16T08:35:11.21Z","dateModified":"2018-08-16T08:36:54.976Z","contributedBy":"AskGif","content":"We could have used either PreOrder, InOrder or PostOrder traversal to find the maximum in a Tree but as it is mentioned that we need to find the maximum without using Recursion.\r\nUsing Level Order Traversal we can find the Maximum element. We just need to observe the elements data while de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"level-order","slug":"level-order"},{"name":"tree","slug":"tree"},{"name":"प्रशन","slug":"questions"},{"name":"binary-tree","slug":"binary-tree"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"traversal","slug":"traversal"}],"slug":"find-maximum-element-in-binary-tree-without-recursion","total":0},{"id":99,"title":"How can we get Minimum of Stack in a Constant Time O(1).","imageUrl":"77f6c59d-6a61-4c58-891d-d667885d9d48_min-stack.jpg","dateCreated":"2018-08-08T10:08:59.278Z","dateModified":"2018-08-08T10:09:16.991Z","contributedBy":"AskGif","content":"It is required to create a method getMinimum() which will give us the minimum in the current stack in O(1) time complexity. we will be using another stack for this to store the minimum at any particular point in time.\r\nWe will take an auxiliary stack that maintains the minimum of all value","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/77f6c59d-6a61-4c58-891d-d667885d9d48_min-stack.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"stack","slug":"stack"},{"name":"प्रशन","slug":"questions"}],"slug":"how-can-we-get-minimum-of-stack-in-a-constant-time-o1","total":0}]}