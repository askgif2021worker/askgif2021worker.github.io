{"id":89,"title":"How to Check if a linked list is either NULL-terminated or ends in a cycle (cyclic)","imageUrl":"6ff093e0-9c78-4bb2-861e-5b96b8c47fcc_linkedlist-circle.png","dateCreated":"2018-08-07T11:26:31.699Z","dateModified":"2018-08-07T11:36:20.812Z","contributedBy":"AskGif","content":"<p>So the question given is to check if the Given Linked list is having a cycle or Not?</p>\r\n<p>We will be using Floyd Cycle to find the solution of the given problem.</p>\r\n<p>It uses 2 pointers moving at different speeds to walking the linked list. Once they enter the loop they are expected to meet, which denotes that there is a loop. This works because the only way a faster moving pointer would point to the same location as a slower moving pointer is if somehow the entire list or a part of it is circular.</p>\r\n<p>&nbsp;</p>\r\n<p>Java Solution for the following problem is given below:</p>\r\n<pre class=\"language-java\"><code>package askgif.linkedlist;\r\n\r\nclass ListNode{\r\n    public int data;\r\n    public ListNode next;\r\n};\r\n\r\npublic class CircularNodeExist {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n        ListNode node1 = new ListNode();\r\n        ListNode node2 = new ListNode();\r\n        ListNode node3 = new ListNode();\r\n        ListNode node4 = new ListNode();\r\n        ListNode node5 = new ListNode();\r\n        ListNode node6 = new ListNode();\r\n        node1.data = 1;\r\n        node2.data = 2;\r\n        node3.data = 3;\r\n        node4.data = 4;\r\n        node5.data = 5;\r\n        node6.data = 6;\r\n        node1.next = node2;\r\n        node2.next = node3;\r\n        node3.next = node4;\r\n        node4.next = node5;\r\n        node5.next = node6;\r\n        node6.next = node3;\r\n\t\t\r\n\t\tSystem.out.println(IsLoopExist(node1));\r\n\t\t\r\n\r\n\t}\r\n\r\n\tprivate static Boolean IsLoopExist(ListNode ll) {\r\n\t\t\r\n\t\tListNode slowPtr = ll;\r\n\t\tListNode fastPtr = ll;\r\n\t\t\r\n\t\twhile(true){\r\n\t\t\tif(fastPtr == null || fastPtr.next == null)\r\n\t\t\t\treturn false;\r\n            slowPtr = slowPtr.next;\r\n            fastPtr = fastPtr.next.next;\r\n            if(slowPtr == fastPtr)\r\n            \treturn true;\r\n            \r\n        }\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\ntrue</code></pre>\r\n<p>The time complexity of the above solution is O(n) as we are traversing through the entire linked list once.</p>\r\n<p>Space Complexity: O(1)</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ff093e0-9c78-4bb2-861e-5b96b8c47fcc_linkedlist-circle.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-to-check-if-a-linked-list-is-either-null-terminated-or-ends-in-a-cycle-cyclic","tags":[{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"},{"name":"java","slug":"java"},{"name":"प्रशन","slug":"questions"}],"recommendations":[{"id":1712,"title":"सबसे हाल के वेब सर्वर प्रश्नों के परिणामों को बचाने के लिए एक कुंजी-मूल्य कैश कैसे डिज़ाइन करें","imageUrl":"icon_0e55c5af-9a54-497f-a246-ff16a71e6bbf.png","dateCreated":"2020-11-20T06:59:50.28Z","dateModified":"2020-11-20T06:59:59.352Z","contributedBy":"sumitc91","content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":null,"category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"डिज़ाइन","slug":"design"},{"name":"interview","slug":"interview"},{"name":"प्रणाली-की-रूपरेखा","slug":"system-design"}],"slug":"how-to-design-a-key-value-cache-to-save-the-results-of-the-most-recent-web-server-queries","total":0},{"id":77,"title":"What is Composite pattern?","imageUrl":"7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","dateCreated":"2018-08-01T16:08:32.863Z","dateModified":"2018-08-01T17:21:15.513Z","contributedBy":"AskGif","content":"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that are treated the same way as a single instance of the same type of object. The intent of a composite is to \"compose\" objects into tree structures to represent pa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"interview","slug":"interview"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"प्रशन","slug":"questions"}],"slug":"what-is-composite-pattern","total":0},{"id":33,"title":"Generate all the possible k-ary strings of length and digit upto k","imageUrl":"9ed0c558-acca-470f-9406-597cf137ad77_n-ary-tree-1.jpg","dateCreated":"2018-07-16T08:22:56.122Z","dateModified":"2018-07-16T13:00:34.748Z","contributedBy":"AskGif","content":"You have been given an integer n that corresponds to the length of the array and k which corresponds to the digit value possible in the array. The task is to print all the possible strings using those k values of length n. the array can consist only value digits up to k.\r\nJava Solution:</p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9ed0c558-acca-470f-9406-597cf137ad77_n-ary-tree-1.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"backtracking","slug":"backtracking"},{"name":"algorithm","slug":"algorithm"},{"name":"java","slug":"java"},{"name":"recursion","slug":"recursion"},{"name":"array","slug":"array"}],"slug":"generate-all-the-possible-k-ary-strings-of-length-and-digit-upto-k","total":0},{"id":1,"title":"EC2 उबंटू 16-04 पर जावा कैसे स्थापित करें","imageUrl":"d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","dateCreated":"2018-06-20T13:02:11.29Z","dateModified":"2018-07-07T15:23:51.439Z","contributedBy":"AskGif","content":"यह ब्लॉग ब्लॉग के निरंतरता में है एडब्ल्यूएस फ्री टियर योजना पर ईसी 2 उदाहरण कैसे बनाएं। यदि आप चूक गए तो कृपया पुनरीक्षण करें। सबसे पहले हमें उबंटू (16.04) उदाहरण प्राप्त करने की आवश्यकता है। इसके लिए हम एडब्ल्यूएस कंसोल का उपयोग कर सकते हैं। एक बार ubuntu मशीन ऊपर है और चल रहा है निम्नलिखित दृष","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","category":{"name":"शिक्षण","slug":"tutorials"},"tags":[{"name":"jre","slug":"jre"},{"name":"jdk","slug":"jdk"},{"name":"java","slug":"java"}],"slug":"how-to-install-java-on-ec2-ubuntu-16-04","total":0}]}