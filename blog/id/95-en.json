{"id":95,"title":"Given two sorted Linked Lists, we need to merge them into the third list in sorted order.","imageUrl":"9f2fba57-f42f-47d6-a5dd-a7f6708ecd38_merge-sorted-linked-list.png","dateCreated":"2018-08-07T16:21:56.506Z","dateModified":"2018-08-07T16:22:04.996Z","contributedBy":"AskGif","content":"<p>We are Given two Linked Lists which are already sorted. We need to create a new linked list using these two linked lists and it is required to be in sorted order. One way we can do is to append second string in the first one and then will apply quick sort which will be having a time complexity of O(nlogn).&nbsp;</p>\r\n<p>Can we do it in linear a&nbsp;time?</p>\r\n<p>Yes, as it is given that both linked list is already sorted then we will just compare their head elements and will keep appending in a new linked list.</p>\r\n<p>Java solution for the above question is below:</p>\r\n<pre class=\"language-java\"><code>package askgif.linkedlist;\r\n\r\nimport java.util.Stack;\r\n\r\nclass ListNode{\r\n    public int data;\r\n    public ListNode next;\r\n    ListNode(int data){\r\n    \tthis.data = data;\r\n    }\r\n};\r\n\r\npublic class LinkedListNode {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n        ListNode node1 = new ListNode(1);\r\n        ListNode node2 = new ListNode(3);\r\n        ListNode node3 = new ListNode(5);\r\n        ListNode node4 = new ListNode(7);\r\n        ListNode node5 = new ListNode(9);\r\n        \r\n        ListNode node6 = new ListNode(2);\r\n        ListNode node7 = new ListNode(4);\r\n        ListNode node8 = new ListNode(6);\r\n        ListNode node9 = new ListNode(8);\r\n        ListNode node10 = new ListNode(10);\r\n        ListNode node11 = new ListNode(11);\r\n        \r\n        node1.next = node2;\r\n        node2.next = node3;\r\n        node3.next = node4;\r\n        node4.next = node5;\r\n        node5.next = null;\r\n        \r\n        \r\n        node6.next = node7;\r\n        node7.next = node8;\r\n        node8.next = node9;\r\n        node9.next = node10;\r\n        node10.next = node11;\r\n        node11.next = null;\r\n        \r\n        ListNode result = MergeLinkedList(node1,node6);\r\n        PrintLinkedList(result);\r\n\t\t\r\n\t}\r\n\r\n\tprivate static void PrintLinkedList(ListNode result) {\r\n\t\twhile(result != null) {\r\n\t\t\tSystem.out.println(result.data);\r\n\t\t\tresult = result.next;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate static ListNode MergeLinkedList(ListNode node1, ListNode node2) {\r\n\t\t\r\n\t\tListNode result = null;\r\n\t\tif(node1 == null)\r\n\t\t\treturn node2;\r\n\t\tif(node2 == null)\r\n\t\t\treturn node1;\r\n\t\tif(node1.data &lt;= node2.data) {\r\n\t\t\tresult = node1;\r\n\t\t\tresult.next = MergeLinkedList(node1.next, node2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult = node2;\r\n\t\t\tresult.next = MergeLinkedList(node1, node2.next);\r\n\t\t}\r\n\t\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n</code></pre>\r\n<p>Time Complexity: O(n)</p>\r\n<p>Space Complexity: O(n) as we are using a new linked list for storage.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9f2fba57-f42f-47d6-a5dd-a7f6708ecd38_merge-sorted-linked-list.png","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"given-two-sorted-linked-lists-we-need-to-merge-them-into-the-third-list-in-sorted-order","tags":[{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"},{"name":"java","slug":"java"},{"name":"linked-list","slug":"linked-list"}],"recommendations":[{"id":94,"title":"Check whether the given Linked List length is even or odd?","imageUrl":"c9526b27-eb8a-4d38-a1f2-66e2e9198224_Odd-Even-Linked-List.jpg","dateCreated":"2018-08-07T15:40:27.371Z","dateModified":"2018-08-07T15:40:35.099Z","contributedBy":"AskGif","content":"The question is to find if the given linked list length is even or odd in optimum time. We will use a&nbsp;fast pointer, i.e 2x pointer. the fast pointer moves two nodes at a time. In the end, we will either be having the node as Null or the Node will be the last node in the Linked list. if the n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c9526b27-eb8a-4d38-a1f2-66e2e9198224_Odd-Even-Linked-List.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"linked-list","slug":"linked-list"},{"name":"java","slug":"java"}],"slug":"check-whether-the-given-linked-list-length-is-even-or-odd","total":0},{"id":22,"title":"Find all possible palindromic partitions in a given string","imageUrl":"7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","dateCreated":"2018-07-13T06:11:22.557Z","dateModified":"2018-07-13T06:51:51.236Z","contributedBy":"AskGif","content":"We will be using recursion for solving this problem.&nbsp;<span style=\"font-family: 'Open Sans', Helvetica, Arial, Verdana, sans-serif; font-size: 15px; text-align: justify;\">The idea is to navigate through each substring starting from first character and to check if it is a palindrome. If it is,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"recursion","slug":"recursion"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"array","slug":"array"},{"name":"java","slug":"java"}],"slug":"find-all-possible-palindromic-partitions-in-a-given-string","total":0},{"id":20,"title":"Coin Change Problem Algorithm Solution","imageUrl":"ceddc0d4-c5a2-46bd-b91e-f5413ff64816_Coin-Change-Problem.jpg","dateCreated":"2018-07-12T13:29:09.634Z","dateModified":"2018-07-12T13:29:09.634Z","contributedBy":"AskGif","content":"The change-making problem, also known as minimum coin change problem, addresses the question of finding the minimum number of coins (of certain denominations) that add up to a given amount of money refer coin change problem. It is a knapsack type problem, and has applications wider than just curr","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ceddc0d4-c5a2-46bd-b91e-f5413ff64816_Coin-Change-Problem.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"java","slug":"java"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"}],"slug":"coin-change-problem-algorithm-solution","total":0},{"id":1,"title":"How to install java on EC2 Ubuntu 16-04","imageUrl":"d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","dateCreated":"2018-06-20T13:02:11.29Z","dateModified":"2018-07-07T15:23:51.439Z","contributedBy":"AskGif","content":"This blog is in continuation to blog&nbsp;<a href=\"../../../../../blog/3/how-to-create-ec2-instance-on-aws-free-tier-plan/?lang=en\" target=\"_blank\" rel=\"noopener\">How to create EC2 instance on AWS Free Tier plan.</a>&nbsp;if you missed please revisit.\r\nFirst we need to get an Ubuntu (16.04","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d11fed6a-e800-4779-8cee-f7f5c8c42ee8_00_lead_image_java_in_ubuntu.png","category":{"name":"tutorials","slug":"tutorials"},"tags":[{"name":"jre","slug":"jre"},{"name":"jdk","slug":"jdk"},{"name":"java","slug":"java"}],"slug":"how-to-install-java-on-ec2-ubuntu-16-04","total":0}]}