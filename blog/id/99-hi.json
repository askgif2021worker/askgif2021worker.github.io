{"id":99,"title":"How can we get Minimum of Stack in a Constant Time O(1).","imageUrl":"77f6c59d-6a61-4c58-891d-d667885d9d48_min-stack.jpg","dateCreated":"2018-08-08T10:08:59.278Z","dateModified":"2018-08-08T10:09:16.991Z","contributedBy":"AskGif","content":"<p>It is required to create a method getMinimum() which will give us the minimum in the current stack in O(1) time complexity. we will be using another stack for this to store the minimum at any particular point in time.</p>\r\n<p>We will take an auxiliary stack that maintains the minimum of all values in the stack. Also, assume that each element of the stack is less than it's below elements. For simplicity let us call the auxiliary stack as min stack.</p>\r\n<p>When we pop the main stack, pop the min stack too. When we push the main stack, push either the new element or the current minimum, whichever is lower. At any point, if we want to get the minimum then wee justs need to return the top element fro the min stack. Let us take some example and trace out.</p>\r\n<p>Java solution for the given problem is as below:</p>\r\n<pre class=\"language-java\"><code>package askgif.linkedlist;\r\n\r\nimport java.util.Stack;\r\n\r\nclass MyStack{\r\n\tStack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();\r\n\tStack&lt;Integer&gt; minStack = new Stack&lt;Integer&gt;();\r\n\t\r\n\tpublic MyStack() {\r\n\t\tstack = new Stack&lt;Integer&gt;();\r\n\t\tminStack = new Stack&lt;Integer&gt;();\r\n\t}\r\n\t\r\n\tpublic void push(int data) {\r\n\t\tstack.push(data);\r\n\t\tif(minStack.isEmpty())\r\n\t\t\tminStack.push(data);\r\n\t\telse if(minStack.peek() &gt; data)\r\n\t\t\tminStack.push(data);\r\n\t}\r\n\t\r\n\tpublic int pop() {\r\n\t\tif(stack.isEmpty())\r\n\t\t\treturn 0;\r\n\t\tint data = stack.pop();\r\n\t\tif(minStack.peek() == data)\r\n\t\t\tminStack.pop();\r\n\t\treturn data;\r\n\t}\r\n\t\r\n\tpublic void printMinimum() {\r\n\t\tSystem.out.println(minStack.peek());\r\n\t}\r\n}\r\n\r\npublic class Stacks {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tMyStack stack = new MyStack();\r\n\t\tstack.push(10);\r\n\t\tstack.push(5);\r\n\t\tstack.printMinimum();\r\n\t\t\r\n\t\tstack.push(15);\r\n\t\tstack.push(12);\r\n\t\tstack.printMinimum();\r\n\t\tstack.pop();\r\n\t\tstack.printMinimum();\r\n\t\tstack.pop();\r\n\t\tstack.printMinimum();\r\n\t\tstack.pop();\r\n\t\tstack.printMinimum();\r\n\r\n\t}\r\n\r\n}\r\n</code></pre>\r\n<pre class=\"language-markup\"><code>output:\r\n\r\n5\r\n5\r\n5\r\n5\r\n10\r\n</code></pre>\r\n<p>Time Complexity: O(1)</p>\r\n<p>Space Complexity: O(n) for an extra stack.</p>","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/77f6c59d-6a61-4c58-891d-d667885d9d48_min-stack.jpg","subContents":[],"category":{"name":"coding","slug":"coding"},"slug":"how-can-we-get-minimum-of-stack-in-a-constant-time-o1","tags":[{"name":"interview","slug":"interview"},{"name":"stack","slug":"stack"},{"name":"प्रशन","slug":"questions"}],"recommendations":[{"id":1543,"title":"Crawler Log Folder - Stacks - Easy - LeetCode","imageUrl":"icon_32e1873a-b4f9-4731-8f9d-98d4d9928abe.jpg","dateCreated":"2020-10-03T14:41:29.811Z","dateModified":"2020-10-03T14:41:42.417Z","contributedBy":"sumitc91","content":"The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).<br />\"./\" : Remain in the sam","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32e1873a-b4f9-4731-8f9d-98d4d9928abe.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"crawler-log-folder-stacks-easy-leetcode","total":0},{"id":77,"title":"What is Composite pattern?","imageUrl":"7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","dateCreated":"2018-08-01T16:08:32.863Z","dateModified":"2018-08-01T17:21:15.513Z","contributedBy":"AskGif","content":"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that are treated the same way as a single instance of the same type of object. The intent of a composite is to \"compose\" objects into tree structures to represent pa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"interview","slug":"interview"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"प्रशन","slug":"questions"}],"slug":"what-is-composite-pattern","total":0},{"id":22,"title":"Find all possible palindromic partitions in a given string","imageUrl":"7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","dateCreated":"2018-07-13T06:11:22.557Z","dateModified":"2018-07-13T06:51:51.236Z","contributedBy":"AskGif","content":"We will be using recursion for solving this problem.&nbsp;<span style=\"font-family: 'Open Sans', Helvetica, Arial, Verdana, sans-serif; font-size: 15px; text-align: justify;\">The idea is to navigate through each substring starting from first character and to check if it is a palindrome. If it is,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7247cde2-f280-4fec-a154-4bf06572b088_palindromes.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"string","slug":"string"},{"name":"recursion","slug":"recursion"},{"name":"algorithm","slug":"algorithm"},{"name":"interview","slug":"interview"},{"name":"array","slug":"array"},{"name":"java","slug":"java"}],"slug":"find-all-possible-palindromic-partitions-in-a-given-string","total":0},{"id":17,"title":"Write a Simple Hello World Program in JAVA.","imageUrl":"f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","dateCreated":"2018-07-12T06:44:09.184Z","dateModified":"2018-07-12T06:44:59.673Z","contributedBy":"AskGif","content":"Writing a simple hello world programm in java.&nbsp;Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f91c0323-afd7-4b3e-aa1f-71c79e9913f2_hello-world-java.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"java","slug":"java"}],"slug":"write-a-simple-hello-world-program-in-java","total":0}]}