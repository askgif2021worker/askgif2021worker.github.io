[{"id":1577,"title":"Maximum Depth of N-ary Tree - Tree - Easy - LeetCode","imageUrl":"icon_5c7d09b8-c901-46a5-b6f3-f23acbc38034.jpg","dateCreated":"2020-10-07T07:48:32.081Z","dateModified":"2020-10-07T07:49:17.954Z","contributedBy":"sumitc91","content":"Given a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5c7d09b8-c901-46a5-b6f3-f23acbc38034.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"maximum-depth-of-n-ary-tree-tree-easy-leetcode","total":449},{"id":1576,"title":"Diameter of Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_d2a25c60-c9a0-4e0c-a9e0-59e5b4819710.jpg","dateCreated":"2020-10-07T07:36:06.073Z","dateModified":"2020-10-07T07:36:14.644Z","contributedBy":"sumitc91","content":"Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nExample:<br />Given a binary tree<br />&nbsp; &nbsp; &nbsp; &nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d2a25c60-c9a0-4e0c-a9e0-59e5b4819710.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"diameter-of-binary-tree-tree-easy-leetcode","total":449},{"id":1575,"title":"Minimum Absolute Difference in BST - Tree - Easy - LeetCode","imageUrl":"icon_38fc5735-489b-44c1-9767-758b3fe5e9c0.jpg","dateCreated":"2020-10-07T05:54:38.093Z","dateModified":"2020-10-07T05:54:50.146Z","contributedBy":"sumitc91","content":"Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.\nExample:\nInput:\n&nbsp; &nbsp;1<br />&nbsp; &nbsp; \\<br />&nbsp; &nbsp; &nbsp;3<br />&nbsp; &nbsp; /<br />&nbsp; &nbsp;2\nOutput:<br />1\nExpl","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38fc5735-489b-44c1-9767-758b3fe5e9c0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-absolute-difference-in-bst-tree-easy-leetcode","total":449},{"id":1574,"title":"Find Mode in Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_7e61ce7c-697d-4270-8d1b-f48c3bda649b.jpg","dateCreated":"2020-10-07T05:05:11.566Z","dateModified":"2020-10-07T05:05:22.255Z","contributedBy":"sumitc91","content":"Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\nAssume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.<br />The right subtree o","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7e61ce7c-697d-4270-8d1b-f48c3bda649b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"find-mode-in-binary-search-tree-tree-easy-leetcode","total":449},{"id":1573,"title":"Sum of Left Leaves - Tree - Easy - LeetCode","imageUrl":"icon_7428e4d9-3ec0-4c51-b78a-160b42c2d247.jpg","dateCreated":"2020-10-06T14:29:29.283Z","dateModified":"2020-10-06T14:29:36.996Z","contributedBy":"sumitc91","content":"Find the sum of all left leaves in a given binary tree.\nExample:\n&nbsp; &nbsp; 3<br />&nbsp; &nbsp;/ \\<br />&nbsp; 9 &nbsp;20<br />&nbsp; &nbsp; / &nbsp;\\<br />&nbsp; &nbsp;15 &nbsp; 7\nThere are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7428e4d9-3ec0-4c51-b78a-160b42c2d247.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"sum-of-left-leaves-tree-easy-leetcode","total":449},{"id":1572,"title":"Binary Tree Paths - Tree - Easy - LeetCode","imageUrl":"icon_93874631-b0aa-4d7d-a413-084a6380763d.jpg","dateCreated":"2020-10-06T14:22:08.31Z","dateModified":"2020-10-06T14:22:21.599Z","contributedBy":"sumitc91","content":"Given a binary tree, return all root-to-leaf paths.\nNote: A leaf is a node with no children.\nExample:\nInput:\n&nbsp; &nbsp;1<br />&nbsp;/ &nbsp; \\<br />2 &nbsp; &nbsp; 3<br />&nbsp;\\<br />&nbsp; 5\nOutput: [\"1-&gt;2-&gt;5\", \"1-&gt;3\"]\nExplanation: All root-","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/93874631-b0aa-4d7d-a413-084a6380763d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"binary-tree-paths-tree-easy-leetcode","total":449},{"id":1571,"title":"Path Sum - Tree - Easy - LeetCode","imageUrl":"icon_6a94315a-4048-49fe-b47e-88c1b010b589.jpg","dateCreated":"2020-10-06T14:06:06.304Z","dateModified":"2020-10-06T14:06:16.586Z","contributedBy":"sumitc91","content":"Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\nNote: A leaf is a node with no children.\nExample:\nGiven the below binary tree and sum = 22,\n&nbsp; &nbsp; &nbsp; 5<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6a94315a-4048-49fe-b47e-88c1b010b589.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"path-sum-tree-easy-leetcode","total":449},{"id":1570,"title":"Minimum Depth of Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_8accc3c3-568f-41c5-802c-290cc011c286.jpg","dateCreated":"2020-10-06T13:56:54.355Z","dateModified":"2020-10-06T13:57:05.072Z","contributedBy":"sumitc91","content":"Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.\nExample:\nGiven binary tree [3,9,20,null,null,15,7],\n&nbsp; &n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8accc3c3-568f-41c5-802c-290cc011c286.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-depth-of-binary-tree-tree-easy-leetcode","total":449},{"id":1569,"title":"Balanced Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_a02672ff-1bfd-42f4-b3e1-900ad9c690d2.jpg","dateCreated":"2020-10-06T13:45:55.261Z","dateModified":"2020-10-06T13:46:08.3Z","contributedBy":"sumitc91","content":"Given a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\n&nbsp;\nExample 1:\nGiven the following tre","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a02672ff-1bfd-42f4-b3e1-900ad9c690d2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"balanced-binary-tree-tree-easy-leetcode","total":449},{"id":1568,"title":"Convert Sorted Array to Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_8270223b-6b31-4eef-b37f-adfc7656ad5f.jpg","dateCreated":"2020-10-06T13:26:01.868Z","dateModified":"2020-10-06T13:26:11.017Z","contributedBy":"sumitc91","content":"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\nExample:\nGiven the s","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8270223b-6b31-4eef-b37f-adfc7656ad5f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"convert-sorted-array-to-binary-search-tree-tree-easy-leetcode","total":449},{"id":1567,"title":"Binary Tree Level Order Traversal II - Tree - Easy - LeetCode","imageUrl":"icon_a136a23c-7eb7-4aa1-9a2b-ed03cc026177.jpg","dateCreated":"2020-10-06T13:16:59.748Z","dateModified":"2020-10-06T13:17:09.034Z","contributedBy":"sumitc91","content":"Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\nFor example:<br />Given binary tree [3,9,20,null,null,15,7],<br />&nbsp; &nbsp; 3<br />&nbsp; &nbsp;/ \\<br />&nbsp; 9 &nbsp;20<br />&nbsp; &nbsp","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a136a23c-7eb7-4aa1-9a2b-ed03cc026177.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"binary-tree-level-order-traversal-ii-tree-easy-leetcode","total":449},{"id":1566,"title":"Maximum Depth of Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_46f118cf-bf37-4c04-90b1-2d41a7561e3d.jpg","dateCreated":"2020-10-06T13:08:41.296Z","dateModified":"2020-10-06T13:08:50.491Z","contributedBy":"sumitc91","content":"Given a binary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNote: A leaf is a node with no children.\nExample:\nGiven binary tree [3,9,20,null,null,15,7],\n&nbsp; &n","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/46f118cf-bf37-4c04-90b1-2d41a7561e3d.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"maximum-depth-of-binary-tree-tree-easy-leetcode","total":449}]