[{"id":210,"title":"What is a Priority Queue?","imageUrl":"09a0405d-4490-4161-bb38-f3f69f75356d_Priority-Queue.jpg","dateCreated":"2019-01-03T15:28:09.812Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In computer science, a priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a \"priority\" associated with it. In a priority queue, an element with high priority is served before an element with low priority. In some ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/09a0405d-4490-4161-bb38-f3f69f75356d_Priority-Queue.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-a-priority-queue"},{"id":130,"title":"How to find the longest border of a string?","imageUrl":"6ceece0b-804d-4456-95dc-5a9ca6c24cda_string-algorithm.png","dateCreated":"2018-09-01T08:01:12.733Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The border of a string is a substring which is both a proper prefix and proper suffix of the string &mdash; \"proper\" meaning that the whole string does not count as a substring. The longest border of x is \"ab\". The longest border of y is \"abab\" (the prefix and suffix can overlap).\r\nMore de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ceece0b-804d-4456-95dc-5a9ca6c24cda_string-algorithm.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-find-the-longest-border-of-a-string"},{"id":111,"title":"Find maximum element in binary tree without recursion.","imageUrl":"852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","dateCreated":"2018-08-16T08:35:11.21Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"We could have used either PreOrder, InOrder or PostOrder traversal to find the maximum in a Tree but as it is mentioned that we need to find the maximum without using Recursion.\r\nUsing Level Order Traversal we can find the Maximum element. We just need to observe the elements data while de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"find-maximum-element-in-binary-tree-without-recursion"},{"id":53,"title":"How to Find Maximum Value Contiguous Subsequence?","imageUrl":"8a4e1acc-7d87-4759-81e9-b9987ddc13c8_max-subarray.jpg","dateCreated":"2018-07-30T09:53:10.091Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The input to this problem is an array A[1...n] of real numbers. You need to find out what the highest value is that can be obtained by summing up all numbers of a contiguous subsequence A[i], A[i+1],...A[j] of A. If A does not contain negative numbers, the problem is trivial and can be solved by ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8a4e1acc-7d87-4759-81e9-b9987ddc13c8_max-subarray.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-find-maximum-value-contiguous-subsequence"},{"id":52,"title":"How to Find Longest Common Subsequence ?","imageUrl":"c7357e0f-63f6-4670-b96d-4dc337b28500_longest-common-subsequence.jpg","dateCreated":"2018-07-30T08:26:45.294Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences). It differs from the longest common substring problem: unlike substrings, subsequences are not required to occupy consecutive pos","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c7357e0f-63f6-4670-b96d-4dc337b28500_longest-common-subsequence.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-find-longest-common-subsequence-"},{"id":48,"title":"How to find Nth Number in a Factorial Series?","imageUrl":"2e78fea0-eed7-4df1-a902-7e0d3c22c87c_Factorial.jpg","dateCreated":"2018-07-27T12:51:29.219Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In mathematics, the factorial of a non-negative integer n, denoted by n! is the product of all positive integers less than or equal to n. For example,\r\nThe value of 0! is 1, according to the convention for an empty product.\r\nThe factorial operation is encountered in many areas of ma","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2e78fea0-eed7-4df1-a902-7e0d3c22c87c_Factorial.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-find-nth-number-in-a-factorial-series"},{"id":46,"title":"Introduction to Dynamic Programming","imageUrl":"b3b81f05-c0c6-45b2-9704-928b6314e50e_dp.gif","dateCreated":"2018-07-27T08:21:38.763Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Dynamic programming is both a mathematical optimization method and a computer programming method. The method was developed by Richard Bellman in the 1950s and has found applications in numerous fields, from aerospace engineering to economics. In both contexts, it refers to simplifying a complicat","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b3b81f05-c0c6-45b2-9704-928b6314e50e_dp.gif","category":{"name":null,"slug":null},"tags":[],"slug":"introduction-to-dynamic-programming"},{"id":43,"title":"Find Minimum Path Sum in a given 2D Array.","imageUrl":"21f4c7b9-3c4a-41bc-b7ff-5e7538352285_minimum-path-sum.png","dateCreated":"2018-07-20T11:37:19.143Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\r\nNote: You can only move either down or right at any point in time.\r\n<pre class=\"language-markup\"><code>Input:\r\n[\r\n  [1,3,1],\r\n  [1,5,1]","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/21f4c7b9-3c4a-41bc-b7ff-5e7538352285_minimum-path-sum.png","category":{"name":null,"slug":null},"tags":[],"slug":"find-minimum-path-sum-in-a-given-2d-array"},{"id":42,"title":"Calculate all Unique Path count can be taken by Robot.","imageUrl":"16fa179e-eb35-4230-8fbb-ac1d1325a150_robot_maze.png","dateCreated":"2018-07-20T11:03:59.177Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"A robot is located at the top-left corner of a m x n grid ( 'Start' ).\r\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid ( 'Finish' ).\r\nHow many are possible unique paths there?\r\nWe will be usi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/16fa179e-eb35-4230-8fbb-ac1d1325a150_robot_maze.png","category":{"name":null,"slug":null},"tags":[],"slug":"calculate-all-unique-path-count-can-be-taken-by-robot"},{"id":41,"title":"Find Total Number of Set Having given Combination Sum.","imageUrl":"908c9230-4049-4395-ab26-8f67e2999302_combination-sum.jpg","dateCreated":"2018-07-20T10:20:40.853Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"You are given a set of candidates (without duplicates) and a target number (target), you have to&nbsp;find all unique combinations in candidates where the candidate numbers sum to target.\r\nThe same repeated number may be chosen from candidates the unlimited number of times.\r\nWe will","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/908c9230-4049-4395-ab26-8f67e2999302_combination-sum.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"find-total-number-of-set-having-given-combination-sum"},{"id":40,"title":"Maximize House Robbery Amount that can be made.","imageUrl":"2c7d01cc-e4f1-489a-b1c8-572f0ae4224f_robbery.jpg","dateCreated":"2018-07-20T09:39:03.571Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Given that you are a professional robber who is planning to rob houses along a street. Constraint given is that each house has a certain amount of money stashed, and adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2c7d01cc-e4f1-489a-b1c8-572f0ae4224f_robbery.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"maximize-house-robbery-amount-that-can-be-made"},{"id":39,"title":"Find total ways to reach the nth stair using step 1, 2 or 3.","imageUrl":"c6232f16-4b85-4461-b18d-31e1c54de4a6_frog.jpg","dateCreated":"2018-07-20T09:06:49.744Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"A frog is jumping up a staircase with n steps and can hop either 1 step, 2 steps, or 3 steps at a time.\r\nImplement a method to count how many possible ways the frog can run up the stairs.\r\nWe will be using recursive approach first to solve this problem\r\n<pre class=\"language-java","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c6232f16-4b85-4461-b18d-31e1c54de4a6_frog.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"find-total-ways-to-reach-the-nth-stair-using-step-1-2-or-3"}]