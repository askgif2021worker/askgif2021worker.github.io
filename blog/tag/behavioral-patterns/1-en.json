[{"id":75,"title":"What is State pattern?","imageUrl":"ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","dateCreated":"2018-08-01T15:58:57.611Z","dateModified":"2018-08-01T17:24:26.416Z","contributedBy":"AskGif","content":"The state pattern is a behavioural software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface and implementing state transitions b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-state-pattern"},{"id":74,"title":"What is Iterator pattern?","imageUrl":"2ae1cc9a-b9ca-4dd5-8faf-ae38f2bdd6c3_Iterator-pattern.png","dateCreated":"2018-08-01T15:49:45.656Z","dateModified":"2018-08-01T17:23:52.861Z","contributedBy":"AskGif","content":"In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container's elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus canno","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2ae1cc9a-b9ca-4dd5-8faf-ae38f2bdd6c3_Iterator-pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"interview","slug":"interview"}],"slug":"what-is-iterator-pattern"},{"id":73,"title":"What is Template pattern?","imageUrl":"1573c83b-c91b-4944-be45-b6b2f866e450_Template_Method.png","dateCreated":"2018-08-01T15:41:25.221Z","dateModified":"2018-08-02T10:59:06.373Z","contributedBy":"AskGif","content":"In software engineering, the template method pattern is a behavioural design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure. The template m","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1573c83b-c91b-4944-be45-b6b2f866e450_Template_Method.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"questions","slug":"questions"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"interview","slug":"interview"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-template-pattern"},{"id":71,"title":"What is Command pattern?","imageUrl":"c126c75e-3ad2-4e51-816a-33df0c655224_Command_pattern.png","dateCreated":"2018-08-01T15:15:51.573Z","dateModified":"2018-08-01T17:23:38.001Z","contributedBy":"AskGif","content":"In object-oriented programming, the command pattern is a behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c126c75e-3ad2-4e51-816a-33df0c655224_Command_pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"questions","slug":"questions"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-command-pattern"},{"id":66,"title":"What is Observer pattern ?","imageUrl":"e69dad7f-de9e-4693-9048-db8d81419863_Observer-pattern.png","dateCreated":"2018-08-01T12:21:30.92Z","dateModified":"2018-08-01T17:24:10.49Z","contributedBy":"AskGif","content":"The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\r\n&nbsp;\r\nIt is mainly used to implement dist","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e69dad7f-de9e-4693-9048-db8d81419863_Observer-pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-observer-pattern-"},{"id":65,"title":"What is Strategy pattern?","imageUrl":"ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","dateCreated":"2018-08-01T12:05:22.176Z","dateModified":"2018-08-01T17:24:43.716Z","contributedBy":"AskGif","content":"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which is a family of algorithms ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"questions","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-strategy-pattern"}]