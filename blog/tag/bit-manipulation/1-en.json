[{"id":1564,"title":"Number of Steps to Reduce a Number to Zero - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_fd517175-fcc4-4ea1-ab97-525cf26aeabc.jpg","dateCreated":"2020-10-06T09:43:53.011Z","dateModified":"2020-10-06T09:44:13.892Z","contributedBy":"sumitc91","content":"Given a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.\n&nbsp;\nExample 1:\nInput: num = 14<br />Output: 6<br />Explanation:&nbsp;<br />Step 1) 14 is","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fd517175-fcc4-4ea1-ab97-525cf26aeabc.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"number-of-steps-to-reduce-a-number-to-zero-bit-manipulation-easy-leetcode","total":9},{"id":1563,"title":"Prime Number of Set Bits in Binary Representation - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_8ff23690-a1ec-487a-a860-51faf94bafb7.jpg","dateCreated":"2020-10-06T09:32:36.994Z","dateModified":"2020-10-06T09:32:44.766Z","contributedBy":"sumitc91","content":"Given two integers L and R, find the count of numbers in the range [L, R] (inclusive) having a prime number of set bits in their binary representation.\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8ff23690-a1ec-487a-a860-51faf94bafb7.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"prime-number-of-set-bits-in-binary-representation-bit-manipulation-easy-leetcode","total":9},{"id":1562,"title":"Binary Number with Alternating Bits - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_ddcad4a4-fb4d-4431-a952-364d812a1226.jpg","dateCreated":"2020-10-06T09:24:47.325Z","dateModified":"2020-10-06T09:24:58.56Z","contributedBy":"sumitc91","content":"Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n&nbsp;\nExample 1:\nInput: n = 5<br />Output: true<br />Explanation: The binary representation of 5 is: 101<br />Example 2:\nInput: n = 7<br />","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ddcad4a4-fb4d-4431-a952-364d812a1226.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"binary-number-with-alternating-bits-bit-manipulation-easy-leetcode","total":9},{"id":1561,"title":"Number Complement - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_b356a014-8311-4317-ac21-b43fa1f6ea7c.jpg","dateCreated":"2020-10-06T08:39:30.029Z","dateModified":"2020-10-06T08:39:39.785Z","contributedBy":"sumitc91","content":"Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.\n&nbsp;\nExample 1:\nInput: num = 5<br />Output: 2<br />Explanation: The binary representation of 5 is 101 (no leading zero bits), and its comple","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b356a014-8311-4317-ac21-b43fa1f6ea7c.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"number-complement-bit-manipulation-easy-leetcode","total":9},{"id":1560,"title":"Hamming Distance - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_542a96ad-853b-4bcf-ae4a-fb6955795b7b.jpg","dateCreated":"2020-10-06T06:44:12.218Z","dateModified":"2020-10-06T06:45:08.921Z","contributedBy":"sumitc91","content":"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, calculate the Hamming distance.\nNote:<br />0 &le; x, y &lt; 231.\nExample:\nInput: x = 1, y = 4\nOutput: 2\nExplana","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/542a96ad-853b-4bcf-ae4a-fb6955795b7b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"hamming-distance-bit-manipulation-easy-leetcode","total":9},{"id":1559,"title":"Convert a Number to Hexadecimal - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_4f47ebec-4f69-46d8-99f1-1eda50d9e297.jpg","dateCreated":"2020-10-06T06:35:39.592Z","dateModified":"2020-10-06T06:35:50.179Z","contributedBy":"sumitc91","content":"Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two&rsquo;s complement method is used.\nNote:\nAll letters in hexadecimal (a-f) must be in lowercase.<br />The hexadecimal string must not contain extra leading 0s. If the number is zero, it is re","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4f47ebec-4f69-46d8-99f1-1eda50d9e297.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"convert-a-number-to-hexadecimal-bit-manipulation-easy-leetcode","total":9},{"id":1558,"title":"Power of Four - Easy - LeetCode","imageUrl":"icon_e049be7d-b0a4-4781-8dd9-03334b15e391.jpg","dateCreated":"2020-10-05T12:57:40.213Z","dateModified":"2020-10-05T12:57:53.062Z","contributedBy":"sumitc91","content":"Given an integer (signed 32 bits), write a function to check whether it is a power of 4.\nExample 1:\nInput: 16<br />Output: true<br />Example 2:\nInput: 5<br />Output: false<br />Follow up: Could you solve it without loops/recursion?\n<pre class=\"language-csharp\"><code>publi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e049be7d-b0a4-4781-8dd9-03334b15e391.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"power-of-four-easy-leetcode","total":9},{"id":1557,"title":"Number of 1 Bits - Easy - LeetCode","imageUrl":"icon_81eaa719-b550-436a-8b77-e8698457ee39.jpg","dateCreated":"2020-10-05T12:39:20.373Z","dateModified":"2020-10-05T12:39:37.539Z","contributedBy":"sumitc91","content":"Write a function that takes an unsigned integer and return the number of '1' bits it has (also known as the Hamming weight).\n&nbsp;\nExample 1:\nInput: 00000000000000000000000000001011<br />Output: 3<br />Explanation: The input binary string 00000000000000000000000000001011 has","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/81eaa719-b550-436a-8b77-e8698457ee39.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"number-of-1-bits-easy-leetcode","total":9},{"id":1556,"title":"Reverse Bits - Bit Manipulation - Easy - LeetCode","imageUrl":"icon_d4b2e860-6b2d-4640-82db-af6eab2ed36a.jpg","dateCreated":"2020-10-05T11:53:31.208Z","dateModified":"2020-10-05T11:53:39.094Z","contributedBy":"sumitc91","content":"Reverse bits of a given 32 bits unsigned integer.\n&nbsp;\nExample 1:\nInput: 00000010100101000001111010011100<br />Output: 00111001011110000010100101000000<br />Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so re","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d4b2e860-6b2d-4640-82db-af6eab2ed36a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"reverse-bits-bit-manipulation-easy-leetcode","total":9}]