[{"id":1548,"title":"Walking Robot Simulation - Greedy - Easy - LeetCode","imageUrl":"icon_7809996e-466c-4a9b-84d4-a004918a469b.jpg","dateCreated":"2020-10-05T06:58:36.636Z","dateModified":"2020-10-05T06:58:55.25Z","contributedBy":"sumitc91","content":"A robot on an infinite grid starts at point (0, 0) and faces north. &nbsp;The robot can receive one of three possible types of commands:\n-2: turn left 90 degrees<br />-1: turn right 90 degrees<br />1 &lt;= x &lt;= 9: move forward x units<br />Some of the grid squares are obstacles.&nbsp;</","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7809996e-466c-4a9b-84d4-a004918a469b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"greedy","slug":"greedy"},{"name":"leetcode","slug":"leetcode"}],"slug":"walking-robot-simulation-greedy-easy-leetcode","total":360},{"id":1547,"title":"Lemonade Change - Greedy - Easy - LeetCode","imageUrl":"icon_0a82ebf9-36e4-4238-904f-94c734cc7c37.jpg","dateCreated":"2020-10-05T04:57:40.267Z","dateModified":"2020-10-05T04:59:25.263Z","contributedBy":"sumitc91","content":"At a lemonade stand, each lemonade costs $5.&nbsp;\nCustomers are standing in a queue to buy from you, and order one at a time (in the order specified by bills).\nEach customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. &nbsp;You must provide the correct ch","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0a82ebf9-36e4-4238-904f-94c734cc7c37.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"greedy","slug":"greedy"},{"name":"leetcode","slug":"leetcode"}],"slug":"lemonade-change-greedy-easy-leetcode","total":360},{"id":1545,"title":"Last Stone Weight - Heap - Easy - LeetCode","imageUrl":"icon_a5fa374c-d4ce-4495-8c28-cbdcb7b9822a.jpg","dateCreated":"2020-10-04T17:15:38.203Z","dateModified":"2020-10-04T17:15:52.351Z","contributedBy":"sumitc91","content":"We have a collection of stones, each stone has a positive integer weight.\nEach turn, we choose the two heaviest stones and smash them together. &nbsp;Suppose the stones have weights x and y with x &lt;= y. &nbsp;The result of this smash is:\nIf x == y, both stones are totally destroy","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a5fa374c-d4ce-4495-8c28-cbdcb7b9822a.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"heap-data-structure","slug":"heap-data-structure"},{"name":"leetcode","slug":"leetcode"},{"name":"max-heap","slug":"max-heap"}],"slug":"last-stone-weight-heap-easy-leetcode","total":360},{"id":1544,"title":"Kth Largest Element in a Stream - Heap - Easy - LeetCode","imageUrl":"icon_f23b4939-7f3f-421f-8b39-469fd582351b.jpg","dateCreated":"2020-10-04T15:39:52.643Z","dateModified":"2020-10-04T15:40:25.992Z","contributedBy":"sumitc91","content":"Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nYour KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f23b4939-7f3f-421f-8b39-469fd582351b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"}],"slug":"kth-largest-element-in-a-stream-heap-easy-leetcode","total":360},{"id":1543,"title":"Crawler Log Folder - Stacks - Easy - LeetCode","imageUrl":"icon_32e1873a-b4f9-4731-8f9d-98d4d9928abe.jpg","dateCreated":"2020-10-03T14:41:29.811Z","dateModified":"2020-10-03T14:41:42.417Z","contributedBy":"sumitc91","content":"The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).<br />\"./\" : Remain in the sam","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/32e1873a-b4f9-4731-8f9d-98d4d9928abe.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"crawler-log-folder-stacks-easy-leetcode","total":360},{"id":1542,"title":"Build an Array With Stack Operations - Stacks - Easy - LeetCode","imageUrl":"icon_6eb33e3a-ba38-40de-8766-8b6fbbe8a890.jpg","dateCreated":"2020-10-03T14:34:50.701Z","dateModified":"2020-10-03T14:35:00.504Z","contributedBy":"sumitc91","content":"Given an array target and an integer n. In each iteration, you will read a number from &nbsp;list = {1,2,3..., n}.\nBuild the target array using the following operations:\nPush: Read a new element from the beginning list, and push it in the array.<br />Pop: delete the last element of ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6eb33e3a-ba38-40de-8766-8b6fbbe8a890.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"build-an-array-with-stack-operations-stacks-easy-leetcode","total":360},{"id":1541,"title":"Remove All Adjacent Duplicates In String - Stacks - Easy - LeetCode","imageUrl":"icon_6ae93657-84e0-4b3f-8529-91be14799cde.jpg","dateCreated":"2020-10-03T14:20:21.307Z","dateModified":"2020-10-03T14:20:32.425Z","contributedBy":"sumitc91","content":"Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\nWe repeatedly make duplicate removals on S until we no longer can.\nReturn the final string after all such duplicate removals have been made. &nbsp;It is","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ae93657-84e0-4b3f-8529-91be14799cde.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"remove-all-adjacent-duplicates-in-string-stacks-easy-leetcode","total":360},{"id":1540,"title":"Remove Outermost Parentheses - Stacks - Easy - LeetCode","imageUrl":"icon_6315b40b-4be9-4bf6-97e7-331f0ce835f3.jpg","dateCreated":"2020-10-03T14:10:42.368Z","dateModified":"2020-10-03T14:10:53.793Z","contributedBy":"sumitc91","content":"A valid parentheses string is either empty (\"\"), \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation. &nbsp;For example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings.\nA valid parentheses string S is primitive i","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6315b40b-4be9-4bf6-97e7-331f0ce835f3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"remove-outermost-parentheses-stacks-easy-leetcode","total":360},{"id":1539,"title":"Baseball Game - Stacks - Easy - LeetCode","imageUrl":"icon_89c84ae6-9105-4f18-97a7-650643f21278.jpg","dateCreated":"2020-10-03T13:45:23.779Z","dateModified":"2020-10-03T13:45:53.68Z","contributedBy":"sumitc91","content":"You're now a baseball game point recorder.\nGiven a list of strings, each string can be one of the 4 following types:\nInteger (one round's score): Directly represents the number of points you get in this round.<br />\"+\" (one round's score): Represents that the points you get in this ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/89c84ae6-9105-4f18-97a7-650643f21278.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"baseball-game-stacks-easy-leetcode","total":360},{"id":1538,"title":"Next Greater Element I - Stacks - Easy - LeetCode","imageUrl":"icon_77322c88-6360-41ec-8f11-72888f8f5b19.jpg","dateCreated":"2020-10-03T12:43:07.03Z","dateModified":"2020-10-03T12:43:25.509Z","contributedBy":"sumitc91","content":"You are given two arrays (without duplicates) nums1 and nums2 where nums1&rsquo;s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.\nThe Next Greater Number of a number x in nums1 is the first greater number to its rig","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/77322c88-6360-41ec-8f11-72888f8f5b19.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"next-greater-element-i-stacks-easy-leetcode","total":360},{"id":1537,"title":"Implement Queue using Stacks - Stack - Easy - LeetCode","imageUrl":"icon_c936be58-88e9-44a4-8a17-123b102b3e6f.jpg","dateCreated":"2020-10-03T11:45:37.423Z","dateModified":"2020-10-03T11:46:14.88Z","contributedBy":"sumitc91","content":"Implement the following operations of a queue using stacks.\npush(x) -- Push element x to the back of the queue.<br />pop() -- Removes the element from in front of the queue.<br />peek() -- Get the front element.<br />empty() -- Return whether the queue is empty.<br />Notes:\nYou must","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c936be58-88e9-44a4-8a17-123b102b3e6f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"implement-queue-using-stacks-stack-easy-leetcode","total":360},{"id":1536,"title":"Implement Stack using Queues - Stack - Easy - LeetCode","imageUrl":"icon_d4702131-8b2b-4f45-a635-10e5efea282b.jpg","dateCreated":"2020-10-03T11:27:53.355Z","dateModified":"2020-10-03T11:28:06.825Z","contributedBy":"sumitc91","content":"Implement the following operations of a stack using queues.\npush(x) -- Push element x onto stack.<br />pop() -- Removes the element on top of the stack.<br />top() -- Get the top element.<br />empty() -- Return whether the stack is empty.<br />Example:\nMyStack stack = new MyStack();","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d4702131-8b2b-4f45-a635-10e5efea282b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"stack","slug":"stack"}],"slug":"implement-stack-using-queues-stack-easy-leetcode","total":360}]