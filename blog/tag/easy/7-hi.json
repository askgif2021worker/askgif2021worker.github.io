[{"id":1584,"title":"Average of Levels in Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_00a270d3-3254-4f73-a90d-6153174f3a15.jpg","dateCreated":"2020-10-08T04:10:04.182Z","dateModified":"2020-10-08T04:10:29.201Z","contributedBy":"sumitc91","content":"Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.<br />Example 1:<br />Input:<br />&nbsp; &nbsp; 3<br />&nbsp; &nbsp;/ \\<br />&nbsp; 9 &nbsp;20<br />&nbsp; &nbsp; / &nbsp;\\<br />&nbsp; &nbsp;15 &nbsp; 7<br />Output: [3, 14.5, 11]<br />Expl","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/00a270d3-3254-4f73-a90d-6153174f3a15.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"average-of-levels-in-binary-tree-tree-easy-leetcode","total":360},{"id":1583,"title":"Merge Two Binary Trees - Tree - Easy - LeetCode","imageUrl":"icon_20c35011-6cff-4cac-b2eb-2fe805fd696e.jpg","dateCreated":"2020-10-08T03:35:36.258Z","dateModified":"2020-10-08T03:35:54.193Z","contributedBy":"sumitc91","content":"Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/20c35011-6cff-4cac-b2eb-2fe805fd696e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"merge-two-binary-trees-tree-easy-leetcode","total":360},{"id":1582,"title":"Construct String from Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_e8b61cbd-801c-4ac5-8279-5792c4fd649e.jpg","dateCreated":"2020-10-07T09:12:25.025Z","dateModified":"2020-10-07T09:12:41.839Z","contributedBy":"sumitc91","content":"You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.\nThe null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relat","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e8b61cbd-801c-4ac5-8279-5792c4fd649e.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"construct-string-from-binary-tree-tree-easy-leetcode","total":360},{"id":1581,"title":"N-ary Tree Postorder Traversal - Tree - Easy - LeetCode","imageUrl":"icon_bd59d4ec-34fa-437f-9580-55b338e839a1.jpg","dateCreated":"2020-10-07T08:55:54.36Z","dateModified":"2020-10-07T08:56:06.945Z","contributedBy":"sumitc91","content":"Given an n-ary tree, return the postorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n&nbsp;\nFollow up:\nRecursive solution is trivial,","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/bd59d4ec-34fa-437f-9580-55b338e839a1.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"n-ary-tree-postorder-traversal-tree-easy-leetcode","total":360},{"id":1580,"title":"N-ary Tree Preorder Traversal - Tree - Easy - LeetCode","imageUrl":"icon_552f3a01-1d02-4d03-9aba-f24879032a40.jpg","dateCreated":"2020-10-07T08:50:03.683Z","dateModified":"2020-10-07T08:50:12.614Z","contributedBy":"sumitc91","content":"Given an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n&nbsp;\nFollow up:\nRecursive solution is trivial, ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/552f3a01-1d02-4d03-9aba-f24879032a40.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"n-ary-tree-preorder-traversal-tree-easy-leetcode","total":360},{"id":1579,"title":"Subtree of Another Tree - Tree - Easy - LeetCode","imageUrl":"icon_048066ef-d215-419f-b675-7fe12d76f496.jpg","dateCreated":"2020-10-07T08:44:06.774Z","dateModified":"2020-10-07T08:44:20.819Z","contributedBy":"sumitc91","content":"Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.\nExample 1:<br ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/048066ef-d215-419f-b675-7fe12d76f496.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"subtree-of-another-tree-tree-easy-leetcode","total":360},{"id":1578,"title":"Binary Tree Tilt - Tree - Easy - LeetCode","imageUrl":"icon_55531ca6-6b80-4dbf-96b1-e3333145d1af.jpg","dateCreated":"2020-10-07T08:27:51.42Z","dateModified":"2020-10-07T08:28:04.355Z","contributedBy":"sumitc91","content":"Given a binary tree, return the tilt of the whole tree.\nThe tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.\nThe tilt of the whole tree is defined as the sum ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/55531ca6-6b80-4dbf-96b1-e3333145d1af.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"binary-tree-tilt-tree-easy-leetcode","total":360},{"id":1577,"title":"Maximum Depth of N-ary Tree - Tree - Easy - LeetCode","imageUrl":"icon_5c7d09b8-c901-46a5-b6f3-f23acbc38034.jpg","dateCreated":"2020-10-07T07:48:32.081Z","dateModified":"2020-10-07T07:49:17.954Z","contributedBy":"sumitc91","content":"Given a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5c7d09b8-c901-46a5-b6f3-f23acbc38034.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"maximum-depth-of-n-ary-tree-tree-easy-leetcode","total":360},{"id":1576,"title":"Diameter of Binary Tree - Tree - Easy - LeetCode","imageUrl":"icon_d2a25c60-c9a0-4e0c-a9e0-59e5b4819710.jpg","dateCreated":"2020-10-07T07:36:06.073Z","dateModified":"2020-10-07T07:36:14.644Z","contributedBy":"sumitc91","content":"Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nExample:<br />Given a binary tree<br />&nbsp; &nbsp; &nbsp; &nbs","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d2a25c60-c9a0-4e0c-a9e0-59e5b4819710.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"diameter-of-binary-tree-tree-easy-leetcode","total":360},{"id":1575,"title":"Minimum Absolute Difference in BST - Tree - Easy - LeetCode","imageUrl":"icon_38fc5735-489b-44c1-9767-758b3fe5e9c0.jpg","dateCreated":"2020-10-07T05:54:38.093Z","dateModified":"2020-10-07T05:54:50.146Z","contributedBy":"sumitc91","content":"Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.\nExample:\nInput:\n&nbsp; &nbsp;1<br />&nbsp; &nbsp; \\<br />&nbsp; &nbsp; &nbsp;3<br />&nbsp; &nbsp; /<br />&nbsp; &nbsp;2\nOutput:<br />1\nExpl","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/38fc5735-489b-44c1-9767-758b3fe5e9c0.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"minimum-absolute-difference-in-bst-tree-easy-leetcode","total":360},{"id":1574,"title":"Find Mode in Binary Search Tree - Tree - Easy - LeetCode","imageUrl":"icon_7e61ce7c-697d-4270-8d1b-f48c3bda649b.jpg","dateCreated":"2020-10-07T05:05:11.566Z","dateModified":"2020-10-07T05:05:22.255Z","contributedBy":"sumitc91","content":"Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\nAssume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.<br />The right subtree o","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7e61ce7c-697d-4270-8d1b-f48c3bda649b.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"find-mode-in-binary-search-tree-tree-easy-leetcode","total":360},{"id":1573,"title":"Sum of Left Leaves - Tree - Easy - LeetCode","imageUrl":"icon_7428e4d9-3ec0-4c51-b78a-160b42c2d247.jpg","dateCreated":"2020-10-06T14:29:29.283Z","dateModified":"2020-10-06T14:29:36.996Z","contributedBy":"sumitc91","content":"Find the sum of all left leaves in a given binary tree.\nExample:\n&nbsp; &nbsp; 3<br />&nbsp; &nbsp;/ \\<br />&nbsp; 9 &nbsp;20<br />&nbsp; &nbsp; / &nbsp;\\<br />&nbsp; &nbsp;15 &nbsp; 7\nThere are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7428e4d9-3ec0-4c51-b78a-160b42c2d247.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"binary-tree","slug":"binary-tree"},{"name":"डेटा-संरचना","slug":"data-structure"},{"name":"आसान","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"tree","slug":"tree"}],"slug":"sum-of-left-leaves-tree-easy-leetcode","total":360}]