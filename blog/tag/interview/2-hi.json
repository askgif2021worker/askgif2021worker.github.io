[{"id":1712,"title":"सबसे हाल के वेब सर्वर प्रश्नों के परिणामों को बचाने के लिए एक कुंजी-मूल्य कैश कैसे डिज़ाइन करें","imageUrl":"icon_0e55c5af-9a54-497f-a246-ff16a71e6bbf.png","dateCreated":"2020-11-20T06:59:50.28Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":null,"category":{"name":null,"slug":null},"tags":[],"slug":"how-to-design-a-key-value-cache-to-save-the-results-of-the-most-recent-web-server-queries"},{"id":1688,"title":"सामाजिक नेटवर्क के लिए डेटा संरचनाओं को कैसे डिज़ाइन करें","imageUrl":"icon_031621dc-30c0-4e0d-ba31-1f20a3884f5c.jpg","dateCreated":"2020-11-20T06:57:07.127Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/031621dc-30c0-4e0d-ba31-1f20a3884f5c.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-design-the-data-structures-for-a-social-network"},{"id":1687,"title":"Mint.com डिजाइन कैसे करें","imageUrl":"icon_2709cf5f-1f6f-435b-bf00-9cf152142df5.png","dateCreated":"2020-11-20T06:53:27.643Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2709cf5f-1f6f-435b-bf00-9cf152142df5.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-design-mint.com"},{"id":1686,"title":"कैसे एक वेब क्रॉलर डिजाइन करने के लिए","imageUrl":"icon_f983d8a0-6ee2-4024-8702-47973c582627.png","dateCreated":"2020-11-20T06:47:56.023Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"चरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्नों को संबोधित करने के लिए, हम कुछ उपयोग मामलों और बाधाओं को परिभाषित करेंग","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/f983d8a0-6ee2-4024-8702-47973c582627.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-design-a-web-crawler"},{"id":1685,"title":"ट्विटर टाइमलाइन कैसे डिजाइन करें और सर्च करें","imageUrl":"icon_4cffb0b1-c317-4027-9ff2-188ac3240e74.jpg","dateCreated":"2020-11-20T06:38:46.064Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Facebook फ़ीड डिज़ाइन करें और डिज़ाइन Facebook खोज समान प्रश्न हैं।\nचरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्न पूछें। मान्यताओं पर चर्चा करें।\nसाक्षात्कारकर्ता के बिना स्पष्ट प्रश्","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/4cffb0b1-c317-4027-9ff2-188ac3240e74.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-design-the-twitter-timeline-and-search"},{"id":1684,"title":"कैसे Pastebin.com डिजाइन करने के लिए (या Bit.ly)","imageUrl":"icon_9d14bd09-d9e3-48e7-8309-9e324e9d51de.jpg","dateCreated":"2020-11-20T05:04:08.797Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"डिज़ाइन Bit.ly - एक समान प्रश्न है, सिवाय इसके कि पेस्टिबिन को मूल अप्रशिक्षित यूआरएल के बजाय पेस्ट सामग्री को संग्रहीत करने की आवश्यकता होती है।\nचरण 1: मामलों और बाधाओं का उपयोग करें<br />आवश्यकताओं को इकट्ठा करें और समस्या को हल करें। उपयोग के मामलों और बाधाओं को स्पष्ट करने के लिए प्रश्","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9d14bd09-d9e3-48e7-8309-9e324e9d51de.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-design-pastebin.com-or-bit.ly"},{"id":1683,"title":"सिस्टम डिजाइन साक्षात्कार प्रश्न कैसे संपर्क करें?","imageUrl":"icon_fbaef721-6795-45be-bd0a-7e132d4a2788.jpg","dateCreated":"2020-11-20T04:35:47.854Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"सिस्टम डिज़ाइन साक्षात्कार एक खुली हुई बातचीत है। आपसे इसका नेतृत्व करने की अपेक्षा की जाती है।\nआप चर्चा को निर्देशित करने के लिए निम्नलिखित चरणों का उपयोग कर सकते हैं। इस प्रक्रिया को ठोस बनाने में मदद करने के लिए, निम्न चरणों का उपयोग करके समाधान अनुभाग के साथ सिस्टम डिज़ाइन साक्षात्कार ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/fbaef721-6795-45be-bd0a-7e132d4a2788.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-approach-a-system-design-interview-question"},{"id":130,"title":"How to find the longest border of a string?","imageUrl":"6ceece0b-804d-4456-95dc-5a9ca6c24cda_string-algorithm.png","dateCreated":"2018-09-01T08:01:12.733Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The border of a string is a substring which is both a proper prefix and proper suffix of the string &mdash; \"proper\" meaning that the whole string does not count as a substring. The longest border of x is \"ab\". The longest border of y is \"abab\" (the prefix and suffix can overlap).\r\nMore de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ceece0b-804d-4456-95dc-5a9ca6c24cda_string-algorithm.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-find-the-longest-border-of-a-string"},{"id":112,"title":"Search an element in binary tree without recursion.","imageUrl":"b3ea6acf-6279-4e29-b3cd-bb09edbc2784_binary-tree.jpg","dateCreated":"2018-08-16T09:08:38.069Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"We can use level order traversal for solving this problem. The only change required in level order traversal is, instead of printing the date we just need to check whether the root data is equal to the element we want to search.\r\nsource:&nbsp;Data Structures and Algorithms Made Easy in Jav","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b3ea6acf-6279-4e29-b3cd-bb09edbc2784_binary-tree.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"search-an-element-in-binary-tree-without-recursion"},{"id":111,"title":"Find maximum element in binary tree without recursion.","imageUrl":"852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","dateCreated":"2018-08-16T08:35:11.21Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"We could have used either PreOrder, InOrder or PostOrder traversal to find the maximum in a Tree but as it is mentioned that we need to find the maximum without using Recursion.\r\nUsing Level Order Traversal we can find the Maximum element. We just need to observe the elements data while de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/852f8357-9b87-4af3-9054-484bbc13f1fd_BST_Example.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"find-maximum-element-in-binary-tree-without-recursion"},{"id":108,"title":"How to implement Level Order Traversal in Binary Tree?","imageUrl":"7833549b-eb6c-47f7-a6b0-1364f1434f70_binary_tree_breadth-first_traversal.png","dateCreated":"2018-08-14T14:06:33.296Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Trees can also be traversed in level-order, where we visit every node on a level before going to a lower level. This search is referred to as a breadth-first search (BFS), as the search tree is broadened as much as possible on each depth before going to the next depth.\r\nJava implementation","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7833549b-eb6c-47f7-a6b0-1364f1434f70_binary_tree_breadth-first_traversal.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-implement-level-order-traversal-in-binary-tree"},{"id":105,"title":"How to implement PostOrder Traversal in Binary Tree?","imageUrl":"d82cf369-0894-48fd-ba39-de927c3291d9_post-order-traversal.png","dateCreated":"2018-08-09T14:28:23.665Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"PostOrder Traversal is different from InOrder Traversal and PreOrder Traversal. In this Traversal approach we first traverse through left and then right and at the end, we traverse to the node data.\r\nIn PostOrder traversal, the root is visited after both subtrees. PostOrder traversal is de","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d82cf369-0894-48fd-ba39-de927c3291d9_post-order-traversal.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-implement-postorder-traversal-in-binary-tree"}]