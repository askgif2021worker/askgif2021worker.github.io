[{"id":90,"title":"How to detect and print the start of a Loop in a circular Linked List?","imageUrl":"af132682-62fb-4cb4-b899-5527cc0e05d0_circular-loop.jpg","dateCreated":"2018-08-07T11:48:46.585Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"So the question given is to check if the Given Linked list is having a cycle or Not, and if there is a cycle then we need to print the start of the Loop in a cyclic linked list.\r\nWe will be using Floyd Cycle to find the solution of the given problem.\r\nIt uses 2 pointers moving at di","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/af132682-62fb-4cb4-b899-5527cc0e05d0_circular-loop.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-detect-and-print-the-start-of-a-loop-in-a-circular-linked-list"},{"id":89,"title":"How to Check if a linked list is either NULL-terminated or ends in a cycle (cyclic)","imageUrl":"6ff093e0-9c78-4bb2-861e-5b96b8c47fcc_linkedlist-circle.png","dateCreated":"2018-08-07T11:26:31.699Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"So the question given is to check if the Given Linked list is having a cycle or Not?\r\nWe will be using Floyd Cycle to find the solution of the given problem.\r\nIt uses 2 pointers moving at different speeds to walking the linked list. Once they enter the loop they are expected to meet","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6ff093e0-9c78-4bb2-861e-5b96b8c47fcc_linkedlist-circle.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-check-if-a-linked-list-is-either-null-terminated-or-ends-in-a-cycle-cyclic"},{"id":87,"title":"How to find Nth node from the end of a Linked List?","imageUrl":"d56c6c6f-abf1-425a-8c3b-d14b4068d305_find-nth-node.png","dateCreated":"2018-08-06T12:38:40.227Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Given a linked list, remove the nth node from the end of the list and return its head.\r\nFor example,\r\nGiven linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.\r\nAfter removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.\r\nGiven n will alway","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d56c6c6f-abf1-425a-8c3b-d14b4068d305_find-nth-node.png","category":{"name":null,"slug":null},"tags":[],"slug":"how-to-find-nth-node-from-the-end-of-a-linked-list"},{"id":85,"title":"Discuss Towers of Hanoi Puzzle.","imageUrl":"c0163425-be46-4869-b182-865969bc6dee_tower-of-hanoi.gif","dateCreated":"2018-08-06T08:19:23.128Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The Tower of Hanoi is a mathematical puzzle.&nbsp; It consists of three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks on one rod in ascending order of size the smallest at the top, thus making a conical shape. The objective of the puz","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c0163425-be46-4869-b182-865969bc6dee_tower-of-hanoi.gif","category":{"name":null,"slug":null},"tags":[],"slug":"discuss-towers-of-hanoi-puzzle"},{"id":78,"title":"What is Design Patterns?","imageUrl":"8a74e74a-3070-41f8-9ddf-4d3b87119ee7_design-patterns.png","dateCreated":"2018-08-01T16:29:58.336Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"Design Patterns: Elements of Reusable Object-Oriented Software is a software engineering book describing software design patterns. The book's authors are Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides with a foreword by Grady Booch. The book is divided into two parts, with the first ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/8a74e74a-3070-41f8-9ddf-4d3b87119ee7_design-patterns.png","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-design-patterns"},{"id":77,"title":"What is Composite pattern?","imageUrl":"7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","dateCreated":"2018-08-01T16:08:32.863Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that are treated the same way as a single instance of the same type of object. The intent of a composite is to \"compose\" objects into tree structures to represent pa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/7ce89db3-2021-4218-9d92-d15805039607_Composite_Pattern.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-composite-pattern"},{"id":76,"title":"प्रॉक्सी पैटर्न क्या है?","imageUrl":"aaeafdf4-c3d7-4245-809f-7be5d5a4ac59_Proxy_Pattern.jpg","dateCreated":"2018-08-01T16:04:57.813Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In computer programming, the proxy pattern is a software design pattern.\r\n&nbsp;\r\nA proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/aaeafdf4-c3d7-4245-809f-7be5d5a4ac59_Proxy_Pattern.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-proxy-pattern"},{"id":75,"title":"What is State pattern?","imageUrl":"ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","dateCreated":"2018-08-01T15:58:57.611Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The state pattern is a behavioural software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface and implementing state transitions b","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ee03abc9-76e3-4fe4-9e66-c1b577a3fb8f_State_Pattern.jpg","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-state-pattern"},{"id":74,"title":"इटरेटर पैटर्न क्या है?","imageUrl":"2ae1cc9a-b9ca-4dd5-8faf-ae38f2bdd6c3_Iterator-pattern.png","dateCreated":"2018-08-01T15:49:45.656Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container's elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus canno","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/2ae1cc9a-b9ca-4dd5-8faf-ae38f2bdd6c3_Iterator-pattern.png","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-iterator-pattern"},{"id":73,"title":"टेम्पलेट पैटर्न क्या है?","imageUrl":"1573c83b-c91b-4944-be45-b6b2f866e450_Template_Method.png","dateCreated":"2018-08-01T15:41:25.221Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In software engineering, the template method pattern is a behavioural design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure. The template m","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1573c83b-c91b-4944-be45-b6b2f866e450_Template_Method.png","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-template-pattern"},{"id":72,"title":"फेकाडे पैटर्न क्या है?","imageUrl":"509c3ba4-0943-4aba-aa8e-7bbf8cdad079_Facade_design_pattern.png","dateCreated":"2018-08-01T15:23:05.846Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"The facade pattern (also spelt fa&ccedil;ade) is a software-design pattern commonly used with object-oriented programming. Analogous to a facade in architecture, a facade is an object that serves as a front-facing interface masking more complex underlying or structural code. A facade can:\r\n<p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/509c3ba4-0943-4aba-aa8e-7bbf8cdad079_Facade_design_pattern.png","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-facade-pattern"},{"id":71,"title":"कमांड पैटर्न क्या है?","imageUrl":"c126c75e-3ad2-4e51-816a-33df0c655224_Command_pattern.png","dateCreated":"2018-08-01T15:15:51.573Z","dateModified":"0001-01-01T00:00:00","contributedBy":null,"content":"In object-oriented programming, the command pattern is a behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c126c75e-3ad2-4e51-816a-33df0c655224_Command_pattern.png","category":{"name":null,"slug":null},"tags":[],"slug":"what-is-command-pattern"}]