[{"id":70,"title":"सिंगलटन पैटर्न क्या है?","imageUrl":"cd3b4cdf-875c-4382-8f39-8e7c74356b19_singleton-pattern.png","dateCreated":"2018-08-01T13:32:33.457Z","dateModified":"2018-08-01T17:19:42.254Z","contributedBy":"AskGif","content":"In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more effici","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/cd3b4cdf-875c-4382-8f39-8e7c74356b19_singleton-pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"creational-pattern","slug":"creational-pattern"}],"slug":"what-is-singleton-pattern","total":92},{"id":69,"title":"एडाप्टर पैटर्न क्या है?","imageUrl":"d3a5fc87-6928-4196-b3ae-d8e4ed5b9811_adapter-pattern.jpg","dateCreated":"2018-08-01T13:09:38.32Z","dateModified":"2018-08-01T17:20:54.998Z","contributedBy":"AskGif","content":"In software engineering, the adapter pattern is a software design pattern (also known as Wrapper, an alternative naming shared with the Decorator pattern) that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others wit","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/d3a5fc87-6928-4196-b3ae-d8e4ed5b9811_adapter-pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"design-patterns","slug":"design-patterns"},{"name":"structural-pattern","slug":"structural-pattern"},{"name":"interview","slug":"interview"}],"slug":"what-is-adapter-pattern","total":92},{"id":68,"title":"फैक्टरी पैटर्न क्या है?","imageUrl":"e2172f61-aced-4a65-a785-9978cd5ffdb7_factory-pattern.jpg","dateCreated":"2018-08-01T12:47:00.64Z","dateModified":"2018-08-01T17:19:17.793Z","contributedBy":"AskGif","content":"In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method&mdash;ei","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e2172f61-aced-4a65-a785-9978cd5ffdb7_factory-pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"creational-pattern","slug":"creational-pattern"},{"name":"design-patterns","slug":"design-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-factory-pattern","total":92},{"id":67,"title":"सजावट पैटर्न क्या है?","imageUrl":"c2eb4ba8-15a8-4f6f-9ad5-6788bdecbe58_decorator-pattern.jpg","dateCreated":"2018-08-01T12:35:29.821Z","dateModified":"2018-08-01T17:21:52.547Z","contributedBy":"AskGif","content":"In object-oriented programming, the decorator pattern is a design pattern that allows the behaviour to be added to an individual object, either statically or dynamically, without affecting the behaviour of other objects from the same class. The decorator pattern is often useful for adhering to th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/c2eb4ba8-15a8-4f6f-9ad5-6788bdecbe58_decorator-pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"design-patterns","slug":"design-patterns"},{"name":"structural-pattern","slug":"structural-pattern"}],"slug":"what-is-decorator-pattern","total":92},{"id":66,"title":"पर्यवेक्षक पैटर्न क्या है?","imageUrl":"e69dad7f-de9e-4693-9048-db8d81419863_Observer-pattern.png","dateCreated":"2018-08-01T12:21:30.92Z","dateModified":"2018-08-01T17:24:10.49Z","contributedBy":"AskGif","content":"The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\r\n&nbsp;\r\nIt is mainly used to implement dist","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e69dad7f-de9e-4693-9048-db8d81419863_Observer-pattern.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"},{"name":"design-patterns","slug":"design-patterns"}],"slug":"what-is-observer-pattern-","total":92},{"id":65,"title":"रणनीति पैटर्न क्या है?","imageUrl":"ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","dateCreated":"2018-08-01T12:05:22.176Z","dateModified":"2018-08-01T17:24:43.716Z","contributedBy":"AskGif","content":"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which is a family of algorithms ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/ffa5f7f6-cc72-474b-8dd9-afcf149959f1_strategy_pattern.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"design-patterns","slug":"design-patterns"},{"name":"behavioral-patterns","slug":"behavioral-patterns"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"what-is-strategy-pattern","total":92},{"id":61,"title":"How to solve Longest Palindromic Subsequence Problem using dynamic programming?","imageUrl":"90b9e546-462a-45eb-a042-60164d9cf25e_longest-palindrome-subsequence.png","dateCreated":"2018-07-31T14:35:26.066Z","dateModified":"2018-07-31T14:35:35.531Z","contributedBy":"AskGif","content":"The longest palindromic subsequence (LPS) problem is the problem of finding the longest subsequence of a string (a subsequence is obtained by deleting some of the characters from a string without reordering the remaining characters) which is also a palindrome. In general, the longest palindromic ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/90b9e546-462a-45eb-a042-60164d9cf25e_longest-palindrome-subsequence.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"recursion","slug":"recursion"}],"slug":"how-to-solve-longest-palindromic-subsequence-problem-using-dynamic-programming","total":92},{"id":60,"title":"How to solve Edit Distance Problem using dynamic programming?","imageUrl":"9e07d056-ccf7-4fc8-b6ee-000c8032b9ec_editDistance.gif","dateCreated":"2018-07-31T12:00:39.882Z","dateModified":"2018-07-31T12:00:50.966Z","contributedBy":"AskGif","content":"In computational linguistics and computer science, edit distance is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations required to transform one string into the other. Edit distances find applications in natural language p","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/9e07d056-ccf7-4fc8-b6ee-000c8032b9ec_editDistance.gif","category":{"name":"coding","slug":"coding"},"tags":[{"name":"java","slug":"java"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"recursion","slug":"recursion"}],"slug":"how-to-solve-edit-distance-problem-using-dynamic-programming","total":92},{"id":59,"title":"How to Solve Coin Change Problem using Dynamic Programming for Minimum number of ways possible?","imageUrl":"450a3f20-633e-4f13-aa8e-dce34b85cf72_make-change.png","dateCreated":"2018-07-31T09:15:15.694Z","dateModified":"2018-07-31T09:15:30.599Z","contributedBy":"AskGif","content":"Coin Change Problem is also known as Making Change Problem.\r\nThe change-making problem, also known as the minimum coin change problem, addresses the question of finding the minimum number of coins (of certain denominations) that add up to a given amount of money. It is a knapsack type prob","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/450a3f20-633e-4f13-aa8e-dce34b85cf72_make-change.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"recursion","slug":"recursion"},{"name":"java","slug":"java"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"प्रशन","slug":"questions"},{"name":"interview","slug":"interview"}],"slug":"how-to-solve-coin-change-problem-using-dynamic-programming-for-minimum-number-of-ways-possible","total":92},{"id":58,"title":"How to solve Knapsack problem using Dynamic Programming","imageUrl":"b6cbe28d-ef39-4235-aa96-015ea58e9991_knapsack.jpg","dateCreated":"2018-07-31T07:51:18.76Z","dateModified":"2018-07-31T07:51:31.675Z","contributedBy":"AskGif","content":"The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/b6cbe28d-ef39-4235-aa96-015ea58e9991_knapsack.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"recursion","slug":"recursion"},{"name":"interview","slug":"interview"},{"name":"प्रशन","slug":"questions"},{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"java","slug":"java"}],"slug":"how-to-solve-knapsack-problem-using-dynamic-programming","total":92},{"id":57,"title":"स्वचालन फ्रेमवर्क की मुख्य विशेषताएं","imageUrl":"afb8af39-0840-4657-b903-26591e9c3b8d_automation.gif","dateCreated":"2018-07-30T14:58:57.992Z","dateModified":"2018-07-30T14:59:07.237Z","contributedBy":"AskGif","content":"In the modern software industry, Automation is becoming a must-have feature for the testing teams to quickly test and certify builds and find the bugs. To achieve the above criterion, a good automation framework is required. Now, what do we mean by a good automation framework? Let me quickly guid","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/afb8af39-0840-4657-b903-26591e9c3b8d_automation.gif","category":{"name":"coding","slug":"coding"},"tags":[{"name":"स्वचालन-ढांचा","slug":"automation-framework"},{"name":"interview","slug":"interview"},{"name":"परिक्षण","slug":"testing"}],"slug":"key-features-of-automation-framework","total":92},{"id":55,"title":"How to solve Matrix Product Parenthesizations problem?","imageUrl":"3037b8be-31fd-4f24-8882-e7babe1f2242_matrix-mult.jpg","dateCreated":"2018-07-30T12:26:31.838Z","dateModified":"2018-07-30T12:32:48.996Z","contributedBy":"AskGif","content":"Matrix chain multiplication (or Matrix Chain Ordering Problem, MCOP) is an optimization problem that can be solved using dynamic programming. Given a sequence of matrices, the goal is to find the most efficient way to multiply these matrices. The problem is not actually to perform the multiplicat","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/3037b8be-31fd-4f24-8882-e7babe1f2242_matrix-mult.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"dynamic-programming","slug":"dynamic-programming"},{"name":"interview","slug":"interview"},{"name":"java","slug":"java"},{"name":"प्रशन","slug":"questions"}],"slug":"how-to-solve-matrix-product-parenthesizations-problem","total":92}]