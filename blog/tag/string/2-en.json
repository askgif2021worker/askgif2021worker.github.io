[{"id":1615,"title":"License Key Formatting - String - Easy - LeetCode","imageUrl":"icon_168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","dateCreated":"2020-10-17T04:06:23.384Z","dateModified":"2020-10-17T04:06:32.538Z","contributedBy":"sumitc91","content":"You are given a license key represented as a string S which consists of only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the fi","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/168f3a9d-b3aa-4758-a48d-b2e53a3ad538.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"license-key-formatting-string-easy-leetcode","total":76},{"id":1524,"title":"Rearrange Spaces Between Words - String - Easy - LeetCode","imageUrl":"icon_14fd5351-f838-4c15-8e78-5201b52966a2.jpg","dateCreated":"2020-10-02T11:34:32.747Z","dateModified":"2020-10-02T11:34:58.718Z","contributedBy":"sumitc91","content":"You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.\nRearrange the spaces so that there is an equal number","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/14fd5351-f838-4c15-8e78-5201b52966a2.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"rearrange-spaces-between-words-string-easy-leetcode","total":76},{"id":1523,"title":"Replace All ? to Avoid Consecutive Repeating Characters - String - Easy - LeetCode","imageUrl":"icon_6d76f4d8-f4e4-4634-95a7-a35ea72d49c1.jpg","dateCreated":"2020-10-02T11:15:48.241Z","dateModified":"2020-10-02T11:16:05.876Z","contributedBy":"sumitc91","content":"Given a string s containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.\nIt is guaranteed that there ","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6d76f4d8-f4e4-4634-95a7-a35ea72d49c1.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"replace-all-to-avoid-consecutive-repeating-characters-string-easy-leetcode","total":76},{"id":1522,"title":"Thousand Separator - String - Easy - LeetCode","imageUrl":"icon_5a446617-8466-42ea-beb2-1a0ff620fba8.jpg","dateCreated":"2020-10-02T10:39:03.036Z","dateModified":"2020-10-02T10:39:35.237Z","contributedBy":"sumitc91","content":"Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.\n&nbsp;\nExample 1:\nInput: n = 987<br />Output: \"987\"<br />Example 2:\nInput: n = 1234<br />Output: \"1.234\"<br />Example 3:\nInput: n = 123456789<br />Output: \"123.456.789","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/5a446617-8466-42ea-beb2-1a0ff620fba8.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"thousand-separator-string-easy-leetcode","total":76},{"id":1521,"title":"Make The String Great - String - Easy - LeetCode","imageUrl":"icon_1246608d-9e19-438a-8216-3327c85b02da.jpg","dateCreated":"2020-10-02T10:20:43.393Z","dateModified":"2020-10-02T10:21:02.743Z","contributedBy":"sumitc91","content":"Given a string s of lower and upper case English letters.\nA good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:\n0 &lt;= i &lt;= s.length - 2<br />s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.<br /","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/1246608d-9e19-438a-8216-3327c85b02da.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"make-the-string-great-string-easy-leetcode","total":76},{"id":1520,"title":"Reformat Date - String - Easy - LeetCode","imageUrl":"icon_52b9f146-d608-44e9-8fe3-68cb454d96f7.jpg","dateCreated":"2020-10-02T10:00:01.731Z","dateModified":"2020-10-02T10:00:14.916Z","contributedBy":"sumitc91","content":"Given a date string in the form Day Month Year, where:\nDay is in the set {\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}.<br />Month is in the set {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}.<br />Year is in the range [1900, 2100].<br />Convert th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/52b9f146-d608-44e9-8fe3-68cb454d96f7.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"reformat-date-string-easy-leetcode","total":76},{"id":1519,"title":"Path Crossing - String - Easy - LeetCode","imageUrl":"icon_a28decf6-6f2f-4a7a-990b-ddcf45aa955f.jpg","dateCreated":"2020-10-02T09:33:39.167Z","dateModified":"2020-10-02T09:33:58.835Z","contributedBy":"sumitc91","content":"Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\nReturn True if the path crosses itself at any point, that is, if at a","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/a28decf6-6f2f-4a7a-990b-ddcf45aa955f.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"algorithm","slug":"algorithm"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"leetcode","slug":"leetcode"},{"name":"string","slug":"string"}],"slug":"path-crossing-string-easy-leetcode","total":76},{"id":1335,"title":"Groups of Special-Equivalent Strings - Easy - LeetCode","imageUrl":"777fbd8f-51f2-4c38-9d3e-eadcc18d3d71-array.png","dateCreated":"2020-06-06T09:10:12.091Z","dateModified":"2020-06-06T09:10:25.141Z","contributedBy":"AskGif","content":"You are given an array A of strings.\r\nA move onto S consists of swapping any two even indexed characters of S, or any two odd indexed characters of S.\r\nTwo strings S and T are special-equivalent if after any number of moves onto S, S == T.\r\nFor example, S = \"zzxy\" and T = \"xy","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/777fbd8f-51f2-4c38-9d3e-eadcc18d3d71-array.png","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"}],"slug":"groups-of-special-equivalent-strings-easy-leetcode","total":76},{"id":1327,"title":"Roman to Integer - String - Easy - LeetCode","imageUrl":"93e09f6e-55eb-446e-82ce-d203e4d9f0ac-q3.jpg","dateCreated":"2020-06-05T08:31:38.75Z","dateModified":"2020-06-05T08:31:55.304Z","contributedBy":"AskGif","content":"Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\r\n&nbsp;\r\nSymbol&nbsp; &nbsp; &nbsp; &nbsp;Value\r\nI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1\r\nV&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5\r\nX&nbsp; &nbsp; &nbsp; &nb","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/93e09f6e-55eb-446e-82ce-d203e4d9f0ac-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"roman-to-integer-string-easy-leetcode","total":76},{"id":1326,"title":"Longest Common Prefix - String - Easy - LeetCode","imageUrl":"6f4c5669-a9f1-4bbb-8f5e-ecb1dddcb00b-q3.jpg","dateCreated":"2020-06-05T07:23:55.909Z","dateModified":"2020-06-05T07:24:42.622Z","contributedBy":"AskGif","content":"Write a function to find the longest common prefix string amongst an array of strings.\r\nIf there is no common prefix, return an empty string \"\".\r\n&nbsp;\r\nExample 1:\r\nInput: [\"flower\",\"flow\",\"flight\"]\r\nOutput: \"fl\"\r\n&nbsp;\r\nExample 2:\r\nInput:","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/6f4c5669-a9f1-4bbb-8f5e-ecb1dddcb00b-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"longest-common-prefix-string-easy-leetcode","total":76},{"id":1325,"title":"Valid Parentheses - String - Easy - LeetCode","imageUrl":"0e7e76a3-03d1-47fb-b6ec-5bcc5a2a25a4-q3.jpg","dateCreated":"2020-06-04T13:38:09.626Z","dateModified":"2020-06-04T13:38:53.249Z","contributedBy":"AskGif","content":"Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\r\nAn input string is valid if:\r\nOpen brackets must be closed by the same type of brackets.\r\nOpen brackets must be closed in the correct order.\r\nNote th","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/0e7e76a3-03d1-47fb-b6ec-5bcc5a2a25a4-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"leetcode","slug":"leetcode"},{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"}],"slug":"valid-parentheses-string-easy-leetcode","total":76},{"id":1324,"title":"Implement strStr() - String - Easy - LeetCode","imageUrl":"e6c62b93-8a0d-49f3-9adf-69e301534a4a-q3.jpg","dateCreated":"2020-06-04T13:14:30.82Z","dateModified":"2020-06-04T13:14:49.062Z","contributedBy":"AskGif","content":"Implement strStr().\r\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\r\n&nbsp;\r\nExample 1:\r\nInput: haystack = \"hello\", needle = \"ll\"\r\nOutput: 2\r\n&nbsp;\r\nExample 2:\r\nInput: haystack = \"aa","ampImage":"https://raw.githubusercontent.com/sumitc91/AmpImage/main/Blogs/e6c62b93-8a0d-49f3-9adf-69e301534a4a-q3.jpg","category":{"name":"coding","slug":"coding"},"tags":[{"name":"c-sharp","slug":"c-sharp"},{"name":"data-structure","slug":"data-structure"},{"name":"easy","slug":"easy"},{"name":"algorithm","slug":"algorithm"},{"name":"string","slug":"string"},{"name":"leetcode","slug":"leetcode"}],"slug":"implement-strstr-string-easy-leetcode","total":76}]